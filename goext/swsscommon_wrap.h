/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: swsscommon.i

#ifndef SWIG_swsscommon_WRAP_H_
#define SWIG_swsscommon_WRAP_H_

class Swig_memory;

class SwigDirector_Counter : public swss::Counter
{
 public:
  SwigDirector_Counter(int swig_p);
  std::string const &_swig_upcall_getLuaScript() const {
    return swss::Counter::getLuaScript();
  }
  virtual std::string const &getLuaScript() const;
  std::vector< std::string > _swig_upcall_getLuaArgv() const {
    return swss::Counter::getLuaArgv();
  }
  virtual std::vector< std::string > getLuaArgv() const;
  bool _swig_upcall_usingLuaTable(swss::CounterTable const &arg0, std::string const &name) const {
    return swss::Counter::usingLuaTable(arg0,name);
  }
  virtual bool usingLuaTable(swss::CounterTable const &arg0, std::string const &name) const;
  std::vector< std::string > _swig_upcall_getLuaKeys(swss::CounterTable const &arg0, std::string const &name) const {
    return swss::Counter::getLuaKeys(arg0,name);
  }
  virtual std::vector< std::string > getLuaKeys(swss::CounterTable const &arg0, std::string const &name) const;
  virtual swss::Counter::KeyPair getKey(swss::CounterTable const &arg0, std::string const &name) const;
  virtual ~SwigDirector_Counter();
 private:
  intgo go_val;
  Swig_memory *swig_mem;
};

class SwigDirector_ProducerStateTable : public swss::ProducerStateTable
{
 public:
  SwigDirector_ProducerStateTable(int swig_p, swss::DBConnector *db, std::string const &tableName);
  SwigDirector_ProducerStateTable(int swig_p, swss::RedisPipeline *pipeline, std::string const &tableName, bool buffered);
  SwigDirector_ProducerStateTable(int swig_p, swss::RedisPipeline *pipeline, std::string const &tableName);
  virtual ~SwigDirector_ProducerStateTable();
  void _swig_upcall_set__SWIG_0(std::string const &key, std::vector< swss::FieldValueTuple > const &values, std::string const &op, std::string const &prefix) {
    swss::ProducerStateTable::set(key,values,op,prefix);
  }
  virtual void set(std::string const &key, std::vector< swss::FieldValueTuple > const &values, std::string const &op, std::string const &prefix);
  void _swig_upcall_set__SWIG_1(std::string const &key, std::vector< swss::FieldValueTuple > const &values, std::string const &op) {
    swss::ProducerStateTable::set(key,values,op);
  }
  virtual void set(std::string const &key, std::vector< swss::FieldValueTuple > const &values, std::string const &op);
  void _swig_upcall_set__SWIG_2(std::string const &key, std::vector< swss::FieldValueTuple > const &values) {
    swss::ProducerStateTable::set(key,values);
  }
  virtual void set(std::string const &key, std::vector< swss::FieldValueTuple > const &values);
  void _swig_upcall_delete__SWIG_0(std::string const &key, std::string const &op, std::string const &prefix) {
    swss::ProducerStateTable::del(key,op,prefix);
  }
  virtual void del(std::string const &key, std::string const &op, std::string const &prefix);
  void _swig_upcall_delete__SWIG_1(std::string const &key, std::string const &op) {
    swss::ProducerStateTable::del(key,op);
  }
  virtual void del(std::string const &key, std::string const &op);
  void _swig_upcall_delete__SWIG_2(std::string const &key) {
    swss::ProducerStateTable::del(key);
  }
  virtual void del(std::string const &key);
  void _swig_upcall_set__SWIG_3(std::vector< swss::KeyOpFieldsValuesTuple > const &values) {
    swss::ProducerStateTable::set(values);
  }
  virtual void set(std::vector< swss::KeyOpFieldsValuesTuple > const &values);
  void _swig_upcall_delete__SWIG_3(std::vector< std::string > const &keys) {
    swss::ProducerStateTable::del(keys);
  }
  virtual void del(std::vector< std::string > const &keys);
 private:
  intgo go_val;
  Swig_memory *swig_mem;
};

class SwigDirector_ZmqProducerStateTable : public swss::ZmqProducerStateTable
{
 public:
  SwigDirector_ZmqProducerStateTable(int swig_p, swss::DBConnector *db, std::string const &tableName, swss::ZmqClient &zmqClient, bool dbPersistence);
  SwigDirector_ZmqProducerStateTable(int swig_p, swss::DBConnector *db, std::string const &tableName, swss::ZmqClient &zmqClient);
  SwigDirector_ZmqProducerStateTable(int swig_p, swss::RedisPipeline *pipeline, std::string const &tableName, swss::ZmqClient &zmqClient, bool buffered, bool dbPersistence);
  SwigDirector_ZmqProducerStateTable(int swig_p, swss::RedisPipeline *pipeline, std::string const &tableName, swss::ZmqClient &zmqClient, bool buffered);
  SwigDirector_ZmqProducerStateTable(int swig_p, swss::RedisPipeline *pipeline, std::string const &tableName, swss::ZmqClient &zmqClient);
  virtual ~SwigDirector_ZmqProducerStateTable();
  void _swig_upcall_set__SWIG_0(std::string const &key, std::vector< swss::FieldValueTuple > const &values, std::string const &op, std::string const &prefix) {
    swss::ZmqProducerStateTable::set(key,values,op,prefix);
  }
  virtual void set(std::string const &key, std::vector< swss::FieldValueTuple > const &values, std::string const &op, std::string const &prefix);
  void _swig_upcall_set__SWIG_1(std::string const &key, std::vector< swss::FieldValueTuple > const &values, std::string const &op) {
    swss::ZmqProducerStateTable::set(key,values,op);
  }
  virtual void set(std::string const &key, std::vector< swss::FieldValueTuple > const &values, std::string const &op);
  void _swig_upcall_set__SWIG_2(std::string const &key, std::vector< swss::FieldValueTuple > const &values) {
    swss::ZmqProducerStateTable::set(key,values);
  }
  virtual void set(std::string const &key, std::vector< swss::FieldValueTuple > const &values);
  void _swig_upcall_delete__SWIG_0(std::string const &key, std::string const &op, std::string const &prefix) {
    swss::ZmqProducerStateTable::del(key,op,prefix);
  }
  virtual void del(std::string const &key, std::string const &op, std::string const &prefix);
  void _swig_upcall_delete__SWIG_1(std::string const &key, std::string const &op) {
    swss::ZmqProducerStateTable::del(key,op);
  }
  virtual void del(std::string const &key, std::string const &op);
  void _swig_upcall_delete__SWIG_2(std::string const &key) {
    swss::ZmqProducerStateTable::del(key);
  }
  virtual void del(std::string const &key);
  void _swig_upcall_set__SWIG_3(std::vector< swss::KeyOpFieldsValuesTuple > const &values) {
    swss::ZmqProducerStateTable::set(values);
  }
  virtual void set(std::vector< swss::KeyOpFieldsValuesTuple > const &values);
  void _swig_upcall_delete__SWIG_3(std::vector< std::string > const &keys) {
    swss::ZmqProducerStateTable::del(keys);
  }
  virtual void del(std::vector< std::string > const &keys);
  void _swig_upcall_send(std::vector< swss::KeyOpFieldsValuesTuple > const &kcos) {
    swss::ZmqProducerStateTable::send(kcos);
  }
  virtual void send(std::vector< swss::KeyOpFieldsValuesTuple > const &kcos);
 private:
  intgo go_val;
  Swig_memory *swig_mem;
};

#endif
