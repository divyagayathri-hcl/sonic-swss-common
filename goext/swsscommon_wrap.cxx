/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: swsscommon.i

#define SWIGMODULE swsscommon
#define SWIG_DIRECTORS

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>



typedef long long intgo;
typedef unsigned long long uintgo;


# if !defined(__clang__) && (defined(__i386__) || defined(__x86_64__))
#   define SWIGSTRUCTPACKED __attribute__((__packed__, __gcc_struct__))
# else
#   define SWIGSTRUCTPACKED __attribute__((__packed__))
# endif



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;




#define swiggo_size_assert_eq(x, y, name) typedef char name[(x-y)*(x-y)*-2+1];
#define swiggo_size_assert(t, n) swiggo_size_assert_eq(sizeof(t), n, swiggo_sizeof_##t##_is_not_##n)

swiggo_size_assert(char, 1)
swiggo_size_assert(short, 2)
swiggo_size_assert(int, 4)
typedef long long swiggo_long_long;
swiggo_size_assert(swiggo_long_long, 8)
swiggo_size_assert(float, 4)
swiggo_size_assert(double, 8)

#ifdef __cplusplus
extern "C" {
#endif
extern void crosscall2(void (*fn)(void *, int), void *, int);
extern char* _cgo_topofstack(void) __attribute__ ((weak));
extern void _cgo_allocate(void *, int);
extern void _cgo_panic(void *, int);
#ifdef __cplusplus
}
#endif

static char *_swig_topofstack() {
  if (_cgo_topofstack) {
    return _cgo_topofstack();
  } else {
    return 0;
  }
}

static void _swig_gopanic(const char *p) {
  struct {
    const char *p;
  } SWIGSTRUCTPACKED a;
  a.p = p;
  crosscall2(_cgo_panic, &a, (int) sizeof a);
}




#define SWIG_contract_assert(expr, msg) \
  if (!(expr)) { _swig_gopanic(msg); } else


#define SWIG_exception(code, msg) _swig_gopanic(msg)


static _gostring_ Swig_AllocateString(const char *p, size_t l) {
  _gostring_ ret;
  ret.p = (char*)malloc(l);
  memcpy(ret.p, p, l);
  ret.n = l;
  return ret;
}

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Go proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#include <exception>
#include <map>

namespace Swig {

  class DirectorException : public std::exception {
  };
}

/* Handle memory management for directors.  */

namespace {
  struct GCItem {
    virtual ~GCItem() {}
  };

  struct GCItem_var {
    GCItem_var(GCItem *item = 0) : _item(item) {
    }

    GCItem_var& operator=(GCItem *item) {
      GCItem *tmp = _item;
      _item = item;
      delete tmp;
      return *this;
    }

    ~GCItem_var() {
      delete _item;
    }

    GCItem* operator->() {
      return _item;
    }

    private:
      GCItem *_item;
  };

  template <typename Type>
  struct GCItem_T : GCItem {
    GCItem_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCItem_T() {
      delete _ptr;
    }

  private:
    Type *_ptr;
  };
}

class Swig_memory {
public:
  template <typename Type>
  void swig_acquire_pointer(Type* vptr) {
    if (vptr) {
      swig_owner[vptr] = new GCItem_T<Type>(vptr);
    }
  }
private:
  typedef std::map<void *, GCItem_var> swig_ownership_map;
  swig_ownership_map swig_owner;
};

template <typename Type>
static void swig_acquire_pointer(Swig_memory** pmem, Type* ptr) {
  if (!pmem) {
    *pmem = new Swig_memory;
  }
  (*pmem)->swig_acquire_pointer(ptr);
}

static void Swig_free(void* p) {
  free(p);
}

static void* Swig_malloc(int c) {
  return malloc(c);
}


// ref: http://www.swig.org/Doc3.0/Python.html
// A Python 2 string is not a unicode string by default and should a Unicode
// string be passed to C/C++ it will fail to convert to a C/C++ string (char *
// or std::string types). The Python 2 behavior can be made more like Python 3
// by defining SWIG_PYTHON_2_UNICODE when compiling the generated C/C++ code.
// Unicode strings will be successfully accepted and converted from UTF-8, but
// note that they are returned as a normal Python 2 string
#define SWIG_PYTHON_2_UNICODE

#include "schema.h"
#include "dbconnector.h"
#include "dbinterface.h"
#include "sonicv2connector.h"
#include "pubsub.h"
#include "select.h"
#include "selectable.h"
#include "rediscommand.h"
#include "table.h"
#include "countertable.h"
#include "redispipeline.h"
#include "redisreply.h"
#include "redisselect.h"
#include "redistran.h"
#include "producerstatetable.h"
#include "consumertablebase.h"
#include "consumerstatetable.h"
#include "producertable.h"
#include "profileprovider.h"
#include "consumertable.h"
#include "subscriberstatetable.h"
#ifdef ENABLE_YANG_MODULES
#include "decoratortable.h"
#include "defaultvalueprovider.h"
#include "decoratorsubscriberstatetable.h"
#endif
#include "notificationconsumer.h"
#include "notificationproducer.h"
#include "warm_restart.h"
#include "logger.h"
#include "events.h"
#include "configdb.h"
#include "status_code_util.h"
#include "redis_table_waiter.h"
#include "restart_waiter.h"
#include "zmqserver.h"
#include "zmqclient.h"
#include "zmqconsumerstatetable.h"
#include "zmqproducerstatetable.h"
#include <memory>
#include <functional>
#include "interface.h"


#include <string>


#include <vector>
#include <stdexcept>


#include <typeinfo>
#include <stdexcept>


#include <utility>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <deque>
#include <stdexcept>


#include <stdint.h>		// Use the C99 official header

SWIGINTERN std::vector< std::pair< std::string,std::string > >::const_reference std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__get(std::vector< std::pair< std::string,std::string > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__set(std::vector< std::pair< std::string,std::string > > *self,int i,std::vector< std::pair< std::string,std::string > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::vector< std::pair< std::string,std::string > > >::const_reference std_vector_Sl_std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__Sg__get(std::vector< std::vector< std::pair< std::string,std::string > > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__Sg__set(std::vector< std::vector< std::pair< std::string,std::string > > > *self,int i,std::vector< std::vector< std::pair< std::string,std::string > > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > >::const_reference std_vector_Sl_std_pair_Sl_std_string_Sc_std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__Sg__Sg__get(std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_pair_Sl_std_string_Sc_std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__Sg__Sg__set(std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > *self,int i,std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::string const &std_map_Sl_std_string_Sc_std_string_Sg__get(std::map< std::string,std::string > *self,std::string const &key){
                std::map< std::string, std::string, std::less< std::string > >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__set(std::map< std::string,std::string > *self,std::string const &key,std::string const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__del(std::map< std::string,std::string > *self,std::string const &key){
                std::map< std::string, std::string, std::less< std::string > >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_std_string_Sc_std_string_Sg__has_key(std::map< std::string,std::string > *self,std::string const &key){
                std::map< std::string, std::string, std::less< std::string > >::iterator i = self->find(key);
                return i != self->end();
            }
SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::vector< std::string >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::map< std::string,std::string,std::less< std::string > > const &std_map_Sl_std_string_Sc_std_map_Sl_std_string_Sc_std_string_Sg__Sg__get(std::map< std::string,std::map< std::string,std::string > > *self,std::string const &key){
                std::map< std::string, std::map< std::string,std::string,std::less< std::string > >, std::less< std::string > >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_std_string_Sc_std_map_Sl_std_string_Sc_std_string_Sg__Sg__set(std::map< std::string,std::map< std::string,std::string > > *self,std::string const &key,std::map< std::string,std::string,std::less< std::string > > const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_std_string_Sc_std_map_Sl_std_string_Sc_std_string_Sg__Sg__del(std::map< std::string,std::map< std::string,std::string > > *self,std::string const &key){
                std::map< std::string, std::map< std::string,std::string,std::less< std::string > >, std::less< std::string > >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_std_string_Sc_std_map_Sl_std_string_Sc_std_string_Sg__Sg__has_key(std::map< std::string,std::map< std::string,std::string > > *self,std::string const &key){
                std::map< std::string, std::map< std::string,std::string,std::less< std::string > >, std::less< std::string > >::iterator i = self->find(key);
                return i != self->end();
            }
SWIGINTERN std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > > const &std_map_Sl_std_string_Sc_std_map_Sl_std_string_Sc_std_map_Sl_std_string_Sc_std_string_Sg__Sg__Sg__get(std::map< std::string,std::map< std::string,std::map< std::string,std::string > > > *self,std::string const &key){
                std::map< std::string, std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > >, std::less< std::string > >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_std_string_Sc_std_map_Sl_std_string_Sc_std_map_Sl_std_string_Sc_std_string_Sg__Sg__Sg__set(std::map< std::string,std::map< std::string,std::map< std::string,std::string > > > *self,std::string const &key,std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > > const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_std_string_Sc_std_map_Sl_std_string_Sc_std_map_Sl_std_string_Sc_std_string_Sg__Sg__Sg__del(std::map< std::string,std::map< std::string,std::map< std::string,std::string > > > *self,std::string const &key){
                std::map< std::string, std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > >, std::less< std::string > >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_std_string_Sc_std_map_Sl_std_string_Sc_std_map_Sl_std_string_Sc_std_string_Sg__Sg__Sg__has_key(std::map< std::string,std::map< std::string,std::map< std::string,std::string > > > *self,std::string const &key){
                std::map< std::string, std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > >, std::less< std::string > >::iterator i = self->find(key);
                return i != self->end();
            }
SWIGINTERN swss::RedisInstInfo const &std_map_Sl_std_string_Sc_swss_RedisInstInfo_Sg__get(std::map< std::string,swss::RedisInstInfo > *self,std::string const &key){
                std::map< std::string, swss::RedisInstInfo, std::less< std::string > >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_std_string_Sc_swss_RedisInstInfo_Sg__set(std::map< std::string,swss::RedisInstInfo > *self,std::string const &key,swss::RedisInstInfo const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_std_string_Sc_swss_RedisInstInfo_Sg__del(std::map< std::string,swss::RedisInstInfo > *self,std::string const &key){
                std::map< std::string, swss::RedisInstInfo, std::less< std::string > >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_std_string_Sc_swss_RedisInstInfo_Sg__has_key(std::map< std::string,swss::RedisInstInfo > *self,std::string const &key){
                std::map< std::string, swss::RedisInstInfo, std::less< std::string > >::iterator i = self->find(key);
                return i != self->end();
            }
SWIGINTERN std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > >::const_reference std_deque_Sl_std_tuple_Sl_std_string_Sc_std_string_Sc_std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__Sg__Sg__getitem(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *self,int i){
                int size = int(self->size());
                if (i<0) i += size;
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("deque index out of range");
           }
SWIGINTERN void std_deque_Sl_std_tuple_Sl_std_string_Sc_std_string_Sc_std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__Sg__Sg__setitem(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *self,int i,std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > const &x){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("deque index out of range");
           }
SWIGINTERN void std_deque_Sl_std_tuple_Sl_std_string_Sc_std_string_Sc_std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__Sg__Sg__delitem(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *self,int i){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size) {
                    self->erase(self->begin()+i);
                } else {
                    throw std::out_of_range("deque index out of range");
                }
           }
SWIGINTERN std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > std_deque_Sl_std_tuple_Sl_std_string_Sc_std_string_Sc_std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__Sg__Sg__getslice(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *self,int i,int j){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > tmp(j-i);
                std::copy(self->begin()+i,self->begin()+j,tmp.begin());
                return tmp;
            }
SWIGINTERN void std_deque_Sl_std_tuple_Sl_std_string_Sc_std_string_Sc_std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__Sg__Sg__setslice(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *self,int i,int j,std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > const &v){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                if (int(v.size()) == j-i) {
                    std::copy(v.begin(),v.end(),self->begin()+i);
                } else {
                    self->erase(self->begin()+i,self->begin()+j);
                    if (i+1 <= size)
                        self->insert(self->begin()+i+1,v.begin(),v.end());
                    else
                        self->insert(self->end(),v.begin(),v.end());
                }
            }
SWIGINTERN void std_deque_Sl_std_tuple_Sl_std_string_Sc_std_string_Sc_std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__Sg__Sg__delslice(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *self,int i,int j){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                self->erase(self->begin()+i,self->begin()+j);
            }
SWIGINTERN std::vector< swss::SonicDBKey >::const_reference std_vector_Sl_swss_SonicDBKey_Sg__get(std::vector< swss::SonicDBKey > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_swss_SonicDBKey_Sg__set(std::vector< swss::SonicDBKey > *self,int i,std::vector< swss::SonicDBKey >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

template <typename T>
T castSelectableObj(swss::Selectable *temp)
{
    return dynamic_cast<T>(temp);
}


std::vector<std::pair<std::string, std::vector<swss::FieldValueTuple>>> zmqWait(swss::ZmqProducerStateTable &p)
{
    std::vector<std::pair<std::string, std::vector<swss::FieldValueTuple>>>  ret;
    std::string db_name;
    std::string table_name;
    std::vector<std::shared_ptr<swss::KeyOpFieldsValuesTuple>> kcos_ptr;
    p.wait(db_name, table_name, kcos_ptr);
    for (const auto kco : kcos_ptr)
    {
        ret.push_back(std::pair<std::string, std::vector<swss::FieldValueTuple>>{kfvKey(*kco), kfvFieldsValues(*kco)});
    }
    return ret;
}


// C++ director class methods.
#include "swsscommon_wrap.h"

SwigDirector_Counter::SwigDirector_Counter(int swig_p)
    : swss::Counter(),
      go_val(swig_p), swig_mem(0)
{ }

extern "C" _gostring_ Swig_DirectorCounter_callback_getLuaScript_swsscommon_728e05b169b08794(int);
std::string const &SwigDirector_Counter::getLuaScript() const {
  std::string *c_result = 0 ;
  _gostring_ result;
  
  result = Swig_DirectorCounter_callback_getLuaScript_swsscommon_728e05b169b08794(go_val);
  
  static std::string c_result_str;
  c_result_str.assign(result.p, result.n);
  free(result.p);
  c_result = &c_result_str;
  
  return (std::string const &)*c_result;
}

extern "C" std::vector< std::string > *Swig_DirectorCounter_callback_getLuaArgv_swsscommon_728e05b169b08794(int);
std::vector< std::string > SwigDirector_Counter::getLuaArgv() const {
  std::vector< std::string > *result;
  
  std::vector< std::string > c_result;
  result = Swig_DirectorCounter_callback_getLuaArgv_swsscommon_728e05b169b08794(go_val);
  c_result = *(std::vector< std::string > *)result; 
  return c_result;
}

extern "C" bool Swig_DirectorCounter_callback_usingLuaTable_swsscommon_728e05b169b08794(int, swss::CounterTable *arg2, _gostring_ arg3);
bool SwigDirector_Counter::usingLuaTable(swss::CounterTable const &arg0, std::string const &name) const {
  bool c_result = SwigValueInit< bool >() ;
  bool result;
  swss::CounterTable *swig_arg2;
  _gostring_ swig_arg3;
  
  swig_arg2 = (swss::CounterTable *)&arg0; 
  swig_arg3 = Swig_AllocateString((&name)->data(), (&name)->length()); 
  result = Swig_DirectorCounter_callback_usingLuaTable_swsscommon_728e05b169b08794(go_val, swig_arg2, swig_arg3);
  c_result = (bool)result; 
  return c_result;
}

extern "C" std::vector< std::string > *Swig_DirectorCounter_callback_getLuaKeys_swsscommon_728e05b169b08794(int, swss::CounterTable *arg2, _gostring_ arg3);
std::vector< std::string > SwigDirector_Counter::getLuaKeys(swss::CounterTable const &arg0, std::string const &name) const {
  std::vector< std::string > *result;
  swss::CounterTable *swig_arg2;
  _gostring_ swig_arg3;
  
  std::vector< std::string > c_result;
  swig_arg2 = (swss::CounterTable *)&arg0; 
  swig_arg3 = Swig_AllocateString((&name)->data(), (&name)->length()); 
  result = Swig_DirectorCounter_callback_getLuaKeys_swsscommon_728e05b169b08794(go_val, swig_arg2, swig_arg3);
  c_result = *(std::vector< std::string > *)result; 
  return c_result;
}

extern "C" std::pair< int,std::string > *Swig_DirectorCounter_callback_getKey_swsscommon_728e05b169b08794(int, swss::CounterTable *arg0, _gostring_ name);
swss::Counter::KeyPair SwigDirector_Counter::getKey(swss::CounterTable const &arg0, std::string const &name) const {
  std::pair< int,std::string > *result;
  swss::CounterTable *swig_arg0;
  _gostring_ swig_name;
  
  swss::Counter::KeyPair c_result;
  swig_arg0 = (swss::CounterTable *)&arg0; 
  swig_name = Swig_AllocateString((&name)->data(), (&name)->length()); 
  result = Swig_DirectorCounter_callback_getKey_swsscommon_728e05b169b08794(go_val, swig_arg0, swig_name);
  c_result = *(swss::Counter::KeyPair *)result; 
  return c_result;
}

extern "C" void Swiggo_DeleteDirector_Counter_swsscommon_728e05b169b08794(intgo);
SwigDirector_Counter::~SwigDirector_Counter()
{
  Swiggo_DeleteDirector_Counter_swsscommon_728e05b169b08794(go_val);
  delete swig_mem;
}

SwigDirector_ProducerStateTable::SwigDirector_ProducerStateTable(int swig_p, swss::DBConnector *db, std::string const &tableName)
    : swss::ProducerStateTable(db, tableName),
      go_val(swig_p), swig_mem(0)
{ }

SwigDirector_ProducerStateTable::SwigDirector_ProducerStateTable(int swig_p, swss::RedisPipeline *pipeline, std::string const &tableName, bool buffered)
    : swss::ProducerStateTable(pipeline, tableName, buffered),
      go_val(swig_p), swig_mem(0)
{ }

SwigDirector_ProducerStateTable::SwigDirector_ProducerStateTable(int swig_p, swss::RedisPipeline *pipeline, std::string const &tableName)
    : swss::ProducerStateTable(pipeline, tableName),
      go_val(swig_p), swig_mem(0)
{ }

extern "C" void Swiggo_DeleteDirector_ProducerStateTable_swsscommon_728e05b169b08794(intgo);
SwigDirector_ProducerStateTable::~SwigDirector_ProducerStateTable()
{
  Swiggo_DeleteDirector_ProducerStateTable_swsscommon_728e05b169b08794(go_val);
  delete swig_mem;
}

extern "C" void Swig_DirectorProducerStateTable_callback_set__SWIG_0_swsscommon_728e05b169b08794(int, _gostring_ arg2, std::vector< std::pair< std::string,std::string > > *arg3, _gostring_ arg4, _gostring_ arg5);
void SwigDirector_ProducerStateTable::set(std::string const &key, std::vector< swss::FieldValueTuple > const &values, std::string const &op, std::string const &prefix) {
  _gostring_ swig_arg2;
  std::vector< std::pair< std::string,std::string > > *swig_arg3;
  _gostring_ swig_arg4;
  _gostring_ swig_arg5;
  
  swig_arg2 = Swig_AllocateString((&key)->data(), (&key)->length()); 
  swig_arg3 = (std::vector< swss::FieldValueTuple > *)&values; 
  swig_arg4 = Swig_AllocateString((&op)->data(), (&op)->length()); 
  swig_arg5 = Swig_AllocateString((&prefix)->data(), (&prefix)->length()); 
  Swig_DirectorProducerStateTable_callback_set__SWIG_0_swsscommon_728e05b169b08794(go_val, swig_arg2, swig_arg3, swig_arg4, swig_arg5);
}

extern "C" void Swig_DirectorProducerStateTable_callback_set__SWIG_1_swsscommon_728e05b169b08794(int, _gostring_ arg2, std::vector< std::pair< std::string,std::string > > *arg3, _gostring_ arg4);
void SwigDirector_ProducerStateTable::set(std::string const &key, std::vector< swss::FieldValueTuple > const &values, std::string const &op) {
  _gostring_ swig_arg2;
  std::vector< std::pair< std::string,std::string > > *swig_arg3;
  _gostring_ swig_arg4;
  
  swig_arg2 = Swig_AllocateString((&key)->data(), (&key)->length()); 
  swig_arg3 = (std::vector< swss::FieldValueTuple > *)&values; 
  swig_arg4 = Swig_AllocateString((&op)->data(), (&op)->length()); 
  Swig_DirectorProducerStateTable_callback_set__SWIG_1_swsscommon_728e05b169b08794(go_val, swig_arg2, swig_arg3, swig_arg4);
}

extern "C" void Swig_DirectorProducerStateTable_callback_set__SWIG_2_swsscommon_728e05b169b08794(int, _gostring_ arg2, std::vector< std::pair< std::string,std::string > > *arg3);
void SwigDirector_ProducerStateTable::set(std::string const &key, std::vector< swss::FieldValueTuple > const &values) {
  _gostring_ swig_arg2;
  std::vector< std::pair< std::string,std::string > > *swig_arg3;
  
  swig_arg2 = Swig_AllocateString((&key)->data(), (&key)->length()); 
  swig_arg3 = (std::vector< swss::FieldValueTuple > *)&values; 
  Swig_DirectorProducerStateTable_callback_set__SWIG_2_swsscommon_728e05b169b08794(go_val, swig_arg2, swig_arg3);
}

extern "C" void Swig_DirectorProducerStateTable_callback_delete__SWIG_0_swsscommon_728e05b169b08794(int, _gostring_ arg2, _gostring_ arg3, _gostring_ arg4);
void SwigDirector_ProducerStateTable::del(std::string const &key, std::string const &op, std::string const &prefix) {
  _gostring_ swig_arg2;
  _gostring_ swig_arg3;
  _gostring_ swig_arg4;
  
  swig_arg2 = Swig_AllocateString((&key)->data(), (&key)->length()); 
  swig_arg3 = Swig_AllocateString((&op)->data(), (&op)->length()); 
  swig_arg4 = Swig_AllocateString((&prefix)->data(), (&prefix)->length()); 
  Swig_DirectorProducerStateTable_callback_delete__SWIG_0_swsscommon_728e05b169b08794(go_val, swig_arg2, swig_arg3, swig_arg4);
}

extern "C" void Swig_DirectorProducerStateTable_callback_delete__SWIG_1_swsscommon_728e05b169b08794(int, _gostring_ arg2, _gostring_ arg3);
void SwigDirector_ProducerStateTable::del(std::string const &key, std::string const &op) {
  _gostring_ swig_arg2;
  _gostring_ swig_arg3;
  
  swig_arg2 = Swig_AllocateString((&key)->data(), (&key)->length()); 
  swig_arg3 = Swig_AllocateString((&op)->data(), (&op)->length()); 
  Swig_DirectorProducerStateTable_callback_delete__SWIG_1_swsscommon_728e05b169b08794(go_val, swig_arg2, swig_arg3);
}

extern "C" void Swig_DirectorProducerStateTable_callback_delete__SWIG_2_swsscommon_728e05b169b08794(int, _gostring_ arg2);
void SwigDirector_ProducerStateTable::del(std::string const &key) {
  _gostring_ swig_arg2;
  
  swig_arg2 = Swig_AllocateString((&key)->data(), (&key)->length()); 
  Swig_DirectorProducerStateTable_callback_delete__SWIG_2_swsscommon_728e05b169b08794(go_val, swig_arg2);
}

extern "C" void Swig_DirectorProducerStateTable_callback_set__SWIG_3_swsscommon_728e05b169b08794(int, std::vector< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *arg2);
void SwigDirector_ProducerStateTable::set(std::vector< swss::KeyOpFieldsValuesTuple > const &values) {
  std::vector< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *swig_arg2;
  
  swig_arg2 = (std::vector< swss::KeyOpFieldsValuesTuple > *)&values; 
  Swig_DirectorProducerStateTable_callback_set__SWIG_3_swsscommon_728e05b169b08794(go_val, swig_arg2);
}

extern "C" void Swig_DirectorProducerStateTable_callback_delete__SWIG_3_swsscommon_728e05b169b08794(int, std::vector< std::string > *arg2);
void SwigDirector_ProducerStateTable::del(std::vector< std::string > const &keys) {
  std::vector< std::string > *swig_arg2;
  
  swig_arg2 = (std::vector< std::string > *)&keys; 
  Swig_DirectorProducerStateTable_callback_delete__SWIG_3_swsscommon_728e05b169b08794(go_val, swig_arg2);
}

SwigDirector_ZmqProducerStateTable::SwigDirector_ZmqProducerStateTable(int swig_p, swss::DBConnector *db, std::string const &tableName, swss::ZmqClient &zmqClient, bool dbPersistence)
    : swss::ZmqProducerStateTable(db, tableName, zmqClient, dbPersistence),
      go_val(swig_p), swig_mem(0)
{ }

SwigDirector_ZmqProducerStateTable::SwigDirector_ZmqProducerStateTable(int swig_p, swss::DBConnector *db, std::string const &tableName, swss::ZmqClient &zmqClient)
    : swss::ZmqProducerStateTable(db, tableName, zmqClient),
      go_val(swig_p), swig_mem(0)
{ }

SwigDirector_ZmqProducerStateTable::SwigDirector_ZmqProducerStateTable(int swig_p, swss::RedisPipeline *pipeline, std::string const &tableName, swss::ZmqClient &zmqClient, bool buffered, bool dbPersistence)
    : swss::ZmqProducerStateTable(pipeline, tableName, zmqClient, buffered, dbPersistence),
      go_val(swig_p), swig_mem(0)
{ }

SwigDirector_ZmqProducerStateTable::SwigDirector_ZmqProducerStateTable(int swig_p, swss::RedisPipeline *pipeline, std::string const &tableName, swss::ZmqClient &zmqClient, bool buffered)
    : swss::ZmqProducerStateTable(pipeline, tableName, zmqClient, buffered),
      go_val(swig_p), swig_mem(0)
{ }

SwigDirector_ZmqProducerStateTable::SwigDirector_ZmqProducerStateTable(int swig_p, swss::RedisPipeline *pipeline, std::string const &tableName, swss::ZmqClient &zmqClient)
    : swss::ZmqProducerStateTable(pipeline, tableName, zmqClient),
      go_val(swig_p), swig_mem(0)
{ }

extern "C" void Swiggo_DeleteDirector_ZmqProducerStateTable_swsscommon_728e05b169b08794(intgo);
SwigDirector_ZmqProducerStateTable::~SwigDirector_ZmqProducerStateTable()
{
  Swiggo_DeleteDirector_ZmqProducerStateTable_swsscommon_728e05b169b08794(go_val);
  delete swig_mem;
}

extern "C" void Swig_DirectorZmqProducerStateTable_callback_set__SWIG_0_swsscommon_728e05b169b08794(int, _gostring_ arg2, std::vector< std::pair< std::string,std::string > > *arg3, _gostring_ arg4, _gostring_ arg5);
void SwigDirector_ZmqProducerStateTable::set(std::string const &key, std::vector< swss::FieldValueTuple > const &values, std::string const &op, std::string const &prefix) {
  _gostring_ swig_arg2;
  std::vector< std::pair< std::string,std::string > > *swig_arg3;
  _gostring_ swig_arg4;
  _gostring_ swig_arg5;
  
  swig_arg2 = Swig_AllocateString((&key)->data(), (&key)->length()); 
  swig_arg3 = (std::vector< swss::FieldValueTuple > *)&values; 
  swig_arg4 = Swig_AllocateString((&op)->data(), (&op)->length()); 
  swig_arg5 = Swig_AllocateString((&prefix)->data(), (&prefix)->length()); 
  Swig_DirectorZmqProducerStateTable_callback_set__SWIG_0_swsscommon_728e05b169b08794(go_val, swig_arg2, swig_arg3, swig_arg4, swig_arg5);
}

extern "C" void Swig_DirectorZmqProducerStateTable_callback_set__SWIG_1_swsscommon_728e05b169b08794(int, _gostring_ arg2, std::vector< std::pair< std::string,std::string > > *arg3, _gostring_ arg4);
void SwigDirector_ZmqProducerStateTable::set(std::string const &key, std::vector< swss::FieldValueTuple > const &values, std::string const &op) {
  _gostring_ swig_arg2;
  std::vector< std::pair< std::string,std::string > > *swig_arg3;
  _gostring_ swig_arg4;
  
  swig_arg2 = Swig_AllocateString((&key)->data(), (&key)->length()); 
  swig_arg3 = (std::vector< swss::FieldValueTuple > *)&values; 
  swig_arg4 = Swig_AllocateString((&op)->data(), (&op)->length()); 
  Swig_DirectorZmqProducerStateTable_callback_set__SWIG_1_swsscommon_728e05b169b08794(go_val, swig_arg2, swig_arg3, swig_arg4);
}

extern "C" void Swig_DirectorZmqProducerStateTable_callback_set__SWIG_2_swsscommon_728e05b169b08794(int, _gostring_ arg2, std::vector< std::pair< std::string,std::string > > *arg3);
void SwigDirector_ZmqProducerStateTable::set(std::string const &key, std::vector< swss::FieldValueTuple > const &values) {
  _gostring_ swig_arg2;
  std::vector< std::pair< std::string,std::string > > *swig_arg3;
  
  swig_arg2 = Swig_AllocateString((&key)->data(), (&key)->length()); 
  swig_arg3 = (std::vector< swss::FieldValueTuple > *)&values; 
  Swig_DirectorZmqProducerStateTable_callback_set__SWIG_2_swsscommon_728e05b169b08794(go_val, swig_arg2, swig_arg3);
}

extern "C" void Swig_DirectorZmqProducerStateTable_callback_delete__SWIG_0_swsscommon_728e05b169b08794(int, _gostring_ arg2, _gostring_ arg3, _gostring_ arg4);
void SwigDirector_ZmqProducerStateTable::del(std::string const &key, std::string const &op, std::string const &prefix) {
  _gostring_ swig_arg2;
  _gostring_ swig_arg3;
  _gostring_ swig_arg4;
  
  swig_arg2 = Swig_AllocateString((&key)->data(), (&key)->length()); 
  swig_arg3 = Swig_AllocateString((&op)->data(), (&op)->length()); 
  swig_arg4 = Swig_AllocateString((&prefix)->data(), (&prefix)->length()); 
  Swig_DirectorZmqProducerStateTable_callback_delete__SWIG_0_swsscommon_728e05b169b08794(go_val, swig_arg2, swig_arg3, swig_arg4);
}

extern "C" void Swig_DirectorZmqProducerStateTable_callback_delete__SWIG_1_swsscommon_728e05b169b08794(int, _gostring_ arg2, _gostring_ arg3);
void SwigDirector_ZmqProducerStateTable::del(std::string const &key, std::string const &op) {
  _gostring_ swig_arg2;
  _gostring_ swig_arg3;
  
  swig_arg2 = Swig_AllocateString((&key)->data(), (&key)->length()); 
  swig_arg3 = Swig_AllocateString((&op)->data(), (&op)->length()); 
  Swig_DirectorZmqProducerStateTable_callback_delete__SWIG_1_swsscommon_728e05b169b08794(go_val, swig_arg2, swig_arg3);
}

extern "C" void Swig_DirectorZmqProducerStateTable_callback_delete__SWIG_2_swsscommon_728e05b169b08794(int, _gostring_ arg2);
void SwigDirector_ZmqProducerStateTable::del(std::string const &key) {
  _gostring_ swig_arg2;
  
  swig_arg2 = Swig_AllocateString((&key)->data(), (&key)->length()); 
  Swig_DirectorZmqProducerStateTable_callback_delete__SWIG_2_swsscommon_728e05b169b08794(go_val, swig_arg2);
}

extern "C" void Swig_DirectorZmqProducerStateTable_callback_set__SWIG_3_swsscommon_728e05b169b08794(int, std::vector< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *arg2);
void SwigDirector_ZmqProducerStateTable::set(std::vector< swss::KeyOpFieldsValuesTuple > const &values) {
  std::vector< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *swig_arg2;
  
  swig_arg2 = (std::vector< swss::KeyOpFieldsValuesTuple > *)&values; 
  Swig_DirectorZmqProducerStateTable_callback_set__SWIG_3_swsscommon_728e05b169b08794(go_val, swig_arg2);
}

extern "C" void Swig_DirectorZmqProducerStateTable_callback_delete__SWIG_3_swsscommon_728e05b169b08794(int, std::vector< std::string > *arg2);
void SwigDirector_ZmqProducerStateTable::del(std::vector< std::string > const &keys) {
  std::vector< std::string > *swig_arg2;
  
  swig_arg2 = (std::vector< std::string > *)&keys; 
  Swig_DirectorZmqProducerStateTable_callback_delete__SWIG_3_swsscommon_728e05b169b08794(go_val, swig_arg2);
}

extern "C" void Swig_DirectorZmqProducerStateTable_callback_send_swsscommon_728e05b169b08794(int, std::vector< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *arg2);
void SwigDirector_ZmqProducerStateTable::send(std::vector< swss::KeyOpFieldsValuesTuple > const &kcos) {
  std::vector< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *swig_arg2;
  
  swig_arg2 = (std::vector< swss::KeyOpFieldsValuesTuple > *)&kcos; 
  Swig_DirectorZmqProducerStateTable_callback_send_swsscommon_728e05b169b08794(go_val, swig_arg2);
}

#ifdef __cplusplus
extern "C" {
#endif

void _wrap_Swig_free_swsscommon_728e05b169b08794(void *_swig_go_0) {
  void *arg1 = (void *) 0 ;
  
  arg1 = *(void **)&_swig_go_0; 
  
  Swig_free(arg1);
  
}


void *_wrap_Swig_malloc_swsscommon_728e05b169b08794(intgo _swig_go_0) {
  int arg1 ;
  void *result = 0 ;
  void *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = (void *)Swig_malloc(arg1);
  *(void **)&_swig_go_result = (void *)result; 
  return _swig_go_result;
}


std::pair< std::string,std::string > *_wrap_new_FieldValuePair__SWIG_0_swsscommon_728e05b169b08794() {
  std::pair< std::string,std::string > *result = 0 ;
  std::pair< std::string,std::string > *_swig_go_result;
  
  
  result = (std::pair< std::string,std::string > *)new std::pair< std::string,std::string >();
  *(std::pair< std::string,std::string > **)&_swig_go_result = (std::pair< std::string,std::string > *)result; 
  return _swig_go_result;
}


std::pair< std::string,std::string > *_wrap_new_FieldValuePair__SWIG_1_swsscommon_728e05b169b08794(_gostring_ _swig_go_0, _gostring_ _swig_go_1) {
  std::string arg1 ;
  std::string arg2 ;
  std::pair< std::string,std::string > *result = 0 ;
  std::pair< std::string,std::string > *_swig_go_result;
  
  (&arg1)->assign(_swig_go_0.p, _swig_go_0.n); 
  (&arg2)->assign(_swig_go_1.p, _swig_go_1.n); 
  
  result = (std::pair< std::string,std::string > *)new std::pair< std::string,std::string >(arg1,arg2);
  *(std::pair< std::string,std::string > **)&_swig_go_result = (std::pair< std::string,std::string > *)result; 
  return _swig_go_result;
}


std::pair< std::string,std::string > *_wrap_new_FieldValuePair__SWIG_2_swsscommon_728e05b169b08794(std::pair< std::string,std::string > *_swig_go_0) {
  std::pair< std::string,std::string > *arg1 = 0 ;
  std::pair< std::string,std::string > *result = 0 ;
  std::pair< std::string,std::string > *_swig_go_result;
  
  arg1 = *(std::pair< std::string,std::string > **)&_swig_go_0; 
  
  result = (std::pair< std::string,std::string > *)new std::pair< std::string,std::string >((std::pair< std::string,std::string > const &)*arg1);
  *(std::pair< std::string,std::string > **)&_swig_go_result = (std::pair< std::string,std::string > *)result; 
  return _swig_go_result;
}


void _wrap_FieldValuePair_first_set_swsscommon_728e05b169b08794(std::pair< std::string,std::string > *_swig_go_0, _gostring_ _swig_go_1) {
  std::pair< std::string,std::string > *arg1 = (std::pair< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(std::pair< std::string,std::string > **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->first = *arg2;
  
}


_gostring_ _wrap_FieldValuePair_first_get_swsscommon_728e05b169b08794(std::pair< std::string,std::string > *_swig_go_0) {
  std::pair< std::string,std::string > *arg1 = (std::pair< std::string,std::string > *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(std::pair< std::string,std::string > **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->first);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_FieldValuePair_second_set_swsscommon_728e05b169b08794(std::pair< std::string,std::string > *_swig_go_0, _gostring_ _swig_go_1) {
  std::pair< std::string,std::string > *arg1 = (std::pair< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(std::pair< std::string,std::string > **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->second = *arg2;
  
}


_gostring_ _wrap_FieldValuePair_second_get_swsscommon_728e05b169b08794(std::pair< std::string,std::string > *_swig_go_0) {
  std::pair< std::string,std::string > *arg1 = (std::pair< std::string,std::string > *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(std::pair< std::string,std::string > **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->second);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_delete_FieldValuePair_swsscommon_728e05b169b08794(std::pair< std::string,std::string > *_swig_go_0) {
  std::pair< std::string,std::string > *arg1 = (std::pair< std::string,std::string > *) 0 ;
  
  arg1 = *(std::pair< std::string,std::string > **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


std::vector< std::pair< std::string,std::string > > *_wrap_new_FieldValuePairs__SWIG_0_swsscommon_728e05b169b08794() {
  std::vector< std::pair< std::string,std::string > > *result = 0 ;
  std::vector< std::pair< std::string,std::string > > *_swig_go_result;
  
  
  result = (std::vector< std::pair< std::string,std::string > > *)new std::vector< std::pair< std::string,std::string > >();
  *(std::vector< std::pair< std::string,std::string > > **)&_swig_go_result = (std::vector< std::pair< std::string,std::string > > *)result; 
  return _swig_go_result;
}


std::vector< std::pair< std::string,std::string > > *_wrap_new_FieldValuePairs__SWIG_1_swsscommon_728e05b169b08794(long long _swig_go_0) {
  std::vector< std::pair< std::string,std::string > >::size_type arg1 ;
  std::vector< std::pair< std::string,std::string > > *result = 0 ;
  std::vector< std::pair< std::string,std::string > > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< std::pair< std::string,std::string > > *)new std::vector< std::pair< std::string,std::string > >(arg1);
  *(std::vector< std::pair< std::string,std::string > > **)&_swig_go_result = (std::vector< std::pair< std::string,std::string > > *)result; 
  return _swig_go_result;
}


std::vector< std::pair< std::string,std::string > > *_wrap_new_FieldValuePairs__SWIG_2_swsscommon_728e05b169b08794(std::vector< std::pair< std::string,std::string > > *_swig_go_0) {
  std::vector< std::pair< std::string,std::string > > *arg1 = 0 ;
  std::vector< std::pair< std::string,std::string > > *result = 0 ;
  std::vector< std::pair< std::string,std::string > > *_swig_go_result;
  
  arg1 = *(std::vector< std::pair< std::string,std::string > > **)&_swig_go_0; 
  
  result = (std::vector< std::pair< std::string,std::string > > *)new std::vector< std::pair< std::string,std::string > >((std::vector< std::pair< std::string,std::string > > const &)*arg1);
  *(std::vector< std::pair< std::string,std::string > > **)&_swig_go_result = (std::vector< std::pair< std::string,std::string > > *)result; 
  return _swig_go_result;
}


long long _wrap_FieldValuePairs_size_swsscommon_728e05b169b08794(std::vector< std::pair< std::string,std::string > > *_swig_go_0) {
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  std::vector< std::pair< std::string,std::string > >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< std::pair< std::string,std::string > > **)&_swig_go_0; 
  
  result = ((std::vector< std::pair< std::string,std::string > > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_FieldValuePairs_capacity_swsscommon_728e05b169b08794(std::vector< std::pair< std::string,std::string > > *_swig_go_0) {
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  std::vector< std::pair< std::string,std::string > >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< std::pair< std::string,std::string > > **)&_swig_go_0; 
  
  result = ((std::vector< std::pair< std::string,std::string > > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_FieldValuePairs_reserve_swsscommon_728e05b169b08794(std::vector< std::pair< std::string,std::string > > *_swig_go_0, long long _swig_go_1) {
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  std::vector< std::pair< std::string,std::string > >::size_type arg2 ;
  
  arg1 = *(std::vector< std::pair< std::string,std::string > > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_FieldValuePairs_isEmpty_swsscommon_728e05b169b08794(std::vector< std::pair< std::string,std::string > > *_swig_go_0) {
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< std::pair< std::string,std::string > > **)&_swig_go_0; 
  
  result = (bool)((std::vector< std::pair< std::string,std::string > > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_FieldValuePairs_clear_swsscommon_728e05b169b08794(std::vector< std::pair< std::string,std::string > > *_swig_go_0) {
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  
  arg1 = *(std::vector< std::pair< std::string,std::string > > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_FieldValuePairs_add_swsscommon_728e05b169b08794(std::vector< std::pair< std::string,std::string > > *_swig_go_0, std::pair< std::string,std::string > *_swig_go_1) {
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  std::vector< std::pair< std::string,std::string > >::value_type *arg2 = 0 ;
  
  arg1 = *(std::vector< std::pair< std::string,std::string > > **)&_swig_go_0; 
  arg2 = *(std::vector< std::pair< std::string,std::string > >::value_type **)&_swig_go_1; 
  
  (arg1)->push_back((std::vector< std::pair< std::string,std::string > >::value_type const &)*arg2);
  
}


std::pair< std::string,std::string > *_wrap_FieldValuePairs_get_swsscommon_728e05b169b08794(std::vector< std::pair< std::string,std::string > > *_swig_go_0, intgo _swig_go_1) {
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  int arg2 ;
  std::vector< std::pair< std::string,std::string > >::value_type *result = 0 ;
  std::pair< std::string,std::string > *_swig_go_result;
  
  arg1 = *(std::vector< std::pair< std::string,std::string > > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< std::pair< std::string,std::string > >::value_type *) &std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    _swig_gopanic((&_e)->what());
  }
  *(std::vector< std::pair< std::string,std::string > >::value_type **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_FieldValuePairs_set_swsscommon_728e05b169b08794(std::vector< std::pair< std::string,std::string > > *_swig_go_0, intgo _swig_go_1, std::pair< std::string,std::string > *_swig_go_2) {
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  int arg2 ;
  std::vector< std::pair< std::string,std::string > >::value_type *arg3 = 0 ;
  
  arg1 = *(std::vector< std::pair< std::string,std::string > > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = *(std::vector< std::pair< std::string,std::string > >::value_type **)&_swig_go_2; 
  
  try {
    std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__set(arg1,arg2,(std::pair< std::string,std::string > const &)*arg3);
  } catch(std::out_of_range &_e) {
    _swig_gopanic((&_e)->what());
  }
  
}


void _wrap_delete_FieldValuePairs_swsscommon_728e05b169b08794(std::vector< std::pair< std::string,std::string > > *_swig_go_0) {
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  
  arg1 = *(std::vector< std::pair< std::string,std::string > > **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


std::vector< std::vector< std::pair< std::string,std::string > > > *_wrap_new_FieldValuePairsList__SWIG_0_swsscommon_728e05b169b08794() {
  std::vector< std::vector< std::pair< std::string,std::string > > > *result = 0 ;
  std::vector< std::vector< std::pair< std::string,std::string > > > *_swig_go_result;
  
  
  result = (std::vector< std::vector< std::pair< std::string,std::string > > > *)new std::vector< std::vector< std::pair< std::string,std::string > > >();
  *(std::vector< std::vector< std::pair< std::string,std::string > > > **)&_swig_go_result = (std::vector< std::vector< std::pair< std::string,std::string > > > *)result; 
  return _swig_go_result;
}


std::vector< std::vector< std::pair< std::string,std::string > > > *_wrap_new_FieldValuePairsList__SWIG_1_swsscommon_728e05b169b08794(long long _swig_go_0) {
  std::vector< std::vector< std::pair< std::string,std::string > > >::size_type arg1 ;
  std::vector< std::vector< std::pair< std::string,std::string > > > *result = 0 ;
  std::vector< std::vector< std::pair< std::string,std::string > > > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< std::vector< std::pair< std::string,std::string > > > *)new std::vector< std::vector< std::pair< std::string,std::string > > >(arg1);
  *(std::vector< std::vector< std::pair< std::string,std::string > > > **)&_swig_go_result = (std::vector< std::vector< std::pair< std::string,std::string > > > *)result; 
  return _swig_go_result;
}


std::vector< std::vector< std::pair< std::string,std::string > > > *_wrap_new_FieldValuePairsList__SWIG_2_swsscommon_728e05b169b08794(std::vector< std::vector< std::pair< std::string,std::string > > > *_swig_go_0) {
  std::vector< std::vector< std::pair< std::string,std::string > > > *arg1 = 0 ;
  std::vector< std::vector< std::pair< std::string,std::string > > > *result = 0 ;
  std::vector< std::vector< std::pair< std::string,std::string > > > *_swig_go_result;
  
  arg1 = *(std::vector< std::vector< std::pair< std::string,std::string > > > **)&_swig_go_0; 
  
  result = (std::vector< std::vector< std::pair< std::string,std::string > > > *)new std::vector< std::vector< std::pair< std::string,std::string > > >((std::vector< std::vector< std::pair< std::string,std::string > > > const &)*arg1);
  *(std::vector< std::vector< std::pair< std::string,std::string > > > **)&_swig_go_result = (std::vector< std::vector< std::pair< std::string,std::string > > > *)result; 
  return _swig_go_result;
}


long long _wrap_FieldValuePairsList_size_swsscommon_728e05b169b08794(std::vector< std::vector< std::pair< std::string,std::string > > > *_swig_go_0) {
  std::vector< std::vector< std::pair< std::string,std::string > > > *arg1 = (std::vector< std::vector< std::pair< std::string,std::string > > > *) 0 ;
  std::vector< std::vector< std::pair< std::string,std::string > > >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< std::vector< std::pair< std::string,std::string > > > **)&_swig_go_0; 
  
  result = ((std::vector< std::vector< std::pair< std::string,std::string > > > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_FieldValuePairsList_capacity_swsscommon_728e05b169b08794(std::vector< std::vector< std::pair< std::string,std::string > > > *_swig_go_0) {
  std::vector< std::vector< std::pair< std::string,std::string > > > *arg1 = (std::vector< std::vector< std::pair< std::string,std::string > > > *) 0 ;
  std::vector< std::vector< std::pair< std::string,std::string > > >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< std::vector< std::pair< std::string,std::string > > > **)&_swig_go_0; 
  
  result = ((std::vector< std::vector< std::pair< std::string,std::string > > > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_FieldValuePairsList_reserve_swsscommon_728e05b169b08794(std::vector< std::vector< std::pair< std::string,std::string > > > *_swig_go_0, long long _swig_go_1) {
  std::vector< std::vector< std::pair< std::string,std::string > > > *arg1 = (std::vector< std::vector< std::pair< std::string,std::string > > > *) 0 ;
  std::vector< std::vector< std::pair< std::string,std::string > > >::size_type arg2 ;
  
  arg1 = *(std::vector< std::vector< std::pair< std::string,std::string > > > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_FieldValuePairsList_isEmpty_swsscommon_728e05b169b08794(std::vector< std::vector< std::pair< std::string,std::string > > > *_swig_go_0) {
  std::vector< std::vector< std::pair< std::string,std::string > > > *arg1 = (std::vector< std::vector< std::pair< std::string,std::string > > > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< std::vector< std::pair< std::string,std::string > > > **)&_swig_go_0; 
  
  result = (bool)((std::vector< std::vector< std::pair< std::string,std::string > > > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_FieldValuePairsList_clear_swsscommon_728e05b169b08794(std::vector< std::vector< std::pair< std::string,std::string > > > *_swig_go_0) {
  std::vector< std::vector< std::pair< std::string,std::string > > > *arg1 = (std::vector< std::vector< std::pair< std::string,std::string > > > *) 0 ;
  
  arg1 = *(std::vector< std::vector< std::pair< std::string,std::string > > > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_FieldValuePairsList_add_swsscommon_728e05b169b08794(std::vector< std::vector< std::pair< std::string,std::string > > > *_swig_go_0, std::vector< std::pair< std::string,std::string > > *_swig_go_1) {
  std::vector< std::vector< std::pair< std::string,std::string > > > *arg1 = (std::vector< std::vector< std::pair< std::string,std::string > > > *) 0 ;
  std::vector< std::vector< std::pair< std::string,std::string > > >::value_type *arg2 = 0 ;
  
  arg1 = *(std::vector< std::vector< std::pair< std::string,std::string > > > **)&_swig_go_0; 
  arg2 = *(std::vector< std::vector< std::pair< std::string,std::string > > >::value_type **)&_swig_go_1; 
  
  (arg1)->push_back((std::vector< std::vector< std::pair< std::string,std::string > > >::value_type const &)*arg2);
  
}


std::vector< std::pair< std::string,std::string > > *_wrap_FieldValuePairsList_get_swsscommon_728e05b169b08794(std::vector< std::vector< std::pair< std::string,std::string > > > *_swig_go_0, intgo _swig_go_1) {
  std::vector< std::vector< std::pair< std::string,std::string > > > *arg1 = (std::vector< std::vector< std::pair< std::string,std::string > > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< std::pair< std::string,std::string > > >::value_type *result = 0 ;
  std::vector< std::pair< std::string,std::string > > *_swig_go_result;
  
  arg1 = *(std::vector< std::vector< std::pair< std::string,std::string > > > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< std::vector< std::pair< std::string,std::string > > >::value_type *) &std_vector_Sl_std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    _swig_gopanic((&_e)->what());
  }
  *(std::vector< std::vector< std::pair< std::string,std::string > > >::value_type **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_FieldValuePairsList_set_swsscommon_728e05b169b08794(std::vector< std::vector< std::pair< std::string,std::string > > > *_swig_go_0, intgo _swig_go_1, std::vector< std::pair< std::string,std::string > > *_swig_go_2) {
  std::vector< std::vector< std::pair< std::string,std::string > > > *arg1 = (std::vector< std::vector< std::pair< std::string,std::string > > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< std::pair< std::string,std::string > > >::value_type *arg3 = 0 ;
  
  arg1 = *(std::vector< std::vector< std::pair< std::string,std::string > > > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = *(std::vector< std::vector< std::pair< std::string,std::string > > >::value_type **)&_swig_go_2; 
  
  try {
    std_vector_Sl_std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__Sg__set(arg1,arg2,(std::vector< std::pair< std::string,std::string > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    _swig_gopanic((&_e)->what());
  }
  
}


void _wrap_delete_FieldValuePairsList_swsscommon_728e05b169b08794(std::vector< std::vector< std::pair< std::string,std::string > > > *_swig_go_0) {
  std::vector< std::vector< std::pair< std::string,std::string > > > *arg1 = (std::vector< std::vector< std::pair< std::string,std::string > > > *) 0 ;
  
  arg1 = *(std::vector< std::vector< std::pair< std::string,std::string > > > **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


std::pair< std::string,std::vector< std::pair< std::string,std::string > > > *_wrap_new_KeyFieldValuePairs__SWIG_0_swsscommon_728e05b169b08794() {
  std::pair< std::string,std::vector< std::pair< std::string,std::string > > > *result = 0 ;
  std::pair< std::string,std::vector< std::pair< std::string,std::string > > > *_swig_go_result;
  
  
  result = (std::pair< std::string,std::vector< std::pair< std::string,std::string > > > *)new std::pair< std::string,std::vector< std::pair< std::string,std::string > > >();
  *(std::pair< std::string,std::vector< std::pair< std::string,std::string > > > **)&_swig_go_result = (std::pair< std::string,std::vector< std::pair< std::string,std::string > > > *)result; 
  return _swig_go_result;
}


std::pair< std::string,std::vector< std::pair< std::string,std::string > > > *_wrap_new_KeyFieldValuePairs__SWIG_1_swsscommon_728e05b169b08794(_gostring_ _swig_go_0, std::vector< std::pair< std::string,std::string > > *_swig_go_1) {
  std::string arg1 ;
  std::vector< std::pair< std::string,std::string > > arg2 ;
  std::vector< std::pair< std::string,std::string > > *argp2 ;
  std::pair< std::string,std::vector< std::pair< std::string,std::string > > > *result = 0 ;
  std::pair< std::string,std::vector< std::pair< std::string,std::string > > > *_swig_go_result;
  
  (&arg1)->assign(_swig_go_0.p, _swig_go_0.n); 
  
  argp2 = (std::vector< std::pair< std::string,std::string > > *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null std::vector< std::pair< std::string,std::string > >");
  }
  arg2 = (std::vector< std::pair< std::string,std::string > >)*argp2;
  
  
  result = (std::pair< std::string,std::vector< std::pair< std::string,std::string > > > *)new std::pair< std::string,std::vector< std::pair< std::string,std::string > > >(arg1,arg2);
  *(std::pair< std::string,std::vector< std::pair< std::string,std::string > > > **)&_swig_go_result = (std::pair< std::string,std::vector< std::pair< std::string,std::string > > > *)result; 
  return _swig_go_result;
}


std::pair< std::string,std::vector< std::pair< std::string,std::string > > > *_wrap_new_KeyFieldValuePairs__SWIG_2_swsscommon_728e05b169b08794(std::pair< std::string,std::vector< std::pair< std::string,std::string > > > *_swig_go_0) {
  std::pair< std::string,std::vector< std::pair< std::string,std::string > > > *arg1 = 0 ;
  std::pair< std::string,std::vector< std::pair< std::string,std::string > > > *result = 0 ;
  std::pair< std::string,std::vector< std::pair< std::string,std::string > > > *_swig_go_result;
  
  arg1 = *(std::pair< std::string,std::vector< std::pair< std::string,std::string > > > **)&_swig_go_0; 
  
  result = (std::pair< std::string,std::vector< std::pair< std::string,std::string > > > *)new std::pair< std::string,std::vector< std::pair< std::string,std::string > > >((std::pair< std::string,std::vector< std::pair< std::string,std::string > > > const &)*arg1);
  *(std::pair< std::string,std::vector< std::pair< std::string,std::string > > > **)&_swig_go_result = (std::pair< std::string,std::vector< std::pair< std::string,std::string > > > *)result; 
  return _swig_go_result;
}


void _wrap_KeyFieldValuePairs_first_set_swsscommon_728e05b169b08794(std::pair< std::string,std::vector< std::pair< std::string,std::string > > > *_swig_go_0, _gostring_ _swig_go_1) {
  std::pair< std::string,std::vector< std::pair< std::string,std::string > > > *arg1 = (std::pair< std::string,std::vector< std::pair< std::string,std::string > > > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(std::pair< std::string,std::vector< std::pair< std::string,std::string > > > **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->first = *arg2;
  
}


_gostring_ _wrap_KeyFieldValuePairs_first_get_swsscommon_728e05b169b08794(std::pair< std::string,std::vector< std::pair< std::string,std::string > > > *_swig_go_0) {
  std::pair< std::string,std::vector< std::pair< std::string,std::string > > > *arg1 = (std::pair< std::string,std::vector< std::pair< std::string,std::string > > > *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(std::pair< std::string,std::vector< std::pair< std::string,std::string > > > **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->first);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_KeyFieldValuePairs_second_set_swsscommon_728e05b169b08794(std::pair< std::string,std::vector< std::pair< std::string,std::string > > > *_swig_go_0, std::vector< std::pair< std::string,std::string > > *_swig_go_1) {
  std::pair< std::string,std::vector< std::pair< std::string,std::string > > > *arg1 = (std::pair< std::string,std::vector< std::pair< std::string,std::string > > > *) 0 ;
  std::vector< std::pair< std::string,std::string > > *arg2 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  
  arg1 = *(std::pair< std::string,std::vector< std::pair< std::string,std::string > > > **)&_swig_go_0; 
  arg2 = *(std::vector< std::pair< std::string,std::string > > **)&_swig_go_1; 
  
  if (arg1) (arg1)->second = *arg2;
  
}


std::vector< std::pair< std::string,std::string > > *_wrap_KeyFieldValuePairs_second_get_swsscommon_728e05b169b08794(std::pair< std::string,std::vector< std::pair< std::string,std::string > > > *_swig_go_0) {
  std::pair< std::string,std::vector< std::pair< std::string,std::string > > > *arg1 = (std::pair< std::string,std::vector< std::pair< std::string,std::string > > > *) 0 ;
  std::vector< std::pair< std::string,std::string > > *result = 0 ;
  std::vector< std::pair< std::string,std::string > > *_swig_go_result;
  
  arg1 = *(std::pair< std::string,std::vector< std::pair< std::string,std::string > > > **)&_swig_go_0; 
  
  result = (std::vector< std::pair< std::string,std::string > > *)& ((arg1)->second);
  *(std::vector< std::pair< std::string,std::string > > **)&_swig_go_result = (std::vector< std::pair< std::string,std::string > > *)result; 
  return _swig_go_result;
}


void _wrap_delete_KeyFieldValuePairs_swsscommon_728e05b169b08794(std::pair< std::string,std::vector< std::pair< std::string,std::string > > > *_swig_go_0) {
  std::pair< std::string,std::vector< std::pair< std::string,std::string > > > *arg1 = (std::pair< std::string,std::vector< std::pair< std::string,std::string > > > *) 0 ;
  
  arg1 = *(std::pair< std::string,std::vector< std::pair< std::string,std::string > > > **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > *_wrap_new_KeyFieldValuePairsList__SWIG_0_swsscommon_728e05b169b08794() {
  std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > *result = 0 ;
  std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_result;
  
  
  result = (std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > *)new std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > >();
  *(std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > **)&_swig_go_result = (std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > *)result; 
  return _swig_go_result;
}


std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > *_wrap_new_KeyFieldValuePairsList__SWIG_1_swsscommon_728e05b169b08794(long long _swig_go_0) {
  std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > >::size_type arg1 ;
  std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > *result = 0 ;
  std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > *)new std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > >(arg1);
  *(std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > **)&_swig_go_result = (std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > *)result; 
  return _swig_go_result;
}


std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > *_wrap_new_KeyFieldValuePairsList__SWIG_2_swsscommon_728e05b169b08794(std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_0) {
  std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > *arg1 = 0 ;
  std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > *result = 0 ;
  std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_result;
  
  arg1 = *(std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > **)&_swig_go_0; 
  
  result = (std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > *)new std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > >((std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > const &)*arg1);
  *(std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > **)&_swig_go_result = (std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > *)result; 
  return _swig_go_result;
}


long long _wrap_KeyFieldValuePairsList_size_swsscommon_728e05b169b08794(std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_0) {
  std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > *arg1 = (std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > *) 0 ;
  std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > **)&_swig_go_0; 
  
  result = ((std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_KeyFieldValuePairsList_capacity_swsscommon_728e05b169b08794(std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_0) {
  std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > *arg1 = (std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > *) 0 ;
  std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > **)&_swig_go_0; 
  
  result = ((std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_KeyFieldValuePairsList_reserve_swsscommon_728e05b169b08794(std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_0, long long _swig_go_1) {
  std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > *arg1 = (std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > *) 0 ;
  std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > >::size_type arg2 ;
  
  arg1 = *(std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_KeyFieldValuePairsList_isEmpty_swsscommon_728e05b169b08794(std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_0) {
  std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > *arg1 = (std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > **)&_swig_go_0; 
  
  result = (bool)((std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_KeyFieldValuePairsList_clear_swsscommon_728e05b169b08794(std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_0) {
  std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > *arg1 = (std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > *) 0 ;
  
  arg1 = *(std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_KeyFieldValuePairsList_add_swsscommon_728e05b169b08794(std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_0, std::pair< std::string,std::vector< std::pair< std::string,std::string > > > *_swig_go_1) {
  std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > *arg1 = (std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > *) 0 ;
  std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > >::value_type *arg2 = 0 ;
  
  arg1 = *(std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > **)&_swig_go_0; 
  arg2 = *(std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > >::value_type **)&_swig_go_1; 
  
  (arg1)->push_back((std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > >::value_type const &)*arg2);
  
}


std::pair< std::string,std::vector< std::pair< std::string,std::string > > > *_wrap_KeyFieldValuePairsList_get_swsscommon_728e05b169b08794(std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_0, intgo _swig_go_1) {
  std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > *arg1 = (std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > *) 0 ;
  int arg2 ;
  std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > >::value_type *result = 0 ;
  std::pair< std::string,std::vector< std::pair< std::string,std::string > > > *_swig_go_result;
  
  arg1 = *(std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > >::value_type *) &std_vector_Sl_std_pair_Sl_std_string_Sc_std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__Sg__Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    _swig_gopanic((&_e)->what());
  }
  *(std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > >::value_type **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_KeyFieldValuePairsList_set_swsscommon_728e05b169b08794(std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_0, intgo _swig_go_1, std::pair< std::string,std::vector< std::pair< std::string,std::string > > > *_swig_go_2) {
  std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > *arg1 = (std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > *) 0 ;
  int arg2 ;
  std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > >::value_type *arg3 = 0 ;
  
  arg1 = *(std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = *(std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > >::value_type **)&_swig_go_2; 
  
  try {
    std_vector_Sl_std_pair_Sl_std_string_Sc_std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__Sg__Sg__set(arg1,arg2,(std::pair< std::string,std::vector< std::pair< std::string,std::string > > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    _swig_gopanic((&_e)->what());
  }
  
}


void _wrap_delete_KeyFieldValuePairsList_swsscommon_728e05b169b08794(std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_0) {
  std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > *arg1 = (std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > *) 0 ;
  
  arg1 = *(std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


std::map< std::string,std::string > *_wrap_new_FieldValueMap__SWIG_0_swsscommon_728e05b169b08794() {
  std::map< std::string,std::string > *result = 0 ;
  std::map< std::string,std::string > *_swig_go_result;
  
  
  result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >();
  *(std::map< std::string,std::string > **)&_swig_go_result = (std::map< std::string,std::string > *)result; 
  return _swig_go_result;
}


std::map< std::string,std::string > *_wrap_new_FieldValueMap__SWIG_1_swsscommon_728e05b169b08794(std::map< std::string,std::string > *_swig_go_0) {
  std::map< std::string,std::string > *arg1 = 0 ;
  std::map< std::string,std::string > *result = 0 ;
  std::map< std::string,std::string > *_swig_go_result;
  
  arg1 = *(std::map< std::string,std::string > **)&_swig_go_0; 
  
  result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >((std::map< std::string,std::string > const &)*arg1);
  *(std::map< std::string,std::string > **)&_swig_go_result = (std::map< std::string,std::string > *)result; 
  return _swig_go_result;
}


intgo _wrap_FieldValueMap_size_swsscommon_728e05b169b08794(std::map< std::string,std::string > *_swig_go_0) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(std::map< std::string,std::string > **)&_swig_go_0; 
  
  result = (unsigned int)((std::map< std::string,std::string > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_FieldValueMap_empty_swsscommon_728e05b169b08794(std::map< std::string,std::string > *_swig_go_0) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::map< std::string,std::string > **)&_swig_go_0; 
  
  result = (bool)((std::map< std::string,std::string > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_FieldValueMap_clear_swsscommon_728e05b169b08794(std::map< std::string,std::string > *_swig_go_0) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  
  arg1 = *(std::map< std::string,std::string > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


_gostring_ _wrap_FieldValueMap_get_swsscommon_728e05b169b08794(std::map< std::string,std::string > *_swig_go_0, _gostring_ _swig_go_1) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(std::map< std::string,std::string > **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  try {
    result = (std::string *) &std_map_Sl_std_string_Sc_std_string_Sg__get(arg1,(std::string const &)*arg2);
  } catch(std::out_of_range &_e) {
    _swig_gopanic((&_e)->what());
  }
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_FieldValueMap_set_swsscommon_728e05b169b08794(std::map< std::string,std::string > *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = *(std::map< std::string,std::string > **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  std_map_Sl_std_string_Sc_std_string_Sg__set(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  
}


void _wrap_FieldValueMap_delete_swsscommon_728e05b169b08794(std::map< std::string,std::string > *_swig_go_0, _gostring_ _swig_go_1) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(std::map< std::string,std::string > **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  try {
    std_map_Sl_std_string_Sc_std_string_Sg__del(arg1,(std::string const &)*arg2);
  } catch(std::out_of_range &_e) {
    _swig_gopanic((&_e)->what());
  }
  
}


bool _wrap_FieldValueMap_has_key_swsscommon_728e05b169b08794(std::map< std::string,std::string > *_swig_go_0, _gostring_ _swig_go_1) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::map< std::string,std::string > **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  result = (bool)std_map_Sl_std_string_Sc_std_string_Sg__has_key(arg1,(std::string const &)*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_FieldValueMap_swsscommon_728e05b169b08794(std::map< std::string,std::string > *_swig_go_0) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  
  arg1 = *(std::map< std::string,std::string > **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


std::vector< std::string > *_wrap_new_VectorString__SWIG_0_swsscommon_728e05b169b08794() {
  std::vector< std::string > *result = 0 ;
  std::vector< std::string > *_swig_go_result;
  
  
  result = (std::vector< std::string > *)new std::vector< std::string >();
  *(std::vector< std::string > **)&_swig_go_result = (std::vector< std::string > *)result; 
  return _swig_go_result;
}


std::vector< std::string > *_wrap_new_VectorString__SWIG_1_swsscommon_728e05b169b08794(long long _swig_go_0) {
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string > *result = 0 ;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  *(std::vector< std::string > **)&_swig_go_result = (std::vector< std::string > *)result; 
  return _swig_go_result;
}


std::vector< std::string > *_wrap_new_VectorString__SWIG_2_swsscommon_728e05b169b08794(std::vector< std::string > *_swig_go_0) {
  std::vector< std::string > *arg1 = 0 ;
  std::vector< std::string > *result = 0 ;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
  *(std::vector< std::string > **)&_swig_go_result = (std::vector< std::string > *)result; 
  return _swig_go_result;
}


long long _wrap_VectorString_size_swsscommon_728e05b169b08794(std::vector< std::string > *_swig_go_0) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  result = ((std::vector< std::string > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_VectorString_capacity_swsscommon_728e05b169b08794(std::vector< std::string > *_swig_go_0) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  result = ((std::vector< std::string > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_VectorString_reserve_swsscommon_728e05b169b08794(std::vector< std::string > *_swig_go_0, long long _swig_go_1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_VectorString_isEmpty_swsscommon_728e05b169b08794(std::vector< std::string > *_swig_go_0) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_VectorString_clear_swsscommon_728e05b169b08794(std::vector< std::string > *_swig_go_0) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_VectorString_add_swsscommon_728e05b169b08794(std::vector< std::string > *_swig_go_0, _gostring_ _swig_go_1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  std::vector< std::string >::value_type arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
  
}


_gostring_ _wrap_VectorString_get_swsscommon_728e05b169b08794(std::vector< std::string > *_swig_go_0, intgo _swig_go_1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    _swig_gopanic((&_e)->what());
  }
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_VectorString_set_swsscommon_728e05b169b08794(std::vector< std::string > *_swig_go_0, intgo _swig_go_1, _gostring_ _swig_go_2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  std::vector< std::string >::value_type arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  try {
    std_vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    _swig_gopanic((&_e)->what());
  }
  
}


void _wrap_delete_VectorString_swsscommon_728e05b169b08794(std::vector< std::string > *_swig_go_0) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


std::pair< long long,std::vector< std::string > > *_wrap_new_ScanResult__SWIG_0_swsscommon_728e05b169b08794() {
  std::pair< int64_t,std::vector< std::string > > *result = 0 ;
  std::pair< long long,std::vector< std::string > > *_swig_go_result;
  
  
  result = (std::pair< int64_t,std::vector< std::string > > *)new std::pair< int64_t,std::vector< std::string > >();
  *(std::pair< int64_t,std::vector< std::string > > **)&_swig_go_result = (std::pair< int64_t,std::vector< std::string > > *)result; 
  return _swig_go_result;
}


std::pair< long long,std::vector< std::string > > *_wrap_new_ScanResult__SWIG_1_swsscommon_728e05b169b08794(long long _swig_go_0, std::vector< std::string > *_swig_go_1) {
  long long arg1 ;
  std::vector< std::string > arg2 ;
  std::vector< std::string > *argp2 ;
  std::pair< int64_t,std::vector< std::string > > *result = 0 ;
  std::pair< long long,std::vector< std::string > > *_swig_go_result;
  
  arg1 = (long long)_swig_go_0; 
  
  argp2 = (std::vector< std::string > *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null std::vector< std::string >");
  }
  arg2 = (std::vector< std::string >)*argp2;
  
  
  result = (std::pair< int64_t,std::vector< std::string > > *)new std::pair< int64_t,std::vector< std::string > >(arg1,arg2);
  *(std::pair< int64_t,std::vector< std::string > > **)&_swig_go_result = (std::pair< int64_t,std::vector< std::string > > *)result; 
  return _swig_go_result;
}


std::pair< long long,std::vector< std::string > > *_wrap_new_ScanResult__SWIG_2_swsscommon_728e05b169b08794(std::pair< long long,std::vector< std::string > > *_swig_go_0) {
  std::pair< int64_t,std::vector< std::string > > *arg1 = 0 ;
  std::pair< int64_t,std::vector< std::string > > *result = 0 ;
  std::pair< long long,std::vector< std::string > > *_swig_go_result;
  
  arg1 = *(std::pair< int64_t,std::vector< std::string > > **)&_swig_go_0; 
  
  result = (std::pair< int64_t,std::vector< std::string > > *)new std::pair< int64_t,std::vector< std::string > >((std::pair< int64_t,std::vector< std::string > > const &)*arg1);
  *(std::pair< int64_t,std::vector< std::string > > **)&_swig_go_result = (std::pair< int64_t,std::vector< std::string > > *)result; 
  return _swig_go_result;
}


void _wrap_ScanResult_first_set_swsscommon_728e05b169b08794(std::pair< long long,std::vector< std::string > > *_swig_go_0, long long _swig_go_1) {
  std::pair< int64_t,std::vector< std::string > > *arg1 = (std::pair< int64_t,std::vector< std::string > > *) 0 ;
  long long arg2 ;
  
  arg1 = *(std::pair< int64_t,std::vector< std::string > > **)&_swig_go_0; 
  arg2 = (long long)_swig_go_1; 
  
  if (arg1) (arg1)->first = arg2;
  
}


long long _wrap_ScanResult_first_get_swsscommon_728e05b169b08794(std::pair< long long,std::vector< std::string > > *_swig_go_0) {
  std::pair< int64_t,std::vector< std::string > > *arg1 = (std::pair< int64_t,std::vector< std::string > > *) 0 ;
  long long result;
  long long _swig_go_result;
  
  arg1 = *(std::pair< int64_t,std::vector< std::string > > **)&_swig_go_0; 
  
  result = (long long) ((arg1)->first);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ScanResult_second_set_swsscommon_728e05b169b08794(std::pair< long long,std::vector< std::string > > *_swig_go_0, std::vector< std::string > *_swig_go_1) {
  std::pair< int64_t,std::vector< std::string > > *arg1 = (std::pair< int64_t,std::vector< std::string > > *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  arg1 = *(std::pair< int64_t,std::vector< std::string > > **)&_swig_go_0; 
  arg2 = *(std::vector< std::string > **)&_swig_go_1; 
  
  if (arg1) (arg1)->second = *arg2;
  
}


std::vector< std::string > *_wrap_ScanResult_second_get_swsscommon_728e05b169b08794(std::pair< long long,std::vector< std::string > > *_swig_go_0) {
  std::pair< int64_t,std::vector< std::string > > *arg1 = (std::pair< int64_t,std::vector< std::string > > *) 0 ;
  std::vector< std::string > *result = 0 ;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = *(std::pair< int64_t,std::vector< std::string > > **)&_swig_go_0; 
  
  result = (std::vector< std::string > *)& ((arg1)->second);
  *(std::vector< std::string > **)&_swig_go_result = (std::vector< std::string > *)result; 
  return _swig_go_result;
}


void _wrap_delete_ScanResult_swsscommon_728e05b169b08794(std::pair< long long,std::vector< std::string > > *_swig_go_0) {
  std::pair< int64_t,std::vector< std::string > > *arg1 = (std::pair< int64_t,std::vector< std::string > > *) 0 ;
  
  arg1 = *(std::pair< int64_t,std::vector< std::string > > **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


std::map< std::string,std::map< std::string,std::string > > *_wrap_new_GetTableResult__SWIG_0_swsscommon_728e05b169b08794() {
  std::map< std::string,std::map< std::string,std::string > > *result = 0 ;
  std::map< std::string,std::map< std::string,std::string > > *_swig_go_result;
  
  
  result = (std::map< std::string,std::map< std::string,std::string > > *)new std::map< std::string,std::map< std::string,std::string > >();
  *(std::map< std::string,std::map< std::string,std::string > > **)&_swig_go_result = (std::map< std::string,std::map< std::string,std::string > > *)result; 
  return _swig_go_result;
}


std::map< std::string,std::map< std::string,std::string > > *_wrap_new_GetTableResult__SWIG_1_swsscommon_728e05b169b08794(std::map< std::string,std::map< std::string,std::string,std::less< std::string > > > *_swig_go_0) {
  std::map< std::string,std::map< std::string,std::string,std::less< std::string > > > *arg1 = 0 ;
  std::map< std::string,std::map< std::string,std::string > > *result = 0 ;
  std::map< std::string,std::map< std::string,std::string > > *_swig_go_result;
  
  arg1 = *(std::map< std::string,std::map< std::string,std::string,std::less< std::string > > > **)&_swig_go_0; 
  
  result = (std::map< std::string,std::map< std::string,std::string > > *)new std::map< std::string,std::map< std::string,std::string > >((std::map< std::string,std::map< std::string,std::string,std::less< std::string > > > const &)*arg1);
  *(std::map< std::string,std::map< std::string,std::string > > **)&_swig_go_result = (std::map< std::string,std::map< std::string,std::string > > *)result; 
  return _swig_go_result;
}


intgo _wrap_GetTableResult_size_swsscommon_728e05b169b08794(std::map< std::string,std::map< std::string,std::string > > *_swig_go_0) {
  std::map< std::string,std::map< std::string,std::string > > *arg1 = (std::map< std::string,std::map< std::string,std::string > > *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(std::map< std::string,std::map< std::string,std::string > > **)&_swig_go_0; 
  
  result = (unsigned int)((std::map< std::string,std::map< std::string,std::string > > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_GetTableResult_empty_swsscommon_728e05b169b08794(std::map< std::string,std::map< std::string,std::string > > *_swig_go_0) {
  std::map< std::string,std::map< std::string,std::string > > *arg1 = (std::map< std::string,std::map< std::string,std::string > > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::map< std::string,std::map< std::string,std::string > > **)&_swig_go_0; 
  
  result = (bool)((std::map< std::string,std::map< std::string,std::string > > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_GetTableResult_clear_swsscommon_728e05b169b08794(std::map< std::string,std::map< std::string,std::string > > *_swig_go_0) {
  std::map< std::string,std::map< std::string,std::string > > *arg1 = (std::map< std::string,std::map< std::string,std::string > > *) 0 ;
  
  arg1 = *(std::map< std::string,std::map< std::string,std::string > > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


std::map< std::string,std::string,std::less< std::string > > *_wrap_GetTableResult_get_swsscommon_728e05b169b08794(std::map< std::string,std::map< std::string,std::string > > *_swig_go_0, _gostring_ _swig_go_1) {
  std::map< std::string,std::map< std::string,std::string > > *arg1 = (std::map< std::string,std::map< std::string,std::string > > *) 0 ;
  std::string *arg2 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > *result = 0 ;
  std::map< std::string,std::string,std::less< std::string > > *_swig_go_result;
  
  arg1 = *(std::map< std::string,std::map< std::string,std::string > > **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  try {
    result = (std::map< std::string,std::string,std::less< std::string > > *) &std_map_Sl_std_string_Sc_std_map_Sl_std_string_Sc_std_string_Sg__Sg__get(arg1,(std::string const &)*arg2);
  } catch(std::out_of_range &_e) {
    _swig_gopanic((&_e)->what());
  }
  *(std::map< std::string,std::string,std::less< std::string > > **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_GetTableResult_set_swsscommon_728e05b169b08794(std::map< std::string,std::map< std::string,std::string > > *_swig_go_0, _gostring_ _swig_go_1, std::map< std::string,std::string,std::less< std::string > > *_swig_go_2) {
  std::map< std::string,std::map< std::string,std::string > > *arg1 = (std::map< std::string,std::map< std::string,std::string > > *) 0 ;
  std::string *arg2 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg3 = 0 ;
  
  arg1 = *(std::map< std::string,std::map< std::string,std::string > > **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = *(std::map< std::string,std::string,std::less< std::string > > **)&_swig_go_2; 
  
  std_map_Sl_std_string_Sc_std_map_Sl_std_string_Sc_std_string_Sg__Sg__set(arg1,(std::string const &)*arg2,(std::map< std::string,std::string,std::less< std::string > > const &)*arg3);
  
}


void _wrap_GetTableResult_delete_swsscommon_728e05b169b08794(std::map< std::string,std::map< std::string,std::string > > *_swig_go_0, _gostring_ _swig_go_1) {
  std::map< std::string,std::map< std::string,std::string > > *arg1 = (std::map< std::string,std::map< std::string,std::string > > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(std::map< std::string,std::map< std::string,std::string > > **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  try {
    std_map_Sl_std_string_Sc_std_map_Sl_std_string_Sc_std_string_Sg__Sg__del(arg1,(std::string const &)*arg2);
  } catch(std::out_of_range &_e) {
    _swig_gopanic((&_e)->what());
  }
  
}


bool _wrap_GetTableResult_has_key_swsscommon_728e05b169b08794(std::map< std::string,std::map< std::string,std::string > > *_swig_go_0, _gostring_ _swig_go_1) {
  std::map< std::string,std::map< std::string,std::string > > *arg1 = (std::map< std::string,std::map< std::string,std::string > > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::map< std::string,std::map< std::string,std::string > > **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  result = (bool)std_map_Sl_std_string_Sc_std_map_Sl_std_string_Sc_std_string_Sg__Sg__has_key(arg1,(std::string const &)*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_GetTableResult_swsscommon_728e05b169b08794(std::map< std::string,std::map< std::string,std::string > > *_swig_go_0) {
  std::map< std::string,std::map< std::string,std::string > > *arg1 = (std::map< std::string,std::map< std::string,std::string > > *) 0 ;
  
  arg1 = *(std::map< std::string,std::map< std::string,std::string > > **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


std::map< std::string,std::map< std::string,std::map< std::string,std::string > > > *_wrap_new_GetConfigResult__SWIG_0_swsscommon_728e05b169b08794() {
  std::map< std::string,std::map< std::string,std::map< std::string,std::string > > > *result = 0 ;
  std::map< std::string,std::map< std::string,std::map< std::string,std::string > > > *_swig_go_result;
  
  
  result = (std::map< std::string,std::map< std::string,std::map< std::string,std::string > > > *)new std::map< std::string,std::map< std::string,std::map< std::string,std::string > > >();
  *(std::map< std::string,std::map< std::string,std::map< std::string,std::string > > > **)&_swig_go_result = (std::map< std::string,std::map< std::string,std::map< std::string,std::string > > > *)result; 
  return _swig_go_result;
}


std::map< std::string,std::map< std::string,std::map< std::string,std::string > > > *_wrap_new_GetConfigResult__SWIG_1_swsscommon_728e05b169b08794(std::map< std::string,std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > > > *_swig_go_0) {
  std::map< std::string,std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > > > *arg1 = 0 ;
  std::map< std::string,std::map< std::string,std::map< std::string,std::string > > > *result = 0 ;
  std::map< std::string,std::map< std::string,std::map< std::string,std::string > > > *_swig_go_result;
  
  arg1 = *(std::map< std::string,std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > > > **)&_swig_go_0; 
  
  result = (std::map< std::string,std::map< std::string,std::map< std::string,std::string > > > *)new std::map< std::string,std::map< std::string,std::map< std::string,std::string > > >((std::map< std::string,std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > > > const &)*arg1);
  *(std::map< std::string,std::map< std::string,std::map< std::string,std::string > > > **)&_swig_go_result = (std::map< std::string,std::map< std::string,std::map< std::string,std::string > > > *)result; 
  return _swig_go_result;
}


intgo _wrap_GetConfigResult_size_swsscommon_728e05b169b08794(std::map< std::string,std::map< std::string,std::map< std::string,std::string > > > *_swig_go_0) {
  std::map< std::string,std::map< std::string,std::map< std::string,std::string > > > *arg1 = (std::map< std::string,std::map< std::string,std::map< std::string,std::string > > > *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(std::map< std::string,std::map< std::string,std::map< std::string,std::string > > > **)&_swig_go_0; 
  
  result = (unsigned int)((std::map< std::string,std::map< std::string,std::map< std::string,std::string > > > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_GetConfigResult_empty_swsscommon_728e05b169b08794(std::map< std::string,std::map< std::string,std::map< std::string,std::string > > > *_swig_go_0) {
  std::map< std::string,std::map< std::string,std::map< std::string,std::string > > > *arg1 = (std::map< std::string,std::map< std::string,std::map< std::string,std::string > > > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::map< std::string,std::map< std::string,std::map< std::string,std::string > > > **)&_swig_go_0; 
  
  result = (bool)((std::map< std::string,std::map< std::string,std::map< std::string,std::string > > > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_GetConfigResult_clear_swsscommon_728e05b169b08794(std::map< std::string,std::map< std::string,std::map< std::string,std::string > > > *_swig_go_0) {
  std::map< std::string,std::map< std::string,std::map< std::string,std::string > > > *arg1 = (std::map< std::string,std::map< std::string,std::map< std::string,std::string > > > *) 0 ;
  
  arg1 = *(std::map< std::string,std::map< std::string,std::map< std::string,std::string > > > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > > *_wrap_GetConfigResult_get_swsscommon_728e05b169b08794(std::map< std::string,std::map< std::string,std::map< std::string,std::string > > > *_swig_go_0, _gostring_ _swig_go_1) {
  std::map< std::string,std::map< std::string,std::map< std::string,std::string > > > *arg1 = (std::map< std::string,std::map< std::string,std::map< std::string,std::string > > > *) 0 ;
  std::string *arg2 = 0 ;
  std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > > *result = 0 ;
  std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > > *_swig_go_result;
  
  arg1 = *(std::map< std::string,std::map< std::string,std::map< std::string,std::string > > > **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  try {
    result = (std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > > *) &std_map_Sl_std_string_Sc_std_map_Sl_std_string_Sc_std_map_Sl_std_string_Sc_std_string_Sg__Sg__Sg__get(arg1,(std::string const &)*arg2);
  } catch(std::out_of_range &_e) {
    _swig_gopanic((&_e)->what());
  }
  *(std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > > **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_GetConfigResult_set_swsscommon_728e05b169b08794(std::map< std::string,std::map< std::string,std::map< std::string,std::string > > > *_swig_go_0, _gostring_ _swig_go_1, std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > > *_swig_go_2) {
  std::map< std::string,std::map< std::string,std::map< std::string,std::string > > > *arg1 = (std::map< std::string,std::map< std::string,std::map< std::string,std::string > > > *) 0 ;
  std::string *arg2 = 0 ;
  std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > > *arg3 = 0 ;
  
  arg1 = *(std::map< std::string,std::map< std::string,std::map< std::string,std::string > > > **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = *(std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > > **)&_swig_go_2; 
  
  std_map_Sl_std_string_Sc_std_map_Sl_std_string_Sc_std_map_Sl_std_string_Sc_std_string_Sg__Sg__Sg__set(arg1,(std::string const &)*arg2,(std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > > const &)*arg3);
  
}


void _wrap_GetConfigResult_delete_swsscommon_728e05b169b08794(std::map< std::string,std::map< std::string,std::map< std::string,std::string > > > *_swig_go_0, _gostring_ _swig_go_1) {
  std::map< std::string,std::map< std::string,std::map< std::string,std::string > > > *arg1 = (std::map< std::string,std::map< std::string,std::map< std::string,std::string > > > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(std::map< std::string,std::map< std::string,std::map< std::string,std::string > > > **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  try {
    std_map_Sl_std_string_Sc_std_map_Sl_std_string_Sc_std_map_Sl_std_string_Sc_std_string_Sg__Sg__Sg__del(arg1,(std::string const &)*arg2);
  } catch(std::out_of_range &_e) {
    _swig_gopanic((&_e)->what());
  }
  
}


bool _wrap_GetConfigResult_has_key_swsscommon_728e05b169b08794(std::map< std::string,std::map< std::string,std::map< std::string,std::string > > > *_swig_go_0, _gostring_ _swig_go_1) {
  std::map< std::string,std::map< std::string,std::map< std::string,std::string > > > *arg1 = (std::map< std::string,std::map< std::string,std::map< std::string,std::string > > > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::map< std::string,std::map< std::string,std::map< std::string,std::string > > > **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  result = (bool)std_map_Sl_std_string_Sc_std_map_Sl_std_string_Sc_std_map_Sl_std_string_Sc_std_string_Sg__Sg__Sg__has_key(arg1,(std::string const &)*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_GetConfigResult_swsscommon_728e05b169b08794(std::map< std::string,std::map< std::string,std::map< std::string,std::string > > > *_swig_go_0) {
  std::map< std::string,std::map< std::string,std::map< std::string,std::string > > > *arg1 = (std::map< std::string,std::map< std::string,std::map< std::string,std::string > > > *) 0 ;
  
  arg1 = *(std::map< std::string,std::map< std::string,std::map< std::string,std::string > > > **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


std::map< std::string,swss::RedisInstInfo > *_wrap_new_GetInstanceListResult__SWIG_0_swsscommon_728e05b169b08794() {
  std::map< std::string,swss::RedisInstInfo > *result = 0 ;
  std::map< std::string,swss::RedisInstInfo > *_swig_go_result;
  
  
  result = (std::map< std::string,swss::RedisInstInfo > *)new std::map< std::string,swss::RedisInstInfo >();
  *(std::map< std::string,swss::RedisInstInfo > **)&_swig_go_result = (std::map< std::string,swss::RedisInstInfo > *)result; 
  return _swig_go_result;
}


std::map< std::string,swss::RedisInstInfo > *_wrap_new_GetInstanceListResult__SWIG_1_swsscommon_728e05b169b08794(std::map< std::string,swss::RedisInstInfo > *_swig_go_0) {
  std::map< std::string,swss::RedisInstInfo > *arg1 = 0 ;
  std::map< std::string,swss::RedisInstInfo > *result = 0 ;
  std::map< std::string,swss::RedisInstInfo > *_swig_go_result;
  
  arg1 = *(std::map< std::string,swss::RedisInstInfo > **)&_swig_go_0; 
  
  result = (std::map< std::string,swss::RedisInstInfo > *)new std::map< std::string,swss::RedisInstInfo >((std::map< std::string,swss::RedisInstInfo > const &)*arg1);
  *(std::map< std::string,swss::RedisInstInfo > **)&_swig_go_result = (std::map< std::string,swss::RedisInstInfo > *)result; 
  return _swig_go_result;
}


intgo _wrap_GetInstanceListResult_size_swsscommon_728e05b169b08794(std::map< std::string,swss::RedisInstInfo > *_swig_go_0) {
  std::map< std::string,swss::RedisInstInfo > *arg1 = (std::map< std::string,swss::RedisInstInfo > *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(std::map< std::string,swss::RedisInstInfo > **)&_swig_go_0; 
  
  result = (unsigned int)((std::map< std::string,swss::RedisInstInfo > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_GetInstanceListResult_empty_swsscommon_728e05b169b08794(std::map< std::string,swss::RedisInstInfo > *_swig_go_0) {
  std::map< std::string,swss::RedisInstInfo > *arg1 = (std::map< std::string,swss::RedisInstInfo > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::map< std::string,swss::RedisInstInfo > **)&_swig_go_0; 
  
  result = (bool)((std::map< std::string,swss::RedisInstInfo > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_GetInstanceListResult_clear_swsscommon_728e05b169b08794(std::map< std::string,swss::RedisInstInfo > *_swig_go_0) {
  std::map< std::string,swss::RedisInstInfo > *arg1 = (std::map< std::string,swss::RedisInstInfo > *) 0 ;
  
  arg1 = *(std::map< std::string,swss::RedisInstInfo > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


swss::RedisInstInfo *_wrap_GetInstanceListResult_get_swsscommon_728e05b169b08794(std::map< std::string,swss::RedisInstInfo > *_swig_go_0, _gostring_ _swig_go_1) {
  std::map< std::string,swss::RedisInstInfo > *arg1 = (std::map< std::string,swss::RedisInstInfo > *) 0 ;
  std::string *arg2 = 0 ;
  swss::RedisInstInfo *result = 0 ;
  swss::RedisInstInfo *_swig_go_result;
  
  arg1 = *(std::map< std::string,swss::RedisInstInfo > **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  try {
    result = (swss::RedisInstInfo *) &std_map_Sl_std_string_Sc_swss_RedisInstInfo_Sg__get(arg1,(std::string const &)*arg2);
  } catch(std::out_of_range &_e) {
    _swig_gopanic((&_e)->what());
  }
  *(swss::RedisInstInfo **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_GetInstanceListResult_set_swsscommon_728e05b169b08794(std::map< std::string,swss::RedisInstInfo > *_swig_go_0, _gostring_ _swig_go_1, swss::RedisInstInfo *_swig_go_2) {
  std::map< std::string,swss::RedisInstInfo > *arg1 = (std::map< std::string,swss::RedisInstInfo > *) 0 ;
  std::string *arg2 = 0 ;
  swss::RedisInstInfo *arg3 = 0 ;
  
  arg1 = *(std::map< std::string,swss::RedisInstInfo > **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = *(swss::RedisInstInfo **)&_swig_go_2; 
  
  std_map_Sl_std_string_Sc_swss_RedisInstInfo_Sg__set(arg1,(std::string const &)*arg2,(swss::RedisInstInfo const &)*arg3);
  
}


void _wrap_GetInstanceListResult_delete_swsscommon_728e05b169b08794(std::map< std::string,swss::RedisInstInfo > *_swig_go_0, _gostring_ _swig_go_1) {
  std::map< std::string,swss::RedisInstInfo > *arg1 = (std::map< std::string,swss::RedisInstInfo > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(std::map< std::string,swss::RedisInstInfo > **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  try {
    std_map_Sl_std_string_Sc_swss_RedisInstInfo_Sg__del(arg1,(std::string const &)*arg2);
  } catch(std::out_of_range &_e) {
    _swig_gopanic((&_e)->what());
  }
  
}


bool _wrap_GetInstanceListResult_has_key_swsscommon_728e05b169b08794(std::map< std::string,swss::RedisInstInfo > *_swig_go_0, _gostring_ _swig_go_1) {
  std::map< std::string,swss::RedisInstInfo > *arg1 = (std::map< std::string,swss::RedisInstInfo > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::map< std::string,swss::RedisInstInfo > **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  result = (bool)std_map_Sl_std_string_Sc_swss_RedisInstInfo_Sg__has_key(arg1,(std::string const &)*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_GetInstanceListResult_swsscommon_728e05b169b08794(std::map< std::string,swss::RedisInstInfo > *_swig_go_0) {
  std::map< std::string,swss::RedisInstInfo > *arg1 = (std::map< std::string,swss::RedisInstInfo > *) 0 ;
  
  arg1 = *(std::map< std::string,swss::RedisInstInfo > **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


bool _wrap_KeyOpFieldsValuesQueue_empty_swsscommon_728e05b169b08794(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_0) {
  std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *arg1 = (std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > **)&_swig_go_0; 
  
  result = (bool)((std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *_wrap_new_KeyOpFieldsValuesQueue__SWIG_0_swsscommon_728e05b169b08794() {
  std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *result = 0 ;
  std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_result;
  
  
  result = (std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *)new std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > >();
  *(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > **)&_swig_go_result = (std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *)result; 
  return _swig_go_result;
}


std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *_wrap_new_KeyOpFieldsValuesQueue__SWIG_1_swsscommon_728e05b169b08794(intgo _swig_go_0, std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > *_swig_go_1) {
  unsigned int arg1 ;
  std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > *arg2 = 0 ;
  std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *result = 0 ;
  std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_result;
  
  arg1 = (unsigned int)_swig_go_0; 
  arg2 = *(std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > **)&_swig_go_1; 
  
  result = (std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *)new std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > >(arg1,(std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > const &)*arg2);
  *(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > **)&_swig_go_result = (std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *)result; 
  return _swig_go_result;
}


std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *_wrap_new_KeyOpFieldsValuesQueue__SWIG_2_swsscommon_728e05b169b08794(intgo _swig_go_0) {
  unsigned int arg1 ;
  std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *result = 0 ;
  std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_result;
  
  arg1 = (unsigned int)_swig_go_0; 
  
  result = (std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *)new std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > >(arg1);
  *(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > **)&_swig_go_result = (std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *)result; 
  return _swig_go_result;
}


std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *_wrap_new_KeyOpFieldsValuesQueue__SWIG_3_swsscommon_728e05b169b08794(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_0) {
  std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *arg1 = 0 ;
  std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *result = 0 ;
  std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_result;
  
  arg1 = *(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > **)&_swig_go_0; 
  
  result = (std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *)new std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > >((std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > const &)*arg1);
  *(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > **)&_swig_go_result = (std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *)result; 
  return _swig_go_result;
}


void _wrap_delete_KeyOpFieldsValuesQueue_swsscommon_728e05b169b08794(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_0) {
  std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *arg1 = (std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *) 0 ;
  
  arg1 = *(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_KeyOpFieldsValuesQueue_assign_swsscommon_728e05b169b08794(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_0, intgo _swig_go_1, std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > *_swig_go_2) {
  std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *arg1 = (std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *) 0 ;
  unsigned int arg2 ;
  std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > *arg3 = 0 ;
  
  arg1 = *(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  arg3 = *(std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > **)&_swig_go_2; 
  
  (arg1)->assign(arg2,(std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > const &)*arg3);
  
}


void _wrap_KeyOpFieldsValuesQueue_swap_swsscommon_728e05b169b08794(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_0, std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_1) {
  std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *arg1 = (std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *) 0 ;
  std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *arg2 = 0 ;
  
  arg1 = *(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > **)&_swig_go_0; 
  arg2 = *(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > **)&_swig_go_1; 
  
  (arg1)->swap(*arg2);
  
}


intgo _wrap_KeyOpFieldsValuesQueue_size_swsscommon_728e05b169b08794(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_0) {
  std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *arg1 = (std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > **)&_swig_go_0; 
  
  result = (unsigned int)((std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_KeyOpFieldsValuesQueue_max_size_swsscommon_728e05b169b08794(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_0) {
  std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *arg1 = (std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > **)&_swig_go_0; 
  
  result = (unsigned int)((std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > const *)arg1)->max_size();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_KeyOpFieldsValuesQueue_resize__SWIG_0_swsscommon_728e05b169b08794(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_0, intgo _swig_go_1, std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > *_swig_go_2) {
  std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *arg1 = (std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *) 0 ;
  unsigned int arg2 ;
  SwigValueWrapper< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > arg3 ;
  std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > *argp3 ;
  
  arg1 = *(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  argp3 = (std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > >");
  }
  arg3 = (std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > >)*argp3;
  
  
  (arg1)->resize(arg2,arg3);
  
}


void _wrap_KeyOpFieldsValuesQueue_resize__SWIG_1_swsscommon_728e05b169b08794(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_0, intgo _swig_go_1) {
  std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *arg1 = (std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  (arg1)->resize(arg2);
  
}


std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > *_wrap_KeyOpFieldsValuesQueue_front_swsscommon_728e05b169b08794(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_0) {
  std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *arg1 = (std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *) 0 ;
  std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > >::value_type *result = 0 ;
  std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > *_swig_go_result;
  
  arg1 = *(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > **)&_swig_go_0; 
  
  result = (std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > >::value_type *) &(arg1)->front();
  *(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > >::value_type **)&_swig_go_result = result; 
  return _swig_go_result;
}


std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > *_wrap_KeyOpFieldsValuesQueue_back_swsscommon_728e05b169b08794(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_0) {
  std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *arg1 = (std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *) 0 ;
  std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > >::value_type *result = 0 ;
  std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > *_swig_go_result;
  
  arg1 = *(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > **)&_swig_go_0; 
  
  result = (std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > >::value_type *) &(arg1)->back();
  *(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > >::value_type **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_KeyOpFieldsValuesQueue_push_front_swsscommon_728e05b169b08794(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_0, std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > *_swig_go_1) {
  std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *arg1 = (std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *) 0 ;
  std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > *arg2 = 0 ;
  
  arg1 = *(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > **)&_swig_go_0; 
  arg2 = *(std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > **)&_swig_go_1; 
  
  (arg1)->push_front((std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > const &)*arg2);
  
}


void _wrap_KeyOpFieldsValuesQueue_push_back_swsscommon_728e05b169b08794(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_0, std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > *_swig_go_1) {
  std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *arg1 = (std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *) 0 ;
  std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > *arg2 = 0 ;
  
  arg1 = *(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > **)&_swig_go_0; 
  arg2 = *(std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > **)&_swig_go_1; 
  
  (arg1)->push_back((std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > const &)*arg2);
  
}


void _wrap_KeyOpFieldsValuesQueue_pop_front_swsscommon_728e05b169b08794(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_0) {
  std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *arg1 = (std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *) 0 ;
  
  arg1 = *(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > **)&_swig_go_0; 
  
  (arg1)->pop_front();
  
}


void _wrap_KeyOpFieldsValuesQueue_pop_back_swsscommon_728e05b169b08794(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_0) {
  std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *arg1 = (std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *) 0 ;
  
  arg1 = *(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > **)&_swig_go_0; 
  
  (arg1)->pop_back();
  
}


void _wrap_KeyOpFieldsValuesQueue_clear_swsscommon_728e05b169b08794(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_0) {
  std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *arg1 = (std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *) 0 ;
  
  arg1 = *(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > *_wrap_KeyOpFieldsValuesQueue_getitem_swsscommon_728e05b169b08794(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_0, intgo _swig_go_1) {
  std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *arg1 = (std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *) 0 ;
  int arg2 ;
  std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > >::value_type *result = 0 ;
  std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > *_swig_go_result;
  
  arg1 = *(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > >::value_type *) &std_deque_Sl_std_tuple_Sl_std_string_Sc_std_string_Sc_std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__Sg__Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    _swig_gopanic((&_e)->what());
  }
  *(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > >::value_type **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_KeyOpFieldsValuesQueue_setitem_swsscommon_728e05b169b08794(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_0, intgo _swig_go_1, std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > *_swig_go_2) {
  std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *arg1 = (std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *) 0 ;
  int arg2 ;
  std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > *arg3 = 0 ;
  
  arg1 = *(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = *(std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > **)&_swig_go_2; 
  
  try {
    std_deque_Sl_std_tuple_Sl_std_string_Sc_std_string_Sc_std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__Sg__Sg__setitem(arg1,arg2,(std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    _swig_gopanic((&_e)->what());
  }
  
}


void _wrap_KeyOpFieldsValuesQueue_delitem_swsscommon_728e05b169b08794(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_0, intgo _swig_go_1) {
  std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *arg1 = (std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *) 0 ;
  int arg2 ;
  
  arg1 = *(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    std_deque_Sl_std_tuple_Sl_std_string_Sc_std_string_Sc_std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__Sg__Sg__delitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    _swig_gopanic((&_e)->what());
  }
  
}


std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *_wrap_KeyOpFieldsValuesQueue_getslice_swsscommon_728e05b169b08794(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2) {
  std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *arg1 = (std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > result;
  std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_result;
  
  arg1 = *(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  
  result = std_deque_Sl_std_tuple_Sl_std_string_Sc_std_string_Sc_std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__Sg__Sg__getslice(arg1,arg2,arg3);
  *(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > **)&_swig_go_result = new std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > >(result); 
  return _swig_go_result;
}


void _wrap_KeyOpFieldsValuesQueue_setslice_swsscommon_728e05b169b08794(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2, std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_3) {
  std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *arg1 = (std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *arg4 = 0 ;
  
  arg1 = *(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  arg4 = *(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > **)&_swig_go_3; 
  
  std_deque_Sl_std_tuple_Sl_std_string_Sc_std_string_Sc_std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__Sg__Sg__setslice(arg1,arg2,arg3,(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > const &)*arg4);
  
}


void _wrap_KeyOpFieldsValuesQueue_delslice_swsscommon_728e05b169b08794(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2) {
  std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *arg1 = (std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = *(std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  
  std_deque_Sl_std_tuple_Sl_std_string_Sc_std_string_Sc_std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__Sg__Sg__delslice(arg1,arg2,arg3);
  
}


std::vector< swss::SonicDBKey > *_wrap_new_VectorSonicDbKey__SWIG_0_swsscommon_728e05b169b08794() {
  std::vector< swss::SonicDBKey > *result = 0 ;
  std::vector< swss::SonicDBKey > *_swig_go_result;
  
  
  result = (std::vector< swss::SonicDBKey > *)new std::vector< swss::SonicDBKey >();
  *(std::vector< swss::SonicDBKey > **)&_swig_go_result = (std::vector< swss::SonicDBKey > *)result; 
  return _swig_go_result;
}


std::vector< swss::SonicDBKey > *_wrap_new_VectorSonicDbKey__SWIG_1_swsscommon_728e05b169b08794(long long _swig_go_0) {
  std::vector< swss::SonicDBKey >::size_type arg1 ;
  std::vector< swss::SonicDBKey > *result = 0 ;
  std::vector< swss::SonicDBKey > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< swss::SonicDBKey > *)new std::vector< swss::SonicDBKey >(arg1);
  *(std::vector< swss::SonicDBKey > **)&_swig_go_result = (std::vector< swss::SonicDBKey > *)result; 
  return _swig_go_result;
}


std::vector< swss::SonicDBKey > *_wrap_new_VectorSonicDbKey__SWIG_2_swsscommon_728e05b169b08794(std::vector< swss::SonicDBKey > *_swig_go_0) {
  std::vector< swss::SonicDBKey > *arg1 = 0 ;
  std::vector< swss::SonicDBKey > *result = 0 ;
  std::vector< swss::SonicDBKey > *_swig_go_result;
  
  arg1 = *(std::vector< swss::SonicDBKey > **)&_swig_go_0; 
  
  result = (std::vector< swss::SonicDBKey > *)new std::vector< swss::SonicDBKey >((std::vector< swss::SonicDBKey > const &)*arg1);
  *(std::vector< swss::SonicDBKey > **)&_swig_go_result = (std::vector< swss::SonicDBKey > *)result; 
  return _swig_go_result;
}


long long _wrap_VectorSonicDbKey_size_swsscommon_728e05b169b08794(std::vector< swss::SonicDBKey > *_swig_go_0) {
  std::vector< swss::SonicDBKey > *arg1 = (std::vector< swss::SonicDBKey > *) 0 ;
  std::vector< swss::SonicDBKey >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< swss::SonicDBKey > **)&_swig_go_0; 
  
  result = ((std::vector< swss::SonicDBKey > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_VectorSonicDbKey_capacity_swsscommon_728e05b169b08794(std::vector< swss::SonicDBKey > *_swig_go_0) {
  std::vector< swss::SonicDBKey > *arg1 = (std::vector< swss::SonicDBKey > *) 0 ;
  std::vector< swss::SonicDBKey >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< swss::SonicDBKey > **)&_swig_go_0; 
  
  result = ((std::vector< swss::SonicDBKey > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_VectorSonicDbKey_reserve_swsscommon_728e05b169b08794(std::vector< swss::SonicDBKey > *_swig_go_0, long long _swig_go_1) {
  std::vector< swss::SonicDBKey > *arg1 = (std::vector< swss::SonicDBKey > *) 0 ;
  std::vector< swss::SonicDBKey >::size_type arg2 ;
  
  arg1 = *(std::vector< swss::SonicDBKey > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_VectorSonicDbKey_isEmpty_swsscommon_728e05b169b08794(std::vector< swss::SonicDBKey > *_swig_go_0) {
  std::vector< swss::SonicDBKey > *arg1 = (std::vector< swss::SonicDBKey > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< swss::SonicDBKey > **)&_swig_go_0; 
  
  result = (bool)((std::vector< swss::SonicDBKey > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_VectorSonicDbKey_clear_swsscommon_728e05b169b08794(std::vector< swss::SonicDBKey > *_swig_go_0) {
  std::vector< swss::SonicDBKey > *arg1 = (std::vector< swss::SonicDBKey > *) 0 ;
  
  arg1 = *(std::vector< swss::SonicDBKey > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_VectorSonicDbKey_add_swsscommon_728e05b169b08794(std::vector< swss::SonicDBKey > *_swig_go_0, swss::SonicDBKey *_swig_go_1) {
  std::vector< swss::SonicDBKey > *arg1 = (std::vector< swss::SonicDBKey > *) 0 ;
  std::vector< swss::SonicDBKey >::value_type *arg2 = 0 ;
  
  arg1 = *(std::vector< swss::SonicDBKey > **)&_swig_go_0; 
  arg2 = *(std::vector< swss::SonicDBKey >::value_type **)&_swig_go_1; 
  
  (arg1)->push_back((std::vector< swss::SonicDBKey >::value_type const &)*arg2);
  
}


swss::SonicDBKey *_wrap_VectorSonicDbKey_get_swsscommon_728e05b169b08794(std::vector< swss::SonicDBKey > *_swig_go_0, intgo _swig_go_1) {
  std::vector< swss::SonicDBKey > *arg1 = (std::vector< swss::SonicDBKey > *) 0 ;
  int arg2 ;
  std::vector< swss::SonicDBKey >::value_type *result = 0 ;
  swss::SonicDBKey *_swig_go_result;
  
  arg1 = *(std::vector< swss::SonicDBKey > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< swss::SonicDBKey >::value_type *) &std_vector_Sl_swss_SonicDBKey_Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    _swig_gopanic((&_e)->what());
  }
  *(std::vector< swss::SonicDBKey >::value_type **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_VectorSonicDbKey_set_swsscommon_728e05b169b08794(std::vector< swss::SonicDBKey > *_swig_go_0, intgo _swig_go_1, swss::SonicDBKey *_swig_go_2) {
  std::vector< swss::SonicDBKey > *arg1 = (std::vector< swss::SonicDBKey > *) 0 ;
  int arg2 ;
  std::vector< swss::SonicDBKey >::value_type *arg3 = 0 ;
  
  arg1 = *(std::vector< swss::SonicDBKey > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = *(std::vector< swss::SonicDBKey >::value_type **)&_swig_go_2; 
  
  try {
    std_vector_Sl_swss_SonicDBKey_Sg__set(arg1,arg2,(swss::SonicDBKey const &)*arg3);
  } catch(std::out_of_range &_e) {
    _swig_gopanic((&_e)->what());
  }
  
}


void _wrap_delete_VectorSonicDbKey_swsscommon_728e05b169b08794(std::vector< swss::SonicDBKey > *_swig_go_0) {
  std::vector< swss::SonicDBKey > *arg1 = (std::vector< swss::SonicDBKey > *) 0 ;
  
  arg1 = *(std::vector< swss::SonicDBKey > **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


swss::RedisSelect *_wrap_CastSelectableToRedisSelectObj_swsscommon_728e05b169b08794(swss::Selectable *_swig_go_0) {
  swss::Selectable *arg1 = (swss::Selectable *) 0 ;
  swss::RedisSelect *result = 0 ;
  swss::RedisSelect *_swig_go_result;
  
  arg1 = *(swss::Selectable **)&_swig_go_0; 
  
  {
    try {
      result = (swss::RedisSelect *)castSelectableObj< swss::RedisSelect * >(arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::RedisSelect **)&_swig_go_result = (swss::RedisSelect *)result; 
  return _swig_go_result;
}


swss::SubscriberStateTable *_wrap_CastSelectableToSubscriberTableObj_swsscommon_728e05b169b08794(swss::Selectable *_swig_go_0) {
  swss::Selectable *arg1 = (swss::Selectable *) 0 ;
  swss::SubscriberStateTable *result = 0 ;
  swss::SubscriberStateTable *_swig_go_result;
  
  arg1 = *(swss::Selectable **)&_swig_go_0; 
  
  {
    try {
      result = (swss::SubscriberStateTable *)castSelectableObj< swss::SubscriberStateTable * >(arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::SubscriberStateTable **)&_swig_go_result = (swss::SubscriberStateTable *)result; 
  return _swig_go_result;
}


_gostring_ _wrap_EMPTY_PREFIX_swsscommon_728e05b169b08794() {
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  
  result = (char *)("");
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


void _wrap_RedisInstInfo_unixSocketPath_set_swsscommon_728e05b169b08794(swss::RedisInstInfo *_swig_go_0, _gostring_ _swig_go_1) {
  swss::RedisInstInfo *arg1 = (swss::RedisInstInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(swss::RedisInstInfo **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->unixSocketPath = *arg2;
  
}


_gostring_ _wrap_RedisInstInfo_unixSocketPath_get_swsscommon_728e05b169b08794(swss::RedisInstInfo *_swig_go_0) {
  swss::RedisInstInfo *arg1 = (swss::RedisInstInfo *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::RedisInstInfo **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->unixSocketPath);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_RedisInstInfo_hostname_set_swsscommon_728e05b169b08794(swss::RedisInstInfo *_swig_go_0, _gostring_ _swig_go_1) {
  swss::RedisInstInfo *arg1 = (swss::RedisInstInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(swss::RedisInstInfo **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->hostname = *arg2;
  
}


_gostring_ _wrap_RedisInstInfo_hostname_get_swsscommon_728e05b169b08794(swss::RedisInstInfo *_swig_go_0) {
  swss::RedisInstInfo *arg1 = (swss::RedisInstInfo *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::RedisInstInfo **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->hostname);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_RedisInstInfo_port_set_swsscommon_728e05b169b08794(swss::RedisInstInfo *_swig_go_0, intgo _swig_go_1) {
  swss::RedisInstInfo *arg1 = (swss::RedisInstInfo *) 0 ;
  int arg2 ;
  
  arg1 = *(swss::RedisInstInfo **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->port = arg2;
  
}


intgo _wrap_RedisInstInfo_port_get_swsscommon_728e05b169b08794(swss::RedisInstInfo *_swig_go_0) {
  swss::RedisInstInfo *arg1 = (swss::RedisInstInfo *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(swss::RedisInstInfo **)&_swig_go_0; 
  
  result = (int) ((arg1)->port);
  _swig_go_result = result; 
  return _swig_go_result;
}


swss::RedisInstInfo *_wrap_new_RedisInstInfo_swsscommon_728e05b169b08794() {
  swss::RedisInstInfo *result = 0 ;
  swss::RedisInstInfo *_swig_go_result;
  
  
  {
    try {
      result = (swss::RedisInstInfo *)new swss::RedisInstInfo();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::RedisInstInfo **)&_swig_go_result = (swss::RedisInstInfo *)result; 
  return _swig_go_result;
}


void _wrap_delete_RedisInstInfo_swsscommon_728e05b169b08794(swss::RedisInstInfo *_swig_go_0) {
  swss::RedisInstInfo *arg1 = (swss::RedisInstInfo *) 0 ;
  
  arg1 = *(swss::RedisInstInfo **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_SonicDBInfo_instName_set_swsscommon_728e05b169b08794(swss::SonicDBInfo *_swig_go_0, _gostring_ _swig_go_1) {
  swss::SonicDBInfo *arg1 = (swss::SonicDBInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(swss::SonicDBInfo **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->instName = *arg2;
  
}


_gostring_ _wrap_SonicDBInfo_instName_get_swsscommon_728e05b169b08794(swss::SonicDBInfo *_swig_go_0) {
  swss::SonicDBInfo *arg1 = (swss::SonicDBInfo *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::SonicDBInfo **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->instName);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_SonicDBInfo_dbId_set_swsscommon_728e05b169b08794(swss::SonicDBInfo *_swig_go_0, intgo _swig_go_1) {
  swss::SonicDBInfo *arg1 = (swss::SonicDBInfo *) 0 ;
  int arg2 ;
  
  arg1 = *(swss::SonicDBInfo **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->dbId = arg2;
  
}


intgo _wrap_SonicDBInfo_dbId_get_swsscommon_728e05b169b08794(swss::SonicDBInfo *_swig_go_0) {
  swss::SonicDBInfo *arg1 = (swss::SonicDBInfo *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(swss::SonicDBInfo **)&_swig_go_0; 
  
  result = (int) ((arg1)->dbId);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SonicDBInfo_separator_set_swsscommon_728e05b169b08794(swss::SonicDBInfo *_swig_go_0, _gostring_ _swig_go_1) {
  swss::SonicDBInfo *arg1 = (swss::SonicDBInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(swss::SonicDBInfo **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->separator = *arg2;
  
}


_gostring_ _wrap_SonicDBInfo_separator_get_swsscommon_728e05b169b08794(swss::SonicDBInfo *_swig_go_0) {
  swss::SonicDBInfo *arg1 = (swss::SonicDBInfo *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::SonicDBInfo **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->separator);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


swss::SonicDBInfo *_wrap_new_SonicDBInfo_swsscommon_728e05b169b08794() {
  swss::SonicDBInfo *result = 0 ;
  swss::SonicDBInfo *_swig_go_result;
  
  
  {
    try {
      result = (swss::SonicDBInfo *)new swss::SonicDBInfo();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::SonicDBInfo **)&_swig_go_result = (swss::SonicDBInfo *)result; 
  return _swig_go_result;
}


void _wrap_delete_SonicDBInfo_swsscommon_728e05b169b08794(swss::SonicDBInfo *_swig_go_0) {
  swss::SonicDBInfo *arg1 = (swss::SonicDBInfo *) 0 ;
  
  arg1 = *(swss::SonicDBInfo **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_SonicDBKey_containerName_set_swsscommon_728e05b169b08794(swss::SonicDBKey *_swig_go_0, _gostring_ _swig_go_1) {
  swss::SonicDBKey *arg1 = (swss::SonicDBKey *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(swss::SonicDBKey **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->containerName = *arg2;
  
}


_gostring_ _wrap_SonicDBKey_containerName_get_swsscommon_728e05b169b08794(swss::SonicDBKey *_swig_go_0) {
  swss::SonicDBKey *arg1 = (swss::SonicDBKey *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::SonicDBKey **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->containerName);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_SonicDBKey_netns_set_swsscommon_728e05b169b08794(swss::SonicDBKey *_swig_go_0, _gostring_ _swig_go_1) {
  swss::SonicDBKey *arg1 = (swss::SonicDBKey *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(swss::SonicDBKey **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->netns = *arg2;
  
}


_gostring_ _wrap_SonicDBKey_netns_get_swsscommon_728e05b169b08794(swss::SonicDBKey *_swig_go_0) {
  swss::SonicDBKey *arg1 = (swss::SonicDBKey *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::SonicDBKey **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->netns);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


swss::SonicDBKey *_wrap_new_SonicDBKey__SWIG_0_swsscommon_728e05b169b08794() {
  swss::SonicDBKey *result = 0 ;
  swss::SonicDBKey *_swig_go_result;
  
  
  {
    try {
      result = (swss::SonicDBKey *)new swss::SonicDBKey();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::SonicDBKey **)&_swig_go_result = (swss::SonicDBKey *)result; 
  return _swig_go_result;
}


swss::SonicDBKey *_wrap_new_SonicDBKey__SWIG_1_swsscommon_728e05b169b08794(_gostring_ _swig_go_0) {
  std::string *arg1 = 0 ;
  swss::SonicDBKey *result = 0 ;
  swss::SonicDBKey *_swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  {
    try {
      result = (swss::SonicDBKey *)new swss::SonicDBKey((std::string const &)*arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::SonicDBKey **)&_swig_go_result = (swss::SonicDBKey *)result; 
  return _swig_go_result;
}


bool _wrap_SonicDBKey_isEmpty_swsscommon_728e05b169b08794(swss::SonicDBKey *_swig_go_0) {
  swss::SonicDBKey *arg1 = (swss::SonicDBKey *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::SonicDBKey **)&_swig_go_0; 
  
  {
    try {
      result = (bool)((swss::SonicDBKey const *)arg1)->isEmpty();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_SonicDBKey_toString_swsscommon_728e05b169b08794(swss::SonicDBKey *_swig_go_0) {
  swss::SonicDBKey *arg1 = (swss::SonicDBKey *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::SonicDBKey **)&_swig_go_0; 
  
  {
    try {
      result = ((swss::SonicDBKey const *)arg1)->toString();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


void _wrap_delete_SonicDBKey_swsscommon_728e05b169b08794(swss::SonicDBKey *_swig_go_0) {
  swss::SonicDBKey *arg1 = (swss::SonicDBKey *) 0 ;
  
  arg1 = *(swss::SonicDBKey **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


swss::SonicDBKeyHash *_wrap_new_SonicDBKeyHash_swsscommon_728e05b169b08794() {
  swss::SonicDBKeyHash *result = 0 ;
  swss::SonicDBKeyHash *_swig_go_result;
  
  
  {
    try {
      result = (swss::SonicDBKeyHash *)new swss::SonicDBKeyHash();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::SonicDBKeyHash **)&_swig_go_result = (swss::SonicDBKeyHash *)result; 
  return _swig_go_result;
}


void _wrap_delete_SonicDBKeyHash_swsscommon_728e05b169b08794(swss::SonicDBKeyHash *_swig_go_0) {
  swss::SonicDBKeyHash *arg1 = (swss::SonicDBKeyHash *) 0 ;
  
  arg1 = *(swss::SonicDBKeyHash **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


_gostring_ _wrap_SonicDBConfig_DEFAULT_SONIC_DB_CONFIG_FILE_SonicDBConfig_swsscommon_728e05b169b08794() {
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  
  result = swss::SonicDBConfig::DEFAULT_SONIC_DB_CONFIG_FILE;
  
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


_gostring_ _wrap_SonicDBConfig_DEFAULT_SONIC_DB_GLOBAL_CONFIG_FILE_SonicDBConfig_swsscommon_728e05b169b08794() {
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  
  result = swss::SonicDBConfig::DEFAULT_SONIC_DB_GLOBAL_CONFIG_FILE;
  
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


void _wrap_SonicDBConfig_initialize__SWIG_0_swsscommon_728e05b169b08794(_gostring_ _swig_go_0) {
  std::string *arg1 = 0 ;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  {
    try {
      swss::SonicDBConfig::initialize((std::string const &)*arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_SonicDBConfig_initialize__SWIG_1_swsscommon_728e05b169b08794() {
  {
    try {
      swss::SonicDBConfig::initialize();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_SonicDBConfig_initializeGlobalConfig__SWIG_0_swsscommon_728e05b169b08794(_gostring_ _swig_go_0) {
  std::string *arg1 = 0 ;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  {
    try {
      swss::SonicDBConfig::initializeGlobalConfig((std::string const &)*arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_SonicDBConfig_initializeGlobalConfig__SWIG_1_swsscommon_728e05b169b08794() {
  {
    try {
      swss::SonicDBConfig::initializeGlobalConfig();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_SonicDBConfig_reset_swsscommon_728e05b169b08794() {
  {
    try {
      swss::SonicDBConfig::reset();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_SonicDBConfig_validateNamespace_swsscommon_728e05b169b08794(_gostring_ _swig_go_0) {
  std::string *arg1 = 0 ;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  {
    try {
      swss::SonicDBConfig::validateNamespace((std::string const &)*arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


_gostring_ _wrap_SonicDBConfig_getDbInst__SWIG_0_swsscommon_728e05b169b08794(_gostring_ _swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      result = swss::SonicDBConfig::getDbInst((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_SonicDBConfig_getDbInst__SWIG_1_swsscommon_728e05b169b08794(_gostring_ _swig_go_0, _gostring_ _swig_go_1) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = swss::SonicDBConfig::getDbInst((std::string const &)*arg1,(std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_SonicDBConfig_getDbInst__SWIG_2_swsscommon_728e05b169b08794(_gostring_ _swig_go_0) {
  std::string *arg1 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  {
    try {
      result = swss::SonicDBConfig::getDbInst((std::string const &)*arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_SonicDBConfig_getDbInst__SWIG_3_swsscommon_728e05b169b08794(_gostring_ _swig_go_0, swss::SonicDBKey *_swig_go_1) {
  std::string *arg1 = 0 ;
  swss::SonicDBKey *arg2 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  arg2 = *(swss::SonicDBKey **)&_swig_go_1; 
  
  {
    try {
      result = swss::SonicDBConfig::getDbInst((std::string const &)*arg1,(swss::SonicDBKey const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


intgo _wrap_SonicDBConfig_getDbId__SWIG_0_swsscommon_728e05b169b08794(_gostring_ _swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int result;
  intgo _swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      result = (int)swss::SonicDBConfig::getDbId((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_SonicDBConfig_getDbId__SWIG_1_swsscommon_728e05b169b08794(_gostring_ _swig_go_0, _gostring_ _swig_go_1) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int result;
  intgo _swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = (int)swss::SonicDBConfig::getDbId((std::string const &)*arg1,(std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_SonicDBConfig_getDbId__SWIG_2_swsscommon_728e05b169b08794(_gostring_ _swig_go_0) {
  std::string *arg1 = 0 ;
  int result;
  intgo _swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  {
    try {
      result = (int)swss::SonicDBConfig::getDbId((std::string const &)*arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_SonicDBConfig_getDbId__SWIG_3_swsscommon_728e05b169b08794(_gostring_ _swig_go_0, swss::SonicDBKey *_swig_go_1) {
  std::string *arg1 = 0 ;
  swss::SonicDBKey *arg2 = 0 ;
  int result;
  intgo _swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  arg2 = *(swss::SonicDBKey **)&_swig_go_1; 
  
  {
    try {
      result = (int)swss::SonicDBConfig::getDbId((std::string const &)*arg1,(swss::SonicDBKey const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_SonicDBConfig_getSeparator__SWIG_0_swsscommon_728e05b169b08794(_gostring_ _swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      result = swss::SonicDBConfig::getSeparator((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_SonicDBConfig_getSeparator__SWIG_1_swsscommon_728e05b169b08794(_gostring_ _swig_go_0, _gostring_ _swig_go_1) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = swss::SonicDBConfig::getSeparator((std::string const &)*arg1,(std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_SonicDBConfig_getSeparator__SWIG_2_swsscommon_728e05b169b08794(_gostring_ _swig_go_0) {
  std::string *arg1 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  {
    try {
      result = swss::SonicDBConfig::getSeparator((std::string const &)*arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_SonicDBConfig_getSeparator__SWIG_3_swsscommon_728e05b169b08794(_gostring_ _swig_go_0, swss::SonicDBKey *_swig_go_1) {
  std::string *arg1 = 0 ;
  swss::SonicDBKey *arg2 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  arg2 = *(swss::SonicDBKey **)&_swig_go_1; 
  
  {
    try {
      result = swss::SonicDBConfig::getSeparator((std::string const &)*arg1,(swss::SonicDBKey const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_SonicDBConfig_getSeparator__SWIG_4_swsscommon_728e05b169b08794(intgo _swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  int arg1 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      result = swss::SonicDBConfig::getSeparator(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_SonicDBConfig_getSeparator__SWIG_5_swsscommon_728e05b169b08794(intgo _swig_go_0, _gostring_ _swig_go_1) {
  int arg1 ;
  std::string *arg2 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = swss::SonicDBConfig::getSeparator(arg1,(std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_SonicDBConfig_getSeparator__SWIG_6_swsscommon_728e05b169b08794(intgo _swig_go_0) {
  int arg1 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  {
    try {
      result = swss::SonicDBConfig::getSeparator(arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_SonicDBConfig_getSeparator__SWIG_7_swsscommon_728e05b169b08794(intgo _swig_go_0, swss::SonicDBKey *_swig_go_1) {
  int arg1 ;
  swss::SonicDBKey *arg2 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = *(swss::SonicDBKey **)&_swig_go_1; 
  
  {
    try {
      result = swss::SonicDBConfig::getSeparator(arg1,(swss::SonicDBKey const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_SonicDBConfig_getSeparator__SWIG_8_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  {
    try {
      result = swss::SonicDBConfig::getSeparator((swss::DBConnector const *)arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_SonicDBConfig_getDbSock__SWIG_0_swsscommon_728e05b169b08794(_gostring_ _swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      result = swss::SonicDBConfig::getDbSock((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_SonicDBConfig_getDbSock__SWIG_1_swsscommon_728e05b169b08794(_gostring_ _swig_go_0, _gostring_ _swig_go_1) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = swss::SonicDBConfig::getDbSock((std::string const &)*arg1,(std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_SonicDBConfig_getDbSock__SWIG_2_swsscommon_728e05b169b08794(_gostring_ _swig_go_0) {
  std::string *arg1 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  {
    try {
      result = swss::SonicDBConfig::getDbSock((std::string const &)*arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_SonicDBConfig_getDbSock__SWIG_3_swsscommon_728e05b169b08794(_gostring_ _swig_go_0, swss::SonicDBKey *_swig_go_1) {
  std::string *arg1 = 0 ;
  swss::SonicDBKey *arg2 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  arg2 = *(swss::SonicDBKey **)&_swig_go_1; 
  
  {
    try {
      result = swss::SonicDBConfig::getDbSock((std::string const &)*arg1,(swss::SonicDBKey const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_SonicDBConfig_getDbHostname__SWIG_0_swsscommon_728e05b169b08794(_gostring_ _swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      result = swss::SonicDBConfig::getDbHostname((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_SonicDBConfig_getDbHostname__SWIG_1_swsscommon_728e05b169b08794(_gostring_ _swig_go_0, _gostring_ _swig_go_1) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = swss::SonicDBConfig::getDbHostname((std::string const &)*arg1,(std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_SonicDBConfig_getDbHostname__SWIG_2_swsscommon_728e05b169b08794(_gostring_ _swig_go_0) {
  std::string *arg1 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  {
    try {
      result = swss::SonicDBConfig::getDbHostname((std::string const &)*arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_SonicDBConfig_getDbHostname__SWIG_3_swsscommon_728e05b169b08794(_gostring_ _swig_go_0, swss::SonicDBKey *_swig_go_1) {
  std::string *arg1 = 0 ;
  swss::SonicDBKey *arg2 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  arg2 = *(swss::SonicDBKey **)&_swig_go_1; 
  
  {
    try {
      result = swss::SonicDBConfig::getDbHostname((std::string const &)*arg1,(swss::SonicDBKey const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


intgo _wrap_SonicDBConfig_getDbPort__SWIG_0_swsscommon_728e05b169b08794(_gostring_ _swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int result;
  intgo _swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      result = (int)swss::SonicDBConfig::getDbPort((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_SonicDBConfig_getDbPort__SWIG_1_swsscommon_728e05b169b08794(_gostring_ _swig_go_0, _gostring_ _swig_go_1) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int result;
  intgo _swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = (int)swss::SonicDBConfig::getDbPort((std::string const &)*arg1,(std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_SonicDBConfig_getDbPort__SWIG_2_swsscommon_728e05b169b08794(_gostring_ _swig_go_0) {
  std::string *arg1 = 0 ;
  int result;
  intgo _swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  {
    try {
      result = (int)swss::SonicDBConfig::getDbPort((std::string const &)*arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_SonicDBConfig_getDbPort__SWIG_3_swsscommon_728e05b169b08794(_gostring_ _swig_go_0, swss::SonicDBKey *_swig_go_1) {
  std::string *arg1 = 0 ;
  swss::SonicDBKey *arg2 = 0 ;
  int result;
  intgo _swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  arg2 = *(swss::SonicDBKey **)&_swig_go_1; 
  
  {
    try {
      result = (int)swss::SonicDBConfig::getDbPort((std::string const &)*arg1,(swss::SonicDBKey const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


std::vector< std::string > *_wrap_SonicDBConfig_getNamespaces_swsscommon_728e05b169b08794() {
  std::vector< std::string > result;
  std::vector< std::string > *_swig_go_result;
  
  
  {
    try {
      result = swss::SonicDBConfig::getNamespaces();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::vector< std::string > **)&_swig_go_result = new std::vector< std::string >(result); 
  return _swig_go_result;
}


std::vector< swss::SonicDBKey > *_wrap_SonicDBConfig_getDbKeys_swsscommon_728e05b169b08794() {
  std::vector< swss::SonicDBKey > result;
  std::vector< swss::SonicDBKey > *_swig_go_result;
  
  
  {
    try {
      result = swss::SonicDBConfig::getDbKeys();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::vector< swss::SonicDBKey > **)&_swig_go_result = new std::vector< swss::SonicDBKey >(result); 
  return _swig_go_result;
}


std::vector< std::string > *_wrap_SonicDBConfig_getDbList__SWIG_0_swsscommon_728e05b169b08794(_gostring_ _swig_go_0, _gostring_ _swig_go_1) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > result;
  std::vector< std::string > *_swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = swss::SonicDBConfig::getDbList((std::string const &)*arg1,(std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::vector< std::string > **)&_swig_go_result = new std::vector< std::string >(result); 
  return _swig_go_result;
}


std::vector< std::string > *_wrap_SonicDBConfig_getDbList__SWIG_1_swsscommon_728e05b169b08794(_gostring_ _swig_go_0) {
  std::string *arg1 = 0 ;
  std::vector< std::string > result;
  std::vector< std::string > *_swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  {
    try {
      result = swss::SonicDBConfig::getDbList((std::string const &)*arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::vector< std::string > **)&_swig_go_result = new std::vector< std::string >(result); 
  return _swig_go_result;
}


std::vector< std::string > *_wrap_SonicDBConfig_getDbList__SWIG_2_swsscommon_728e05b169b08794() {
  std::vector< std::string > result;
  std::vector< std::string > *_swig_go_result;
  
  
  {
    try {
      result = swss::SonicDBConfig::getDbList();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::vector< std::string > **)&_swig_go_result = new std::vector< std::string >(result); 
  return _swig_go_result;
}


std::vector< std::string > *_wrap_SonicDBConfig_getDbList__SWIG_3_swsscommon_728e05b169b08794(swss::SonicDBKey *_swig_go_0) {
  swss::SonicDBKey *arg1 = 0 ;
  std::vector< std::string > result;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = *(swss::SonicDBKey **)&_swig_go_0; 
  
  {
    try {
      result = swss::SonicDBConfig::getDbList((swss::SonicDBKey const &)*arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::vector< std::string > **)&_swig_go_result = new std::vector< std::string >(result); 
  return _swig_go_result;
}


bool _wrap_SonicDBConfig_isInit_swsscommon_728e05b169b08794() {
  bool result;
  bool _swig_go_result;
  
  
  {
    try {
      result = (bool)swss::SonicDBConfig::isInit();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_SonicDBConfig_isGlobalInit_swsscommon_728e05b169b08794() {
  bool result;
  bool _swig_go_result;
  
  
  {
    try {
      result = (bool)swss::SonicDBConfig::isGlobalInit();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


std::map< std::string,swss::RedisInstInfo,std::less< std::string > > *_wrap_SonicDBConfig_getInstanceList__SWIG_0_swsscommon_728e05b169b08794(_gostring_ _swig_go_0, _gostring_ _swig_go_1) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::map< std::string,swss::RedisInstInfo,std::less< std::string > > result;
  std::map< std::string,swss::RedisInstInfo,std::less< std::string > > *_swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = swss::SonicDBConfig::getInstanceList((std::string const &)*arg1,(std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::map< std::string,swss::RedisInstInfo,std::less< std::string > > **)&_swig_go_result = new std::map< std::string,swss::RedisInstInfo,std::less< std::string > >(result); 
  return _swig_go_result;
}


std::map< std::string,swss::RedisInstInfo,std::less< std::string > > *_wrap_SonicDBConfig_getInstanceList__SWIG_1_swsscommon_728e05b169b08794(_gostring_ _swig_go_0) {
  std::string *arg1 = 0 ;
  std::map< std::string,swss::RedisInstInfo,std::less< std::string > > result;
  std::map< std::string,swss::RedisInstInfo,std::less< std::string > > *_swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  {
    try {
      result = swss::SonicDBConfig::getInstanceList((std::string const &)*arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::map< std::string,swss::RedisInstInfo,std::less< std::string > > **)&_swig_go_result = new std::map< std::string,swss::RedisInstInfo,std::less< std::string > >(result); 
  return _swig_go_result;
}


std::map< std::string,swss::RedisInstInfo,std::less< std::string > > *_wrap_SonicDBConfig_getInstanceList__SWIG_2_swsscommon_728e05b169b08794() {
  std::map< std::string,swss::RedisInstInfo,std::less< std::string > > result;
  std::map< std::string,swss::RedisInstInfo,std::less< std::string > > *_swig_go_result;
  
  
  {
    try {
      result = swss::SonicDBConfig::getInstanceList();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::map< std::string,swss::RedisInstInfo,std::less< std::string > > **)&_swig_go_result = new std::map< std::string,swss::RedisInstInfo,std::less< std::string > >(result); 
  return _swig_go_result;
}


std::map< std::string,swss::RedisInstInfo,std::less< std::string > > *_wrap_SonicDBConfig_getInstanceList__SWIG_3_swsscommon_728e05b169b08794(swss::SonicDBKey *_swig_go_0) {
  swss::SonicDBKey *arg1 = 0 ;
  std::map< std::string,swss::RedisInstInfo,std::less< std::string > > result;
  std::map< std::string,swss::RedisInstInfo,std::less< std::string > > *_swig_go_result;
  
  arg1 = *(swss::SonicDBKey **)&_swig_go_0; 
  
  {
    try {
      result = swss::SonicDBConfig::getInstanceList((swss::SonicDBKey const &)*arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::map< std::string,swss::RedisInstInfo,std::less< std::string > > **)&_swig_go_result = new std::map< std::string,swss::RedisInstInfo,std::less< std::string > >(result); 
  return _swig_go_result;
}


swss::SonicDBConfig *_wrap_new_SonicDBConfig_swsscommon_728e05b169b08794() {
  swss::SonicDBConfig *result = 0 ;
  swss::SonicDBConfig *_swig_go_result;
  
  
  {
    try {
      result = (swss::SonicDBConfig *)new swss::SonicDBConfig();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::SonicDBConfig **)&_swig_go_result = (swss::SonicDBConfig *)result; 
  return _swig_go_result;
}


void _wrap_delete_SonicDBConfig_swsscommon_728e05b169b08794(swss::SonicDBConfig *_swig_go_0) {
  swss::SonicDBConfig *arg1 = (swss::SonicDBConfig *) 0 ;
  
  arg1 = *(swss::SonicDBConfig **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


_gostring_ _wrap_RedisContext_DEFAULT_UNIXSOCKET_RedisContext_swsscommon_728e05b169b08794() {
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  
  result = swss::RedisContext::DEFAULT_UNIXSOCKET;
  
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


swss::RedisContext *_wrap_new_RedisContext_swsscommon_728e05b169b08794(swss::RedisContext *_swig_go_0) {
  swss::RedisContext *arg1 = 0 ;
  swss::RedisContext *result = 0 ;
  swss::RedisContext *_swig_go_result;
  
  arg1 = *(swss::RedisContext **)&_swig_go_0; 
  
  {
    try {
      result = (swss::RedisContext *)new swss::RedisContext((swss::RedisContext const &)*arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::RedisContext **)&_swig_go_result = (swss::RedisContext *)result; 
  return _swig_go_result;
}


void _wrap_delete_RedisContext_swsscommon_728e05b169b08794(swss::RedisContext *_swig_go_0) {
  swss::RedisContext *arg1 = (swss::RedisContext *) 0 ;
  
  arg1 = *(swss::RedisContext **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


redisContext *_wrap_RedisContext_getContext_swsscommon_728e05b169b08794(swss::RedisContext *_swig_go_0) {
  swss::RedisContext *arg1 = (swss::RedisContext *) 0 ;
  redisContext *result = 0 ;
  redisContext *_swig_go_result;
  
  arg1 = *(swss::RedisContext **)&_swig_go_0; 
  
  {
    try {
      result = (redisContext *)((swss::RedisContext const *)arg1)->getContext();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(redisContext **)&_swig_go_result = (redisContext *)result; 
  return _swig_go_result;
}


void _wrap_RedisContext_setClientName_swsscommon_728e05b169b08794(swss::RedisContext *_swig_go_0, _gostring_ _swig_go_1) {
  swss::RedisContext *arg1 = (swss::RedisContext *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(swss::RedisContext **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      (arg1)->setClientName((std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


_gostring_ _wrap_RedisContext_getClientName_swsscommon_728e05b169b08794(swss::RedisContext *_swig_go_0) {
  swss::RedisContext *arg1 = (swss::RedisContext *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::RedisContext **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->getClientName();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_DBConnector_DEFAULT_UNIXSOCKET_DBConnector_swsscommon_728e05b169b08794() {
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  
  result = swss::DBConnector::DEFAULT_UNIXSOCKET;
  
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


swss::DBConnector *_wrap_new_DBConnector__SWIG_0_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0) {
  swss::DBConnector *arg1 = 0 ;
  swss::DBConnector *result = 0 ;
  swss::DBConnector *_swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  {
    try {
      result = (swss::DBConnector *)new swss::DBConnector((swss::DBConnector const &)*arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::DBConnector **)&_swig_go_result = (swss::DBConnector *)result; 
  return _swig_go_result;
}


swss::DBConnector *_wrap_new_DBConnector__SWIG_1_swsscommon_728e05b169b08794(intgo _swig_go_0, swss::RedisContext *_swig_go_1) {
  int arg1 ;
  swss::RedisContext *arg2 = 0 ;
  swss::DBConnector *result = 0 ;
  swss::DBConnector *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = *(swss::RedisContext **)&_swig_go_1; 
  
  {
    try {
      result = (swss::DBConnector *)new swss::DBConnector(arg1,(swss::RedisContext const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::DBConnector **)&_swig_go_result = (swss::DBConnector *)result; 
  return _swig_go_result;
}


swss::DBConnector *_wrap_new_DBConnector__SWIG_2_swsscommon_728e05b169b08794(intgo _swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, intgo _swig_go_3) {
  int arg1 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  unsigned int arg4 ;
  swss::DBConnector *result = 0 ;
  swss::DBConnector *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (int)_swig_go_2; 
  arg4 = (unsigned int)_swig_go_3; 
  
  {
    try {
      result = (swss::DBConnector *)new swss::DBConnector(arg1,(std::string const &)*arg2,arg3,arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::DBConnector **)&_swig_go_result = (swss::DBConnector *)result; 
  return _swig_go_result;
}


swss::DBConnector *_wrap_new_DBConnector__SWIG_3_swsscommon_728e05b169b08794(intgo _swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  int arg1 ;
  std::string *arg2 = 0 ;
  unsigned int arg3 ;
  swss::DBConnector *result = 0 ;
  swss::DBConnector *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (unsigned int)_swig_go_2; 
  
  {
    try {
      result = (swss::DBConnector *)new swss::DBConnector(arg1,(std::string const &)*arg2,arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::DBConnector **)&_swig_go_result = (swss::DBConnector *)result; 
  return _swig_go_result;
}


swss::DBConnector *_wrap_new_DBConnector__SWIG_4_swsscommon_728e05b169b08794(_gostring_ _swig_go_0, intgo _swig_go_1, bool _swig_go_2) {
  std::string *arg1 = 0 ;
  unsigned int arg2 ;
  bool arg3 ;
  swss::DBConnector *result = 0 ;
  swss::DBConnector *_swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  arg2 = (unsigned int)_swig_go_1; 
  arg3 = (bool)_swig_go_2; 
  
  {
    try {
      result = (swss::DBConnector *)new swss::DBConnector((std::string const &)*arg1,arg2,arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::DBConnector **)&_swig_go_result = (swss::DBConnector *)result; 
  return _swig_go_result;
}


swss::DBConnector *_wrap_new_DBConnector__SWIG_5_swsscommon_728e05b169b08794(_gostring_ _swig_go_0, intgo _swig_go_1) {
  std::string *arg1 = 0 ;
  unsigned int arg2 ;
  swss::DBConnector *result = 0 ;
  swss::DBConnector *_swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  arg2 = (unsigned int)_swig_go_1; 
  
  {
    try {
      result = (swss::DBConnector *)new swss::DBConnector((std::string const &)*arg1,arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::DBConnector **)&_swig_go_result = (swss::DBConnector *)result; 
  return _swig_go_result;
}


swss::DBConnector *_wrap_new_DBConnector__SWIG_6_swsscommon_728e05b169b08794(_gostring_ _swig_go_0, intgo _swig_go_1, bool _swig_go_2, _gostring_ _swig_go_3) {
  std::string *arg1 = 0 ;
  unsigned int arg2 ;
  bool arg3 ;
  std::string *arg4 = 0 ;
  swss::DBConnector *result = 0 ;
  swss::DBConnector *_swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  arg2 = (unsigned int)_swig_go_1; 
  arg3 = (bool)_swig_go_2; 
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  {
    try {
      result = (swss::DBConnector *)new swss::DBConnector((std::string const &)*arg1,arg2,arg3,(std::string const &)*arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::DBConnector **)&_swig_go_result = (swss::DBConnector *)result; 
  return _swig_go_result;
}


swss::DBConnector *_wrap_new_DBConnector__SWIG_7_swsscommon_728e05b169b08794(_gostring_ _swig_go_0, intgo _swig_go_1, bool _swig_go_2, swss::SonicDBKey *_swig_go_3) {
  std::string *arg1 = 0 ;
  unsigned int arg2 ;
  bool arg3 ;
  swss::SonicDBKey *arg4 = 0 ;
  swss::DBConnector *result = 0 ;
  swss::DBConnector *_swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  arg2 = (unsigned int)_swig_go_1; 
  arg3 = (bool)_swig_go_2; 
  arg4 = *(swss::SonicDBKey **)&_swig_go_3; 
  
  {
    try {
      result = (swss::DBConnector *)new swss::DBConnector((std::string const &)*arg1,arg2,arg3,(swss::SonicDBKey const &)*arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::DBConnector **)&_swig_go_result = (swss::DBConnector *)result; 
  return _swig_go_result;
}


intgo _wrap_DBConnector_getDbId_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  {
    try {
      result = (int)((swss::DBConnector const *)arg1)->getDbId();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_DBConnector_getDbName_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  {
    try {
      result = ((swss::DBConnector const *)arg1)->getDbName();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_DBConnector_getNamespace_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  {
    try {
      result = ((swss::DBConnector const *)arg1)->getNamespace();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


swss::SonicDBKey *_wrap_DBConnector_getDBKey_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  swss::SonicDBKey result;
  swss::SonicDBKey *_swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  {
    try {
      result = ((swss::DBConnector const *)arg1)->getDBKey();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::SonicDBKey **)&_swig_go_result = new swss::SonicDBKey(result); 
  return _swig_go_result;
}


void _wrap_DBConnector_Xselect_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  {
    try {
      swss::DBConnector::select(arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


swss::DBConnector *_wrap_DBConnector_newConnector_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0, intgo _swig_go_1) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  unsigned int arg2 ;
  swss::DBConnector *result = 0 ;
  swss::DBConnector *_swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  {
    try {
      result = (swss::DBConnector *)((swss::DBConnector const *)arg1)->newConnector(arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::DBConnector **)&_swig_go_result = (swss::DBConnector *)result; 
  return _swig_go_result;
}


swss::PubSub *_wrap_DBConnector_pubsub_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  swss::PubSub *result = 0 ;
  swss::PubSub *_swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  {
    try {
      result = (swss::PubSub *)(arg1)->pubsub();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::PubSub **)&_swig_go_result = (swss::PubSub *)result; 
  return _swig_go_result;
}


long long _wrap_DBConnector_delete__SWIG_0_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0, _gostring_ _swig_go_1) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  std::string *arg2 = 0 ;
  int64_t result;
  long long _swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = (int64_t)(arg1)->del((std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_DBConnector_exists_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0, _gostring_ _swig_go_1) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = (bool)(arg1)->exists((std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_DBConnector_hdel__SWIG_0_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int64_t result;
  long long _swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      result = (int64_t)(arg1)->hdel((std::string const &)*arg2,(std::string const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_DBConnector_hdel__SWIG_1_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0, _gostring_ _swig_go_1, std::vector< std::string > *_swig_go_2) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > *arg3 = 0 ;
  int64_t result;
  long long _swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = *(std::vector< std::string > **)&_swig_go_2; 
  
  {
    try {
      result = (int64_t)(arg1)->hdel((std::string const &)*arg2,(std::vector< std::string > const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_DBConnector_delete__SWIG_1_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0, std::vector< std::string > *_swig_go_1) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  arg2 = *(std::vector< std::string > **)&_swig_go_1; 
  
  {
    try {
      (arg1)->del((std::vector< std::string > const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


std::vector< std::string > *_wrap_DBConnector_keys_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0, _gostring_ _swig_go_1) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > result;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = (arg1)->keys((std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::vector< std::string > **)&_swig_go_result = new std::vector< std::string >(result); 
  return _swig_go_result;
}


std::pair< int,std::vector< std::string > > *_wrap_DBConnector_scan__SWIG_0_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0, intgo _swig_go_1, _gostring_ _swig_go_2, intgo _swig_go_3) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  uint32_t arg4 ;
  SwigValueWrapper< std::pair< int,std::vector< std::string > > > result;
  std::pair< int,std::vector< std::string > > *_swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';
  
  arg4 = (uint32_t)_swig_go_3; 
  
  {
    try {
      result = (arg1)->scan(arg2,(char const *)arg3,arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::pair< int,std::vector< std::string > > **)&_swig_go_result = new std::pair< int,std::vector< std::string > >(result); 
  free(arg3); 
  return _swig_go_result;
}


std::pair< int,std::vector< std::string > > *_wrap_DBConnector_scan__SWIG_1_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0, intgo _swig_go_1, _gostring_ _swig_go_2) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  SwigValueWrapper< std::pair< int,std::vector< std::string > > > result;
  std::pair< int,std::vector< std::string > > *_swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';
  
  
  {
    try {
      result = (arg1)->scan(arg2,(char const *)arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::pair< int,std::vector< std::string > > **)&_swig_go_result = new std::pair< int,std::vector< std::string > >(result); 
  free(arg3); 
  return _swig_go_result;
}


std::pair< int,std::vector< std::string > > *_wrap_DBConnector_scan__SWIG_2_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0, intgo _swig_go_1) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  int arg2 ;
  SwigValueWrapper< std::pair< int,std::vector< std::string > > > result;
  std::pair< int,std::vector< std::string > > *_swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  {
    try {
      result = (arg1)->scan(arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::pair< int,std::vector< std::string > > **)&_swig_go_result = new std::pair< int,std::vector< std::string > >(result); 
  return _swig_go_result;
}


std::pair< int,std::vector< std::string > > *_wrap_DBConnector_scan__SWIG_3_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  SwigValueWrapper< std::pair< int,std::vector< std::string > > > result;
  std::pair< int,std::vector< std::string > > *_swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->scan();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::pair< int,std::vector< std::string > > **)&_swig_go_result = new std::pair< int,std::vector< std::string > >(result); 
  return _swig_go_result;
}


bool _wrap_DBConnector_set__SWIG_0_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      result = (bool)(arg1)->set((std::string const &)*arg2,(std::string const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_DBConnector_set__SWIG_1_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (int)_swig_go_2; 
  
  {
    try {
      result = (bool)(arg1)->set((std::string const &)*arg2,arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_DBConnector_hset_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  {
    try {
      (arg1)->hset((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_DBConnector_hmset_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0, std::unordered_map< std::string,std::vector< std::pair< std::string,std::string > > > *_swig_go_1) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  std::unordered_map< std::string,std::vector< std::pair< std::string,std::string > > > *arg2 = 0 ;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  arg2 = *(std::unordered_map< std::string,std::vector< std::pair< std::string,std::string > > > **)&_swig_go_1; 
  
  {
    try {
      (arg1)->hmset((std::unordered_map< std::string,std::vector< std::pair< std::string,std::string > > > const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


std::shared_ptr< std::string > *_wrap_DBConnector_get_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0, _gostring_ _swig_go_1) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< std::shared_ptr< std::string > > result;
  std::shared_ptr< std::string > *_swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = (arg1)->get((std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::shared_ptr< std::string > **)&_swig_go_result = new std::shared_ptr< std::string >(result); 
  return _swig_go_result;
}


std::shared_ptr< std::string > *_wrap_DBConnector_hget_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  SwigValueWrapper< std::shared_ptr< std::string > > result;
  std::shared_ptr< std::string > *_swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      result = (arg1)->hget((std::string const &)*arg2,(std::string const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::shared_ptr< std::string > **)&_swig_go_result = new std::shared_ptr< std::string >(result); 
  return _swig_go_result;
}


bool _wrap_DBConnector_hexists_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      result = (bool)(arg1)->hexists((std::string const &)*arg2,(std::string const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_DBConnector_incr_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0, _gostring_ _swig_go_1) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  std::string *arg2 = 0 ;
  int64_t result;
  long long _swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = (int64_t)(arg1)->incr((std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_DBConnector_decr_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0, _gostring_ _swig_go_1) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  std::string *arg2 = 0 ;
  int64_t result;
  long long _swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = (int64_t)(arg1)->decr((std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_DBConnector_rpush_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int64_t result;
  long long _swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      result = (int64_t)(arg1)->rpush((std::string const &)*arg2,(std::string const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


std::shared_ptr< std::string > *_wrap_DBConnector_blpop_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  SwigValueWrapper< std::shared_ptr< std::string > > result;
  std::shared_ptr< std::string > *_swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (int)_swig_go_2; 
  
  {
    try {
      result = (arg1)->blpop((std::string const &)*arg2,arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::shared_ptr< std::string > **)&_swig_go_result = new std::shared_ptr< std::string >(result); 
  return _swig_go_result;
}


void _wrap_DBConnector_subscribe_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0, _gostring_ _swig_go_1) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      (arg1)->subscribe((std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_DBConnector_psubscribe_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0, _gostring_ _swig_go_1) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      (arg1)->psubscribe((std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_DBConnector_punsubscribe_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0, _gostring_ _swig_go_1) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      (arg1)->punsubscribe((std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


long long _wrap_DBConnector_publish_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int64_t result;
  long long _swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      result = (int64_t)(arg1)->publish((std::string const &)*arg2,(std::string const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_DBConnector_config_set_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      (arg1)->config_set((std::string const &)*arg2,(std::string const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


bool _wrap_DBConnector_flushdb_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  {
    try {
      result = (bool)(arg1)->flushdb();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


std::map< std::string,std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > >,std::less< std::string > > *_wrap_DBConnector_getall_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  std::map< std::string,std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > >,std::less< std::string > > result;
  std::map< std::string,std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > >,std::less< std::string > > *_swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->getall();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::map< std::string,std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > >,std::less< std::string > > **)&_swig_go_result = new std::map< std::string,std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > >,std::less< std::string > >(result); 
  return _swig_go_result;
}


std::map< std::string,std::string,std::less< std::string > > *_wrap_DBConnector_hgetall_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0, _gostring_ _swig_go_1) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  std::string *arg2 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > result;
  std::map< std::string,std::string,std::less< std::string > > *_swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = (arg1)->SWIGTEMPLATEDISAMBIGUATOR hgetall< std::map< std::string,std::string > >((std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::map< std::string,std::string,std::less< std::string > > **)&_swig_go_result = new std::map< std::string,std::string,std::less< std::string > >(result); 
  return _swig_go_result;
}


void _wrap_delete_DBConnector_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


redisContext *_wrap_DBConnector_getContext_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  redisContext *result = 0 ;
  redisContext *_swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  swss::RedisContext *swig_b0 = (swss::RedisContext *)arg1;
  result = (redisContext *)((swss::RedisContext const *)swig_b0)->getContext();
  *(redisContext **)&_swig_go_result = (redisContext *)result; 
  return _swig_go_result;
}


void _wrap_DBConnector_setClientName_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0, _gostring_ _swig_go_1) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  swss::RedisContext *swig_b0 = (swss::RedisContext *)arg1;
  (swig_b0)->setClientName((std::string const &)*arg2);
  
}


_gostring_ _wrap_DBConnector_getClientName_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  swss::RedisContext *swig_b0 = (swss::RedisContext *)arg1;
  result = (swig_b0)->getClientName();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


swss::SonicV2Connector_Native *_wrap_new_SonicV2Connector_Native__SWIG_0_swsscommon_728e05b169b08794(bool _swig_go_0, _gostring_ _swig_go_1) {
  bool arg1 ;
  char *arg2 = (char *) 0 ;
  swss::SonicV2Connector_Native *result = 0 ;
  swss::SonicV2Connector_Native *_swig_go_result;
  
  arg1 = (bool)_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  {
    try {
      result = (swss::SonicV2Connector_Native *)new swss::SonicV2Connector_Native(arg1,(char const *)arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::SonicV2Connector_Native **)&_swig_go_result = (swss::SonicV2Connector_Native *)result; 
  free(arg2); 
  return _swig_go_result;
}


swss::SonicV2Connector_Native *_wrap_new_SonicV2Connector_Native__SWIG_1_swsscommon_728e05b169b08794(bool _swig_go_0) {
  bool arg1 ;
  swss::SonicV2Connector_Native *result = 0 ;
  swss::SonicV2Connector_Native *_swig_go_result;
  
  arg1 = (bool)_swig_go_0; 
  
  {
    try {
      result = (swss::SonicV2Connector_Native *)new swss::SonicV2Connector_Native(arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::SonicV2Connector_Native **)&_swig_go_result = (swss::SonicV2Connector_Native *)result; 
  return _swig_go_result;
}


swss::SonicV2Connector_Native *_wrap_new_SonicV2Connector_Native__SWIG_2_swsscommon_728e05b169b08794() {
  swss::SonicV2Connector_Native *result = 0 ;
  swss::SonicV2Connector_Native *_swig_go_result;
  
  
  {
    try {
      result = (swss::SonicV2Connector_Native *)new swss::SonicV2Connector_Native();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::SonicV2Connector_Native **)&_swig_go_result = (swss::SonicV2Connector_Native *)result; 
  return _swig_go_result;
}


_gostring_ _wrap_SonicV2Connector_Native_getNamespace_swsscommon_728e05b169b08794(swss::SonicV2Connector_Native *_swig_go_0) {
  swss::SonicV2Connector_Native *arg1 = (swss::SonicV2Connector_Native *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::SonicV2Connector_Native **)&_swig_go_0; 
  
  {
    try {
      result = ((swss::SonicV2Connector_Native const *)arg1)->getNamespace();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


void _wrap_SonicV2Connector_Native_connect__SWIG_0_swsscommon_728e05b169b08794(swss::SonicV2Connector_Native *_swig_go_0, _gostring_ _swig_go_1, bool _swig_go_2) {
  swss::SonicV2Connector_Native *arg1 = (swss::SonicV2Connector_Native *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = *(swss::SonicV2Connector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (bool)_swig_go_2; 
  
  {
    try {
      (arg1)->connect((std::string const &)*arg2,arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_SonicV2Connector_Native_connect__SWIG_1_swsscommon_728e05b169b08794(swss::SonicV2Connector_Native *_swig_go_0, _gostring_ _swig_go_1) {
  swss::SonicV2Connector_Native *arg1 = (swss::SonicV2Connector_Native *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(swss::SonicV2Connector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      (arg1)->connect((std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_SonicV2Connector_Native_close__SWIG_0_swsscommon_728e05b169b08794(swss::SonicV2Connector_Native *_swig_go_0, _gostring_ _swig_go_1) {
  swss::SonicV2Connector_Native *arg1 = (swss::SonicV2Connector_Native *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(swss::SonicV2Connector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      (arg1)->close((std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_SonicV2Connector_Native_close__SWIG_1_swsscommon_728e05b169b08794(swss::SonicV2Connector_Native *_swig_go_0) {
  swss::SonicV2Connector_Native *arg1 = (swss::SonicV2Connector_Native *) 0 ;
  
  arg1 = *(swss::SonicV2Connector_Native **)&_swig_go_0; 
  
  {
    try {
      (arg1)->close();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


std::vector< std::string > *_wrap_SonicV2Connector_Native_get_db_list_swsscommon_728e05b169b08794(swss::SonicV2Connector_Native *_swig_go_0) {
  swss::SonicV2Connector_Native *arg1 = (swss::SonicV2Connector_Native *) 0 ;
  std::vector< std::string > result;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = *(swss::SonicV2Connector_Native **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->get_db_list();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::vector< std::string > **)&_swig_go_result = new std::vector< std::string >(result); 
  return _swig_go_result;
}


intgo _wrap_SonicV2Connector_Native_get_dbid_swsscommon_728e05b169b08794(swss::SonicV2Connector_Native *_swig_go_0, _gostring_ _swig_go_1) {
  swss::SonicV2Connector_Native *arg1 = (swss::SonicV2Connector_Native *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(swss::SonicV2Connector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = (int)(arg1)->get_dbid((std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_SonicV2Connector_Native_get_db_separator_swsscommon_728e05b169b08794(swss::SonicV2Connector_Native *_swig_go_0, _gostring_ _swig_go_1) {
  swss::SonicV2Connector_Native *arg1 = (swss::SonicV2Connector_Native *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::SonicV2Connector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = (arg1)->get_db_separator((std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


swss::DBConnector *_wrap_SonicV2Connector_Native_get_redis_client_swsscommon_728e05b169b08794(swss::SonicV2Connector_Native *_swig_go_0, _gostring_ _swig_go_1) {
  swss::SonicV2Connector_Native *arg1 = (swss::SonicV2Connector_Native *) 0 ;
  std::string *arg2 = 0 ;
  swss::DBConnector *result = 0 ;
  swss::DBConnector *_swig_go_result;
  
  arg1 = *(swss::SonicV2Connector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = (swss::DBConnector *) &(arg1)->get_redis_client((std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::DBConnector **)&_swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_SonicV2Connector_Native_publish_swsscommon_728e05b169b08794(swss::SonicV2Connector_Native *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3) {
  swss::SonicV2Connector_Native *arg1 = (swss::SonicV2Connector_Native *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int64_t result;
  long long _swig_go_result;
  
  arg1 = *(swss::SonicV2Connector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  {
    try {
      result = (int64_t)(arg1)->publish((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_SonicV2Connector_Native_exists_swsscommon_728e05b169b08794(swss::SonicV2Connector_Native *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  swss::SonicV2Connector_Native *arg1 = (swss::SonicV2Connector_Native *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::SonicV2Connector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      result = (bool)(arg1)->exists((std::string const &)*arg2,(std::string const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


std::vector< std::string > *_wrap_SonicV2Connector_Native_keys__SWIG_0_swsscommon_728e05b169b08794(swss::SonicV2Connector_Native *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, bool _swig_go_3) {
  swss::SonicV2Connector_Native *arg1 = (swss::SonicV2Connector_Native *) 0 ;
  std::string *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  std::vector< std::string > result;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = *(swss::SonicV2Connector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';
  
  arg4 = (bool)_swig_go_3; 
  
  {
    try {
      result = (arg1)->keys((std::string const &)*arg2,(char const *)arg3,arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::vector< std::string > **)&_swig_go_result = new std::vector< std::string >(result); 
  free(arg3); 
  return _swig_go_result;
}


std::vector< std::string > *_wrap_SonicV2Connector_Native_keys__SWIG_1_swsscommon_728e05b169b08794(swss::SonicV2Connector_Native *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  swss::SonicV2Connector_Native *arg1 = (swss::SonicV2Connector_Native *) 0 ;
  std::string *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  std::vector< std::string > result;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = *(swss::SonicV2Connector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';
  
  
  {
    try {
      result = (arg1)->keys((std::string const &)*arg2,(char const *)arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::vector< std::string > **)&_swig_go_result = new std::vector< std::string >(result); 
  free(arg3); 
  return _swig_go_result;
}


std::vector< std::string > *_wrap_SonicV2Connector_Native_keys__SWIG_2_swsscommon_728e05b169b08794(swss::SonicV2Connector_Native *_swig_go_0, _gostring_ _swig_go_1) {
  swss::SonicV2Connector_Native *arg1 = (swss::SonicV2Connector_Native *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > result;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = *(swss::SonicV2Connector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = (arg1)->keys((std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::vector< std::string > **)&_swig_go_result = new std::vector< std::string >(result); 
  return _swig_go_result;
}


std::pair< int,std::vector< std::string > > *_wrap_SonicV2Connector_Native_scan__SWIG_0_swsscommon_728e05b169b08794(swss::SonicV2Connector_Native *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, _gostring_ _swig_go_3, intgo _swig_go_4) {
  swss::SonicV2Connector_Native *arg1 = (swss::SonicV2Connector_Native *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  uint32_t arg5 ;
  SwigValueWrapper< std::pair< int,std::vector< std::string > > > result;
  std::pair< int,std::vector< std::string > > *_swig_go_result;
  
  arg1 = *(swss::SonicV2Connector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (int)_swig_go_2; 
  
  arg4 = (char *)malloc(_swig_go_3.n + 1);
  memcpy(arg4, _swig_go_3.p, _swig_go_3.n);
  arg4[_swig_go_3.n] = '\0';
  
  arg5 = (uint32_t)_swig_go_4; 
  
  {
    try {
      result = (arg1)->scan((std::string const &)*arg2,arg3,(char const *)arg4,arg5);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::pair< int,std::vector< std::string > > **)&_swig_go_result = new std::pair< int,std::vector< std::string > >(result); 
  free(arg4); 
  return _swig_go_result;
}


std::pair< int,std::vector< std::string > > *_wrap_SonicV2Connector_Native_scan__SWIG_1_swsscommon_728e05b169b08794(swss::SonicV2Connector_Native *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, _gostring_ _swig_go_3) {
  swss::SonicV2Connector_Native *arg1 = (swss::SonicV2Connector_Native *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  SwigValueWrapper< std::pair< int,std::vector< std::string > > > result;
  std::pair< int,std::vector< std::string > > *_swig_go_result;
  
  arg1 = *(swss::SonicV2Connector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (int)_swig_go_2; 
  
  arg4 = (char *)malloc(_swig_go_3.n + 1);
  memcpy(arg4, _swig_go_3.p, _swig_go_3.n);
  arg4[_swig_go_3.n] = '\0';
  
  
  {
    try {
      result = (arg1)->scan((std::string const &)*arg2,arg3,(char const *)arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::pair< int,std::vector< std::string > > **)&_swig_go_result = new std::pair< int,std::vector< std::string > >(result); 
  free(arg4); 
  return _swig_go_result;
}


std::pair< int,std::vector< std::string > > *_wrap_SonicV2Connector_Native_scan__SWIG_2_swsscommon_728e05b169b08794(swss::SonicV2Connector_Native *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  swss::SonicV2Connector_Native *arg1 = (swss::SonicV2Connector_Native *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  SwigValueWrapper< std::pair< int,std::vector< std::string > > > result;
  std::pair< int,std::vector< std::string > > *_swig_go_result;
  
  arg1 = *(swss::SonicV2Connector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (int)_swig_go_2; 
  
  {
    try {
      result = (arg1)->scan((std::string const &)*arg2,arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::pair< int,std::vector< std::string > > **)&_swig_go_result = new std::pair< int,std::vector< std::string > >(result); 
  return _swig_go_result;
}


std::pair< int,std::vector< std::string > > *_wrap_SonicV2Connector_Native_scan__SWIG_3_swsscommon_728e05b169b08794(swss::SonicV2Connector_Native *_swig_go_0, _gostring_ _swig_go_1) {
  swss::SonicV2Connector_Native *arg1 = (swss::SonicV2Connector_Native *) 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< std::pair< int,std::vector< std::string > > > result;
  std::pair< int,std::vector< std::string > > *_swig_go_result;
  
  arg1 = *(swss::SonicV2Connector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = (arg1)->scan((std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::pair< int,std::vector< std::string > > **)&_swig_go_result = new std::pair< int,std::vector< std::string > >(result); 
  return _swig_go_result;
}


std::shared_ptr< std::string > *_wrap_SonicV2Connector_Native_get__SWIG_0_swsscommon_728e05b169b08794(swss::SonicV2Connector_Native *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3, bool _swig_go_4) {
  swss::SonicV2Connector_Native *arg1 = (swss::SonicV2Connector_Native *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool arg5 ;
  SwigValueWrapper< std::shared_ptr< std::string > > result;
  std::shared_ptr< std::string > *_swig_go_result;
  
  arg1 = *(swss::SonicV2Connector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  arg5 = (bool)_swig_go_4; 
  
  {
    try {
      result = (arg1)->get((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::shared_ptr< std::string > **)&_swig_go_result = new std::shared_ptr< std::string >(result); 
  return _swig_go_result;
}


std::shared_ptr< std::string > *_wrap_SonicV2Connector_Native_get__SWIG_1_swsscommon_728e05b169b08794(swss::SonicV2Connector_Native *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3) {
  swss::SonicV2Connector_Native *arg1 = (swss::SonicV2Connector_Native *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  SwigValueWrapper< std::shared_ptr< std::string > > result;
  std::shared_ptr< std::string > *_swig_go_result;
  
  arg1 = *(swss::SonicV2Connector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  {
    try {
      result = (arg1)->get((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::shared_ptr< std::string > **)&_swig_go_result = new std::shared_ptr< std::string >(result); 
  return _swig_go_result;
}


bool _wrap_SonicV2Connector_Native_hexists_swsscommon_728e05b169b08794(swss::SonicV2Connector_Native *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3) {
  swss::SonicV2Connector_Native *arg1 = (swss::SonicV2Connector_Native *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::SonicV2Connector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  {
    try {
      result = (bool)(arg1)->hexists((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


std::map< std::string,std::string,std::less< std::string > > *_wrap_SonicV2Connector_Native_get_all__SWIG_0_swsscommon_728e05b169b08794(swss::SonicV2Connector_Native *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, bool _swig_go_3) {
  swss::SonicV2Connector_Native *arg1 = (swss::SonicV2Connector_Native *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  std::map< std::string,std::string,std::less< std::string > > result;
  std::map< std::string,std::string,std::less< std::string > > *_swig_go_result;
  
  arg1 = *(swss::SonicV2Connector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  arg4 = (bool)_swig_go_3; 
  
  {
    try {
      result = (arg1)->get_all((std::string const &)*arg2,(std::string const &)*arg3,arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::map< std::string,std::string,std::less< std::string > > **)&_swig_go_result = new std::map< std::string,std::string,std::less< std::string > >(result); 
  return _swig_go_result;
}


std::map< std::string,std::string,std::less< std::string > > *_wrap_SonicV2Connector_Native_get_all__SWIG_1_swsscommon_728e05b169b08794(swss::SonicV2Connector_Native *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  swss::SonicV2Connector_Native *arg1 = (swss::SonicV2Connector_Native *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > result;
  std::map< std::string,std::string,std::less< std::string > > *_swig_go_result;
  
  arg1 = *(swss::SonicV2Connector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      result = (arg1)->get_all((std::string const &)*arg2,(std::string const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::map< std::string,std::string,std::less< std::string > > **)&_swig_go_result = new std::map< std::string,std::string,std::less< std::string > >(result); 
  return _swig_go_result;
}


void _wrap_SonicV2Connector_Native_hmset_swsscommon_728e05b169b08794(swss::SonicV2Connector_Native *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, std::map< std::string,std::string,std::less< std::string > > *_swig_go_3) {
  swss::SonicV2Connector_Native *arg1 = (swss::SonicV2Connector_Native *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg4 = 0 ;
  
  arg1 = *(swss::SonicV2Connector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  arg4 = *(std::map< std::string,std::string,std::less< std::string > > **)&_swig_go_3; 
  
  {
    try {
      (arg1)->hmset((std::string const &)*arg2,(std::string const &)*arg3,(std::map< std::string,std::string,std::less< std::string > > const &)*arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


long long _wrap_SonicV2Connector_Native_set__SWIG_0_swsscommon_728e05b169b08794(swss::SonicV2Connector_Native *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3, _gostring_ _swig_go_4, bool _swig_go_5) {
  swss::SonicV2Connector_Native *arg1 = (swss::SonicV2Connector_Native *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  bool arg6 ;
  int64_t result;
  long long _swig_go_result;
  
  arg1 = *(swss::SonicV2Connector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(_swig_go_4.p, _swig_go_4.n);
  arg5 = &arg5_str;
  
  arg6 = (bool)_swig_go_5; 
  
  {
    try {
      result = (int64_t)(arg1)->set((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,arg6);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_SonicV2Connector_Native_set__SWIG_1_swsscommon_728e05b169b08794(swss::SonicV2Connector_Native *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3, _gostring_ _swig_go_4) {
  swss::SonicV2Connector_Native *arg1 = (swss::SonicV2Connector_Native *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  int64_t result;
  long long _swig_go_result;
  
  arg1 = *(swss::SonicV2Connector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(_swig_go_4.p, _swig_go_4.n);
  arg5 = &arg5_str;
  
  
  {
    try {
      result = (int64_t)(arg1)->set((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_SonicV2Connector_Native_delete__SWIG_0_swsscommon_728e05b169b08794(swss::SonicV2Connector_Native *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, bool _swig_go_3) {
  swss::SonicV2Connector_Native *arg1 = (swss::SonicV2Connector_Native *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  int64_t result;
  long long _swig_go_result;
  
  arg1 = *(swss::SonicV2Connector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  arg4 = (bool)_swig_go_3; 
  
  {
    try {
      result = (int64_t)(arg1)->del((std::string const &)*arg2,(std::string const &)*arg3,arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_SonicV2Connector_Native_delete__SWIG_1_swsscommon_728e05b169b08794(swss::SonicV2Connector_Native *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  swss::SonicV2Connector_Native *arg1 = (swss::SonicV2Connector_Native *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int64_t result;
  long long _swig_go_result;
  
  arg1 = *(swss::SonicV2Connector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      result = (int64_t)(arg1)->del((std::string const &)*arg2,(std::string const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SonicV2Connector_Native_delete_all_by_pattern_swsscommon_728e05b169b08794(swss::SonicV2Connector_Native *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  swss::SonicV2Connector_Native *arg1 = (swss::SonicV2Connector_Native *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = *(swss::SonicV2Connector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      (arg1)->delete_all_by_pattern((std::string const &)*arg2,(std::string const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_delete_SonicV2Connector_Native_swsscommon_728e05b169b08794(swss::SonicV2Connector_Native *_swig_go_0) {
  swss::SonicV2Connector_Native *arg1 = (swss::SonicV2Connector_Native *) 0 ;
  
  arg1 = *(swss::SonicV2Connector_Native **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


swss::PubSub *_wrap_new_PubSub_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  swss::PubSub *result = 0 ;
  swss::PubSub *_swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  {
    try {
      result = (swss::PubSub *)new swss::PubSub(arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::PubSub **)&_swig_go_result = (swss::PubSub *)result; 
  return _swig_go_result;
}


std::map< std::string,std::string,std::less< std::string > > *_wrap_PubSub_get_message__SWIG_0_swsscommon_728e05b169b08794(swss::PubSub *_swig_go_0, double _swig_go_1, bool _swig_go_2) {
  swss::PubSub *arg1 = (swss::PubSub *) 0 ;
  double arg2 ;
  bool arg3 ;
  std::map< std::string,std::string,std::less< std::string > > result;
  std::map< std::string,std::string,std::less< std::string > > *_swig_go_result;
  
  arg1 = *(swss::PubSub **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  arg3 = (bool)_swig_go_2; 
  
  {
    try {
      result = (arg1)->get_message(arg2,arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::map< std::string,std::string,std::less< std::string > > **)&_swig_go_result = new std::map< std::string,std::string,std::less< std::string > >(result); 
  return _swig_go_result;
}


std::map< std::string,std::string,std::less< std::string > > *_wrap_PubSub_get_message__SWIG_1_swsscommon_728e05b169b08794(swss::PubSub *_swig_go_0, double _swig_go_1) {
  swss::PubSub *arg1 = (swss::PubSub *) 0 ;
  double arg2 ;
  std::map< std::string,std::string,std::less< std::string > > result;
  std::map< std::string,std::string,std::less< std::string > > *_swig_go_result;
  
  arg1 = *(swss::PubSub **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  {
    try {
      result = (arg1)->get_message(arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::map< std::string,std::string,std::less< std::string > > **)&_swig_go_result = new std::map< std::string,std::string,std::less< std::string > >(result); 
  return _swig_go_result;
}


std::map< std::string,std::string,std::less< std::string > > *_wrap_PubSub_get_message__SWIG_2_swsscommon_728e05b169b08794(swss::PubSub *_swig_go_0) {
  swss::PubSub *arg1 = (swss::PubSub *) 0 ;
  std::map< std::string,std::string,std::less< std::string > > result;
  std::map< std::string,std::string,std::less< std::string > > *_swig_go_result;
  
  arg1 = *(swss::PubSub **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->get_message();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::map< std::string,std::string,std::less< std::string > > **)&_swig_go_result = new std::map< std::string,std::string,std::less< std::string > >(result); 
  return _swig_go_result;
}


std::map< std::string,std::string,std::less< std::string > > *_wrap_PubSub_listen_message__SWIG_0_swsscommon_728e05b169b08794(swss::PubSub *_swig_go_0, bool _swig_go_1) {
  swss::PubSub *arg1 = (swss::PubSub *) 0 ;
  bool arg2 ;
  std::map< std::string,std::string,std::less< std::string > > result;
  std::map< std::string,std::string,std::less< std::string > > *_swig_go_result;
  
  arg1 = *(swss::PubSub **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  {
    try {
      result = (arg1)->listen_message(arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::map< std::string,std::string,std::less< std::string > > **)&_swig_go_result = new std::map< std::string,std::string,std::less< std::string > >(result); 
  return _swig_go_result;
}


std::map< std::string,std::string,std::less< std::string > > *_wrap_PubSub_listen_message__SWIG_1_swsscommon_728e05b169b08794(swss::PubSub *_swig_go_0) {
  swss::PubSub *arg1 = (swss::PubSub *) 0 ;
  std::map< std::string,std::string,std::less< std::string > > result;
  std::map< std::string,std::string,std::less< std::string > > *_swig_go_result;
  
  arg1 = *(swss::PubSub **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->listen_message();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::map< std::string,std::string,std::less< std::string > > **)&_swig_go_result = new std::map< std::string,std::string,std::less< std::string > >(result); 
  return _swig_go_result;
}


void _wrap_PubSub_psubscribe_swsscommon_728e05b169b08794(swss::PubSub *_swig_go_0, _gostring_ _swig_go_1) {
  swss::PubSub *arg1 = (swss::PubSub *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(swss::PubSub **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      (arg1)->psubscribe((std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_PubSub_punsubscribe_swsscommon_728e05b169b08794(swss::PubSub *_swig_go_0, _gostring_ _swig_go_1) {
  swss::PubSub *arg1 = (swss::PubSub *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(swss::PubSub **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      (arg1)->punsubscribe((std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


long long _wrap_PubSub_readData_swsscommon_728e05b169b08794(swss::PubSub *_swig_go_0) {
  swss::PubSub *arg1 = (swss::PubSub *) 0 ;
  uint64_t result;
  long long _swig_go_result;
  
  arg1 = *(swss::PubSub **)&_swig_go_0; 
  
  {
    try {
      result = (uint64_t)(arg1)->readData();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_PubSub_hasData_swsscommon_728e05b169b08794(swss::PubSub *_swig_go_0) {
  swss::PubSub *arg1 = (swss::PubSub *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::PubSub **)&_swig_go_0; 
  
  {
    try {
      result = (bool)(arg1)->hasData();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_PubSub_hasCachedData_swsscommon_728e05b169b08794(swss::PubSub *_swig_go_0) {
  swss::PubSub *arg1 = (swss::PubSub *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::PubSub **)&_swig_go_0; 
  
  {
    try {
      result = (bool)(arg1)->hasCachedData();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_PubSub_swsscommon_728e05b169b08794(swss::PubSub *_swig_go_0) {
  swss::PubSub *arg1 = (swss::PubSub *) 0 ;
  
  arg1 = *(swss::PubSub **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


_gostring_ _wrap_DELETED_KEY_SEPARATOR_get_swsscommon_728e05b169b08794() {
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  
  result = (std::string *) &swss::DELETED_KEY_SEPARATOR;
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


swss::ProfileProvider *_wrap_ProfileProvider_instance_swsscommon_728e05b169b08794() {
  swss::ProfileProvider *result = 0 ;
  swss::ProfileProvider *_swig_go_result;
  
  
  {
    try {
      result = (swss::ProfileProvider *) &swss::ProfileProvider::instance();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::ProfileProvider **)&_swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_ProfileProvider_appendConfigs_swsscommon_728e05b169b08794(swss::ProfileProvider *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, std::vector< std::pair< std::string,std::string > > *_swig_go_3, swss::DBConnector *_swig_go_4) {
  swss::ProfileProvider *arg1 = (swss::ProfileProvider *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::vector< std::pair< std::string,std::string > > *arg4 = 0 ;
  swss::DBConnector *arg5 = (swss::DBConnector *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::ProfileProvider **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  arg4 = *(std::vector< std::pair< std::string,std::string > > **)&_swig_go_3; 
  arg5 = *(swss::DBConnector **)&_swig_go_4; 
  
  {
    try {
      result = (bool)(arg1)->appendConfigs((std::string const &)*arg2,(std::string const &)*arg3,*arg4,arg5);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


std::shared_ptr< std::string > *_wrap_ProfileProvider_getConfig_swsscommon_728e05b169b08794(swss::ProfileProvider *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3, swss::DBConnector *_swig_go_4) {
  swss::ProfileProvider *arg1 = (swss::ProfileProvider *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  swss::DBConnector *arg5 = (swss::DBConnector *) 0 ;
  SwigValueWrapper< std::shared_ptr< std::string > > result;
  std::shared_ptr< std::string > *_swig_go_result;
  
  arg1 = *(swss::ProfileProvider **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  arg5 = *(swss::DBConnector **)&_swig_go_4; 
  
  {
    try {
      result = (arg1)->getConfig((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::shared_ptr< std::string > **)&_swig_go_result = new std::shared_ptr< std::string >(result); 
  return _swig_go_result;
}


std::map< std::string,std::string,std::less< std::string > > *_wrap_ProfileProvider_getConfigs__SWIG_0_swsscommon_728e05b169b08794(swss::ProfileProvider *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, swss::DBConnector *_swig_go_3) {
  swss::ProfileProvider *arg1 = (swss::ProfileProvider *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  swss::DBConnector *arg4 = (swss::DBConnector *) 0 ;
  std::map< std::string,std::string,std::less< std::string > > result;
  std::map< std::string,std::string,std::less< std::string > > *_swig_go_result;
  
  arg1 = *(swss::ProfileProvider **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  arg4 = *(swss::DBConnector **)&_swig_go_3; 
  
  {
    try {
      result = (arg1)->getConfigs((std::string const &)*arg2,(std::string const &)*arg3,arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::map< std::string,std::string,std::less< std::string > > **)&_swig_go_result = new std::map< std::string,std::string,std::less< std::string > >(result); 
  return _swig_go_result;
}


std::map< std::string,std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > >,std::less< std::string > > *_wrap_ProfileProvider_getConfigs__SWIG_1_swsscommon_728e05b169b08794(swss::ProfileProvider *_swig_go_0, swss::DBConnector *_swig_go_1) {
  swss::ProfileProvider *arg1 = (swss::ProfileProvider *) 0 ;
  swss::DBConnector *arg2 = (swss::DBConnector *) 0 ;
  std::map< std::string,std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > >,std::less< std::string > > result;
  std::map< std::string,std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > >,std::less< std::string > > *_swig_go_result;
  
  arg1 = *(swss::ProfileProvider **)&_swig_go_0; 
  arg2 = *(swss::DBConnector **)&_swig_go_1; 
  
  {
    try {
      result = (arg1)->getConfigs(arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::map< std::string,std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > >,std::less< std::string > > **)&_swig_go_result = new std::map< std::string,std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > >,std::less< std::string > >(result); 
  return _swig_go_result;
}


std::vector< std::string > *_wrap_ProfileProvider_getKeys_swsscommon_728e05b169b08794(swss::ProfileProvider *_swig_go_0, _gostring_ _swig_go_1, swss::DBConnector *_swig_go_2) {
  swss::ProfileProvider *arg1 = (swss::ProfileProvider *) 0 ;
  std::string *arg2 = 0 ;
  swss::DBConnector *arg3 = (swss::DBConnector *) 0 ;
  std::vector< std::string > result;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = *(swss::ProfileProvider **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = *(swss::DBConnector **)&_swig_go_2; 
  
  {
    try {
      result = (arg1)->getKeys((std::string const &)*arg2,arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::vector< std::string > **)&_swig_go_result = new std::vector< std::string >(result); 
  return _swig_go_result;
}


bool _wrap_ProfileProvider_tryRevertItem_swsscommon_728e05b169b08794(swss::ProfileProvider *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, swss::DBConnector *_swig_go_3) {
  swss::ProfileProvider *arg1 = (swss::ProfileProvider *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  swss::DBConnector *arg4 = (swss::DBConnector *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::ProfileProvider **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  arg4 = *(swss::DBConnector **)&_swig_go_3; 
  
  {
    try {
      result = (bool)(arg1)->tryRevertItem((std::string const &)*arg2,(std::string const &)*arg3,arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_ProfileProvider_tryDeleteItem_swsscommon_728e05b169b08794(swss::ProfileProvider *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, swss::DBConnector *_swig_go_3) {
  swss::ProfileProvider *arg1 = (swss::ProfileProvider *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  swss::DBConnector *arg4 = (swss::DBConnector *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::ProfileProvider **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  arg4 = *(swss::DBConnector **)&_swig_go_3; 
  
  {
    try {
      result = (bool)(arg1)->tryDeleteItem((std::string const &)*arg2,(std::string const &)*arg3,arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_ProfileProvider_getDeletedKeyName_swsscommon_728e05b169b08794(swss::ProfileProvider *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, swss::DBConnector *_swig_go_3) {
  swss::ProfileProvider *arg1 = (swss::ProfileProvider *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  swss::DBConnector *arg4 = (swss::DBConnector *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ProfileProvider **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  arg4 = *(swss::DBConnector **)&_swig_go_3; 
  
  {
    try {
      result = (arg1)->getDeletedKeyName((std::string const &)*arg2,(std::string const &)*arg3,arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


void _wrap_delete_Selectable_swsscommon_728e05b169b08794(swss::Selectable *_swig_go_0) {
  swss::Selectable *arg1 = (swss::Selectable *) 0 ;
  
  arg1 = *(swss::Selectable **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


intgo _wrap_Selectable_getFd_swsscommon_728e05b169b08794(swss::Selectable *_swig_go_0) {
  swss::Selectable *arg1 = (swss::Selectable *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(swss::Selectable **)&_swig_go_0; 
  
  {
    try {
      result = (int)(arg1)->getFd();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_Selectable_readData_swsscommon_728e05b169b08794(swss::Selectable *_swig_go_0) {
  swss::Selectable *arg1 = (swss::Selectable *) 0 ;
  uint64_t result;
  long long _swig_go_result;
  
  arg1 = *(swss::Selectable **)&_swig_go_0; 
  
  {
    try {
      result = (uint64_t)(arg1)->readData();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_Selectable_hasData_swsscommon_728e05b169b08794(swss::Selectable *_swig_go_0) {
  swss::Selectable *arg1 = (swss::Selectable *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::Selectable **)&_swig_go_0; 
  
  {
    try {
      result = (bool)(arg1)->hasData();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_Selectable_hasCachedData_swsscommon_728e05b169b08794(swss::Selectable *_swig_go_0) {
  swss::Selectable *arg1 = (swss::Selectable *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::Selectable **)&_swig_go_0; 
  
  {
    try {
      result = (bool)(arg1)->hasCachedData();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_Selectable_initializedWithData_swsscommon_728e05b169b08794(swss::Selectable *_swig_go_0) {
  swss::Selectable *arg1 = (swss::Selectable *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::Selectable **)&_swig_go_0; 
  
  {
    try {
      result = (bool)(arg1)->initializedWithData();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Selectable_updateAfterRead_swsscommon_728e05b169b08794(swss::Selectable *_swig_go_0) {
  swss::Selectable *arg1 = (swss::Selectable *) 0 ;
  
  arg1 = *(swss::Selectable **)&_swig_go_0; 
  
  {
    try {
      (arg1)->updateAfterRead();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


intgo _wrap_Selectable_getPri_swsscommon_728e05b169b08794(swss::Selectable *_swig_go_0) {
  swss::Selectable *arg1 = (swss::Selectable *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(swss::Selectable **)&_swig_go_0; 
  
  {
    try {
      result = (int)((swss::Selectable const *)arg1)->getPri();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


swss::Select *_wrap_new_Select_swsscommon_728e05b169b08794() {
  swss::Select *result = 0 ;
  swss::Select *_swig_go_result;
  
  
  {
    try {
      result = (swss::Select *)new swss::Select();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::Select **)&_swig_go_result = (swss::Select *)result; 
  return _swig_go_result;
}


void _wrap_delete_Select_swsscommon_728e05b169b08794(swss::Select *_swig_go_0) {
  swss::Select *arg1 = (swss::Select *) 0 ;
  
  arg1 = *(swss::Select **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_Select_addSelectable_swsscommon_728e05b169b08794(swss::Select *_swig_go_0, swss::Selectable *_swig_go_1) {
  swss::Select *arg1 = (swss::Select *) 0 ;
  swss::Selectable *arg2 = (swss::Selectable *) 0 ;
  
  arg1 = *(swss::Select **)&_swig_go_0; 
  arg2 = *(swss::Selectable **)&_swig_go_1; 
  
  {
    try {
      (arg1)->addSelectable(arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_Select_removeSelectable_swsscommon_728e05b169b08794(swss::Select *_swig_go_0, swss::Selectable *_swig_go_1) {
  swss::Select *arg1 = (swss::Select *) 0 ;
  swss::Selectable *arg2 = (swss::Selectable *) 0 ;
  
  arg1 = *(swss::Select **)&_swig_go_0; 
  arg2 = *(swss::Selectable **)&_swig_go_1; 
  
  {
    try {
      (arg1)->removeSelectable(arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_Select_addSelectables_swsscommon_728e05b169b08794(swss::Select *_swig_go_0, std::vector< swss::Selectable * > *_swig_go_1) {
  swss::Select *arg1 = (swss::Select *) 0 ;
  SwigValueWrapper< std::vector< swss::Selectable * > > arg2 ;
  std::vector< swss::Selectable * > *argp2 ;
  
  arg1 = *(swss::Select **)&_swig_go_0; 
  
  argp2 = (std::vector< swss::Selectable * > *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null std::vector< swss::Selectable * >");
  }
  arg2 = (std::vector< swss::Selectable * >)*argp2;
  
  
  {
    try {
      (arg1)->addSelectables(arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


intgo _wrap_OBJECT_Select_swsscommon_728e05b169b08794() {
  int result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = swss::Select::OBJECT;
      
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ERROR_Select_swsscommon_728e05b169b08794() {
  int result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = swss::Select::ERROR;
      
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_TIMEOUT_Select_swsscommon_728e05b169b08794() {
  int result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = swss::Select::TIMEOUT;
      
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_SIGNALINT_Select_swsscommon_728e05b169b08794() {
  int result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = swss::Select::SIGNALINT;
      
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Select_Xselect__SWIG_0_swsscommon_728e05b169b08794(swss::Select *_swig_go_0, swss::Selectable **_swig_go_1, intgo _swig_go_2, bool _swig_go_3) {
  swss::Select *arg1 = (swss::Select *) 0 ;
  swss::Selectable **arg2 = (swss::Selectable **) 0 ;
  int arg3 ;
  bool arg4 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(swss::Select **)&_swig_go_0; 
  arg2 = *(swss::Selectable ***)&_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  arg4 = (bool)_swig_go_3; 
  
  {
    try {
      result = (int)(arg1)->select(arg2,arg3,arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Select_Xselect__SWIG_1_swsscommon_728e05b169b08794(swss::Select *_swig_go_0, swss::Selectable **_swig_go_1, intgo _swig_go_2) {
  swss::Select *arg1 = (swss::Select *) 0 ;
  swss::Selectable **arg2 = (swss::Selectable **) 0 ;
  int arg3 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(swss::Select **)&_swig_go_0; 
  arg2 = *(swss::Selectable ***)&_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  
  {
    try {
      result = (int)(arg1)->select(arg2,arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Select_Xselect__SWIG_2_swsscommon_728e05b169b08794(swss::Select *_swig_go_0, swss::Selectable **_swig_go_1) {
  swss::Select *arg1 = (swss::Select *) 0 ;
  swss::Selectable **arg2 = (swss::Selectable **) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(swss::Select **)&_swig_go_0; 
  arg2 = *(swss::Selectable ***)&_swig_go_1; 
  
  {
    try {
      result = (int)(arg1)->select(arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_Select_isQueueEmpty_swsscommon_728e05b169b08794(swss::Select *_swig_go_0) {
  swss::Select *arg1 = (swss::Select *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::Select **)&_swig_go_0; 
  
  {
    try {
      result = (bool)(arg1)->isQueueEmpty();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_Select_resultToString_swsscommon_728e05b169b08794(intgo _swig_go_0) {
  int arg1 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  {
    try {
      result = swss::Select::resultToString(arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


swss::RedisCommand *_wrap_new_RedisCommand_swsscommon_728e05b169b08794() {
  swss::RedisCommand *result = 0 ;
  swss::RedisCommand *_swig_go_result;
  
  
  {
    try {
      result = (swss::RedisCommand *)new swss::RedisCommand();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::RedisCommand **)&_swig_go_result = (swss::RedisCommand *)result; 
  return _swig_go_result;
}


void _wrap_delete_RedisCommand_swsscommon_728e05b169b08794(swss::RedisCommand *_swig_go_0) {
  swss::RedisCommand *arg1 = (swss::RedisCommand *) 0 ;
  
  arg1 = *(swss::RedisCommand **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_RedisCommand_format__SWIG_0_swsscommon_728e05b169b08794(swss::RedisCommand *_swig_go_0, _gostring_ _swig_go_1) {
  swss::RedisCommand *arg1 = (swss::RedisCommand *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  
  arg1 = *(swss::RedisCommand **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  {
    try {
      (arg1)->format((char const *)arg2,arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
  free(arg2); 
}


void _wrap_RedisCommand_formatArgv_swsscommon_728e05b169b08794(swss::RedisCommand *_swig_go_0, intgo _swig_go_1, _gostring_* _swig_go_2, long long *_swig_go_3) {
  swss::RedisCommand *arg1 = (swss::RedisCommand *) 0 ;
  int arg2 ;
  char **arg3 = (char **) 0 ;
  size_t *arg4 = (size_t *) 0 ;
  
  arg1 = *(swss::RedisCommand **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = *(char ***)&_swig_go_2; 
  arg4 = *(size_t **)&_swig_go_3; 
  
  {
    try {
      (arg1)->formatArgv(arg2,(char const **)arg3,(size_t const *)arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_RedisCommand_format__SWIG_1_swsscommon_728e05b169b08794(swss::RedisCommand *_swig_go_0, std::vector< std::string > *_swig_go_1) {
  swss::RedisCommand *arg1 = (swss::RedisCommand *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  arg1 = *(swss::RedisCommand **)&_swig_go_0; 
  arg2 = *(std::vector< std::string > **)&_swig_go_1; 
  
  {
    try {
      (arg1)->format((std::vector< std::string > const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_RedisCommand_formatHSET__SWIG_0_swsscommon_728e05b169b08794(swss::RedisCommand *_swig_go_0, _gostring_ _swig_go_1, std::vector< std::pair< std::string,std::string > > *_swig_go_2) {
  swss::RedisCommand *arg1 = (swss::RedisCommand *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< swss::FieldValueTuple > *arg3 = 0 ;
  
  arg1 = *(swss::RedisCommand **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = *(std::vector< swss::FieldValueTuple > **)&_swig_go_2; 
  
  {
    try {
      (arg1)->formatHSET((std::string const &)*arg2,(std::vector< swss::FieldValueTuple > const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_RedisCommand_formatHSET__SWIG_1_swsscommon_728e05b169b08794(swss::RedisCommand *_swig_go_0, _gostring_ _swig_go_1, std::map< std::string,std::string,std::less< std::string > > *_swig_go_2) {
  swss::RedisCommand *arg1 = (swss::RedisCommand *) 0 ;
  std::string *arg2 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg3 = 0 ;
  
  arg1 = *(swss::RedisCommand **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = *(std::map< std::string,std::string,std::less< std::string > > **)&_swig_go_2; 
  
  {
    try {
      (arg1)->formatHSET((std::string const &)*arg2,(std::map< std::string,std::string,std::less< std::string > > const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_RedisCommand_formatHSET__SWIG_3_swsscommon_728e05b169b08794(swss::RedisCommand *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3) {
  swss::RedisCommand *arg1 = (swss::RedisCommand *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  arg1 = *(swss::RedisCommand **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  {
    try {
      (arg1)->formatHSET((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_RedisCommand_formatHGET_swsscommon_728e05b169b08794(swss::RedisCommand *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  swss::RedisCommand *arg1 = (swss::RedisCommand *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = *(swss::RedisCommand **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      (arg1)->formatHGET((std::string const &)*arg2,(std::string const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_RedisCommand_formatHDEL__SWIG_0_swsscommon_728e05b169b08794(swss::RedisCommand *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  swss::RedisCommand *arg1 = (swss::RedisCommand *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = *(swss::RedisCommand **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      (arg1)->formatHDEL((std::string const &)*arg2,(std::string const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_RedisCommand_formatHDEL__SWIG_1_swsscommon_728e05b169b08794(swss::RedisCommand *_swig_go_0, _gostring_ _swig_go_1, std::vector< std::string > *_swig_go_2) {
  swss::RedisCommand *arg1 = (swss::RedisCommand *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > *arg3 = 0 ;
  
  arg1 = *(swss::RedisCommand **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = *(std::vector< std::string > **)&_swig_go_2; 
  
  {
    try {
      (arg1)->formatHDEL((std::string const &)*arg2,(std::vector< std::string > const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_RedisCommand_formatEXPIRE_swsscommon_728e05b169b08794(swss::RedisCommand *_swig_go_0, _gostring_ _swig_go_1, long long _swig_go_2) {
  swss::RedisCommand *arg1 = (swss::RedisCommand *) 0 ;
  std::string *arg2 = 0 ;
  int64_t *arg3 = 0 ;
  
  arg1 = *(swss::RedisCommand **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (int64_t *)&_swig_go_2; 
  
  {
    try {
      (arg1)->formatEXPIRE((std::string const &)*arg2,(int64_t const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_RedisCommand_formatTTL_swsscommon_728e05b169b08794(swss::RedisCommand *_swig_go_0, _gostring_ _swig_go_1) {
  swss::RedisCommand *arg1 = (swss::RedisCommand *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(swss::RedisCommand **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      (arg1)->formatTTL((std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_RedisCommand_formatDEL_swsscommon_728e05b169b08794(swss::RedisCommand *_swig_go_0, _gostring_ _swig_go_1) {
  swss::RedisCommand *arg1 = (swss::RedisCommand *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(swss::RedisCommand **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      (arg1)->formatDEL((std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


intgo _wrap_RedisCommand_appendTo_swsscommon_728e05b169b08794(swss::RedisCommand *_swig_go_0, redisContext *_swig_go_1) {
  swss::RedisCommand *arg1 = (swss::RedisCommand *) 0 ;
  redisContext *arg2 = (redisContext *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(swss::RedisCommand **)&_swig_go_0; 
  arg2 = *(redisContext **)&_swig_go_1; 
  
  {
    try {
      result = (int)((swss::RedisCommand const *)arg1)->appendTo(arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_RedisCommand_toPrintableString_swsscommon_728e05b169b08794(swss::RedisCommand *_swig_go_0) {
  swss::RedisCommand *arg1 = (swss::RedisCommand *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::RedisCommand **)&_swig_go_0; 
  
  {
    try {
      result = ((swss::RedisCommand const *)arg1)->toPrintableString();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


long long _wrap_RedisPipeline_COMMAND_MAX_get_swsscommon_728e05b169b08794(swss::RedisPipeline *_swig_go_0) {
  swss::RedisPipeline *arg1 = (swss::RedisPipeline *) 0 ;
  size_t result;
  long long _swig_go_result;
  
  arg1 = *(swss::RedisPipeline **)&_swig_go_0; 
  
  result = (size_t) ((arg1)->COMMAND_MAX);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RedisPipeline_NEWCONNECTOR_TIMEOUT_RedisPipeline_swsscommon_728e05b169b08794() {
  int result;
  intgo _swig_go_result;
  
  
  result = swss::RedisPipeline::NEWCONNECTOR_TIMEOUT;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


swss::RedisPipeline *_wrap_new_RedisPipeline__SWIG_0_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0, long long _swig_go_1) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  size_t arg2 ;
  swss::RedisPipeline *result = 0 ;
  swss::RedisPipeline *_swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  {
    try {
      result = (swss::RedisPipeline *)new swss::RedisPipeline((swss::DBConnector const *)arg1,arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::RedisPipeline **)&_swig_go_result = (swss::RedisPipeline *)result; 
  return _swig_go_result;
}


swss::RedisPipeline *_wrap_new_RedisPipeline__SWIG_1_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  swss::RedisPipeline *result = 0 ;
  swss::RedisPipeline *_swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  {
    try {
      result = (swss::RedisPipeline *)new swss::RedisPipeline((swss::DBConnector const *)arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::RedisPipeline **)&_swig_go_result = (swss::RedisPipeline *)result; 
  return _swig_go_result;
}


void _wrap_delete_RedisPipeline_swsscommon_728e05b169b08794(swss::RedisPipeline *_swig_go_0) {
  swss::RedisPipeline *arg1 = (swss::RedisPipeline *) 0 ;
  
  arg1 = *(swss::RedisPipeline **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


redisReply *_wrap_RedisPipeline_push__SWIG_0_swsscommon_728e05b169b08794(swss::RedisPipeline *_swig_go_0, swss::RedisCommand *_swig_go_1, intgo _swig_go_2) {
  swss::RedisPipeline *arg1 = (swss::RedisPipeline *) 0 ;
  swss::RedisCommand *arg2 = 0 ;
  int arg3 ;
  redisReply *result = 0 ;
  redisReply *_swig_go_result;
  
  arg1 = *(swss::RedisPipeline **)&_swig_go_0; 
  arg2 = *(swss::RedisCommand **)&_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  
  {
    try {
      result = (redisReply *)(arg1)->push((swss::RedisCommand const &)*arg2,arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(redisReply **)&_swig_go_result = (redisReply *)result; 
  return _swig_go_result;
}


redisReply *_wrap_RedisPipeline_push__SWIG_1_swsscommon_728e05b169b08794(swss::RedisPipeline *_swig_go_0, swss::RedisCommand *_swig_go_1) {
  swss::RedisPipeline *arg1 = (swss::RedisPipeline *) 0 ;
  swss::RedisCommand *arg2 = 0 ;
  redisReply *result = 0 ;
  redisReply *_swig_go_result;
  
  arg1 = *(swss::RedisPipeline **)&_swig_go_0; 
  arg2 = *(swss::RedisCommand **)&_swig_go_1; 
  
  {
    try {
      result = (redisReply *)(arg1)->push((swss::RedisCommand const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(redisReply **)&_swig_go_result = (redisReply *)result; 
  return _swig_go_result;
}


_gostring_ _wrap_RedisPipeline_loadRedisScript_swsscommon_728e05b169b08794(swss::RedisPipeline *_swig_go_0, _gostring_ _swig_go_1) {
  swss::RedisPipeline *arg1 = (swss::RedisPipeline *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::RedisPipeline **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = (arg1)->loadRedisScript((std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


redisReply *_wrap_RedisPipeline_pop_swsscommon_728e05b169b08794(swss::RedisPipeline *_swig_go_0) {
  swss::RedisPipeline *arg1 = (swss::RedisPipeline *) 0 ;
  redisReply *result = 0 ;
  redisReply *_swig_go_result;
  
  arg1 = *(swss::RedisPipeline **)&_swig_go_0; 
  
  {
    try {
      result = (redisReply *)(arg1)->pop();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(redisReply **)&_swig_go_result = (redisReply *)result; 
  return _swig_go_result;
}


void _wrap_RedisPipeline_flush_swsscommon_728e05b169b08794(swss::RedisPipeline *_swig_go_0) {
  swss::RedisPipeline *arg1 = (swss::RedisPipeline *) 0 ;
  
  arg1 = *(swss::RedisPipeline **)&_swig_go_0; 
  
  {
    try {
      (arg1)->flush();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


long long _wrap_RedisPipeline_size_swsscommon_728e05b169b08794(swss::RedisPipeline *_swig_go_0) {
  swss::RedisPipeline *arg1 = (swss::RedisPipeline *) 0 ;
  size_t result;
  long long _swig_go_result;
  
  arg1 = *(swss::RedisPipeline **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->size();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RedisPipeline_getDbId_swsscommon_728e05b169b08794(swss::RedisPipeline *_swig_go_0) {
  swss::RedisPipeline *arg1 = (swss::RedisPipeline *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(swss::RedisPipeline **)&_swig_go_0; 
  
  {
    try {
      result = (int)(arg1)->getDbId();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_RedisPipeline_getDbName_swsscommon_728e05b169b08794(swss::RedisPipeline *_swig_go_0) {
  swss::RedisPipeline *arg1 = (swss::RedisPipeline *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::RedisPipeline **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->getDbName();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


swss::DBConnector *_wrap_RedisPipeline_getDBConnector_swsscommon_728e05b169b08794(swss::RedisPipeline *_swig_go_0) {
  swss::RedisPipeline *arg1 = (swss::RedisPipeline *) 0 ;
  swss::DBConnector *result = 0 ;
  swss::DBConnector *_swig_go_result;
  
  arg1 = *(swss::RedisPipeline **)&_swig_go_0; 
  
  {
    try {
      result = (swss::DBConnector *)(arg1)->getDBConnector();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::DBConnector **)&_swig_go_result = (swss::DBConnector *)result; 
  return _swig_go_result;
}


void _wrap_RedisPipeline_initializeOwnerTid_swsscommon_728e05b169b08794(swss::RedisPipeline *_swig_go_0) {
  swss::RedisPipeline *arg1 = (swss::RedisPipeline *) 0 ;
  
  arg1 = *(swss::RedisPipeline **)&_swig_go_0; 
  
  {
    try {
      (arg1)->initializeOwnerTid();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


swss::RedisError *_wrap_new_RedisError_swsscommon_728e05b169b08794(_gostring_ _swig_go_0, redisContext *_swig_go_1) {
  std::string *arg1 = 0 ;
  redisContext *arg2 = (redisContext *) 0 ;
  swss::RedisError *result = 0 ;
  swss::RedisError *_swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  arg2 = *(redisContext **)&_swig_go_1; 
  
  {
    try {
      result = (swss::RedisError *)new swss::RedisError((std::string const &)*arg1,arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::RedisError **)&_swig_go_result = (swss::RedisError *)result; 
  return _swig_go_result;
}


_gostring_ _wrap_RedisError_what_swsscommon_728e05b169b08794(swss::RedisError *_swig_go_0) {
  swss::RedisError *arg1 = (swss::RedisError *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::RedisError **)&_swig_go_0; 
  
  {
    try {
      result = (char *)((swss::RedisError const *)arg1)->what();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


void _wrap_delete_RedisError_swsscommon_728e05b169b08794(swss::RedisError *_swig_go_0) {
  swss::RedisError *arg1 = (swss::RedisError *) 0 ;
  
  arg1 = *(swss::RedisError **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_RedisMessage_Xtype_set_swsscommon_728e05b169b08794(swss::RedisMessage *_swig_go_0, _gostring_ _swig_go_1) {
  swss::RedisMessage *arg1 = (swss::RedisMessage *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(swss::RedisMessage **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->type = *arg2;
  
}


_gostring_ _wrap_RedisMessage_Xtype_get_swsscommon_728e05b169b08794(swss::RedisMessage *_swig_go_0) {
  swss::RedisMessage *arg1 = (swss::RedisMessage *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::RedisMessage **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->type);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_RedisMessage_pattern_set_swsscommon_728e05b169b08794(swss::RedisMessage *_swig_go_0, _gostring_ _swig_go_1) {
  swss::RedisMessage *arg1 = (swss::RedisMessage *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(swss::RedisMessage **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->pattern = *arg2;
  
}


_gostring_ _wrap_RedisMessage_pattern_get_swsscommon_728e05b169b08794(swss::RedisMessage *_swig_go_0) {
  swss::RedisMessage *arg1 = (swss::RedisMessage *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::RedisMessage **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->pattern);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_RedisMessage_channel_set_swsscommon_728e05b169b08794(swss::RedisMessage *_swig_go_0, _gostring_ _swig_go_1) {
  swss::RedisMessage *arg1 = (swss::RedisMessage *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(swss::RedisMessage **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->channel = *arg2;
  
}


_gostring_ _wrap_RedisMessage_channel_get_swsscommon_728e05b169b08794(swss::RedisMessage *_swig_go_0) {
  swss::RedisMessage *arg1 = (swss::RedisMessage *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::RedisMessage **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->channel);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_RedisMessage_data_set_swsscommon_728e05b169b08794(swss::RedisMessage *_swig_go_0, _gostring_ _swig_go_1) {
  swss::RedisMessage *arg1 = (swss::RedisMessage *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(swss::RedisMessage **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->data = *arg2;
  
}


_gostring_ _wrap_RedisMessage_data_get_swsscommon_728e05b169b08794(swss::RedisMessage *_swig_go_0) {
  swss::RedisMessage *arg1 = (swss::RedisMessage *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::RedisMessage **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->data);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


swss::RedisMessage *_wrap_new_RedisMessage_swsscommon_728e05b169b08794() {
  swss::RedisMessage *result = 0 ;
  swss::RedisMessage *_swig_go_result;
  
  
  {
    try {
      result = (swss::RedisMessage *)new swss::RedisMessage();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::RedisMessage **)&_swig_go_result = (swss::RedisMessage *)result; 
  return _swig_go_result;
}


void _wrap_delete_RedisMessage_swsscommon_728e05b169b08794(swss::RedisMessage *_swig_go_0) {
  swss::RedisMessage *arg1 = (swss::RedisMessage *) 0 ;
  
  arg1 = *(swss::RedisMessage **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


swss::RedisReply *_wrap_new_RedisReply__SWIG_0_swsscommon_728e05b169b08794(swss::RedisContext *_swig_go_0, swss::RedisCommand *_swig_go_1) {
  swss::RedisContext *arg1 = (swss::RedisContext *) 0 ;
  swss::RedisCommand *arg2 = 0 ;
  swss::RedisReply *result = 0 ;
  swss::RedisReply *_swig_go_result;
  
  arg1 = *(swss::RedisContext **)&_swig_go_0; 
  arg2 = *(swss::RedisCommand **)&_swig_go_1; 
  
  {
    try {
      result = (swss::RedisReply *)new swss::RedisReply(arg1,(swss::RedisCommand const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::RedisReply **)&_swig_go_result = (swss::RedisReply *)result; 
  return _swig_go_result;
}


swss::RedisReply *_wrap_new_RedisReply__SWIG_1_swsscommon_728e05b169b08794(swss::RedisContext *_swig_go_0, _gostring_ _swig_go_1) {
  swss::RedisContext *arg1 = (swss::RedisContext *) 0 ;
  std::string *arg2 = 0 ;
  swss::RedisReply *result = 0 ;
  swss::RedisReply *_swig_go_result;
  
  arg1 = *(swss::RedisContext **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = (swss::RedisReply *)new swss::RedisReply(arg1,(std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::RedisReply **)&_swig_go_result = (swss::RedisReply *)result; 
  return _swig_go_result;
}


swss::RedisReply *_wrap_new_RedisReply__SWIG_2_swsscommon_728e05b169b08794(swss::RedisContext *_swig_go_0, swss::RedisCommand *_swig_go_1, intgo _swig_go_2) {
  swss::RedisContext *arg1 = (swss::RedisContext *) 0 ;
  swss::RedisCommand *arg2 = 0 ;
  int arg3 ;
  swss::RedisReply *result = 0 ;
  swss::RedisReply *_swig_go_result;
  
  arg1 = *(swss::RedisContext **)&_swig_go_0; 
  arg2 = *(swss::RedisCommand **)&_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  
  {
    try {
      result = (swss::RedisReply *)new swss::RedisReply(arg1,(swss::RedisCommand const &)*arg2,arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::RedisReply **)&_swig_go_result = (swss::RedisReply *)result; 
  return _swig_go_result;
}


swss::RedisReply *_wrap_new_RedisReply__SWIG_3_swsscommon_728e05b169b08794(swss::RedisContext *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  swss::RedisContext *arg1 = (swss::RedisContext *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  swss::RedisReply *result = 0 ;
  swss::RedisReply *_swig_go_result;
  
  arg1 = *(swss::RedisContext **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (int)_swig_go_2; 
  
  {
    try {
      result = (swss::RedisReply *)new swss::RedisReply(arg1,(std::string const &)*arg2,arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::RedisReply **)&_swig_go_result = (swss::RedisReply *)result; 
  return _swig_go_result;
}


swss::RedisReply *_wrap_new_RedisReply__SWIG_4_swsscommon_728e05b169b08794(redisReply *_swig_go_0) {
  redisReply *arg1 = (redisReply *) 0 ;
  swss::RedisReply *result = 0 ;
  swss::RedisReply *_swig_go_result;
  
  arg1 = *(redisReply **)&_swig_go_0; 
  
  {
    try {
      result = (swss::RedisReply *)new swss::RedisReply(arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::RedisReply **)&_swig_go_result = (swss::RedisReply *)result; 
  return _swig_go_result;
}


void _wrap_delete_RedisReply_swsscommon_728e05b169b08794(swss::RedisReply *_swig_go_0) {
  swss::RedisReply *arg1 = (swss::RedisReply *) 0 ;
  
  arg1 = *(swss::RedisReply **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


redisReply *_wrap_RedisReply_release_swsscommon_728e05b169b08794(swss::RedisReply *_swig_go_0) {
  swss::RedisReply *arg1 = (swss::RedisReply *) 0 ;
  redisReply *result = 0 ;
  redisReply *_swig_go_result;
  
  arg1 = *(swss::RedisReply **)&_swig_go_0; 
  
  {
    try {
      result = (redisReply *)(arg1)->release();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(redisReply **)&_swig_go_result = (redisReply *)result; 
  return _swig_go_result;
}


redisReply *_wrap_RedisReply_getContext_swsscommon_728e05b169b08794(swss::RedisReply *_swig_go_0) {
  swss::RedisReply *arg1 = (swss::RedisReply *) 0 ;
  redisReply *result = 0 ;
  redisReply *_swig_go_result;
  
  arg1 = *(swss::RedisReply **)&_swig_go_0; 
  
  {
    try {
      result = (redisReply *)(arg1)->getContext();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(redisReply **)&_swig_go_result = (redisReply *)result; 
  return _swig_go_result;
}


long long _wrap_RedisReply_getChildCount_swsscommon_728e05b169b08794(swss::RedisReply *_swig_go_0) {
  swss::RedisReply *arg1 = (swss::RedisReply *) 0 ;
  size_t result;
  long long _swig_go_result;
  
  arg1 = *(swss::RedisReply **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->getChildCount();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


redisReply *_wrap_RedisReply_getChild_swsscommon_728e05b169b08794(swss::RedisReply *_swig_go_0, long long _swig_go_1) {
  swss::RedisReply *arg1 = (swss::RedisReply *) 0 ;
  size_t arg2 ;
  redisReply *result = 0 ;
  redisReply *_swig_go_result;
  
  arg1 = *(swss::RedisReply **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  {
    try {
      result = (redisReply *)(arg1)->getChild(arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(redisReply **)&_swig_go_result = (redisReply *)result; 
  return _swig_go_result;
}


redisReply *_wrap_RedisReply_releaseChild_swsscommon_728e05b169b08794(swss::RedisReply *_swig_go_0, long long _swig_go_1) {
  swss::RedisReply *arg1 = (swss::RedisReply *) 0 ;
  size_t arg2 ;
  redisReply *result = 0 ;
  redisReply *_swig_go_result;
  
  arg1 = *(swss::RedisReply **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  {
    try {
      result = (redisReply *)(arg1)->releaseChild(arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(redisReply **)&_swig_go_result = (redisReply *)result; 
  return _swig_go_result;
}


void _wrap_RedisReply_checkReplyType_swsscommon_728e05b169b08794(swss::RedisReply *_swig_go_0, intgo _swig_go_1) {
  swss::RedisReply *arg1 = (swss::RedisReply *) 0 ;
  int arg2 ;
  
  arg1 = *(swss::RedisReply **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  {
    try {
      (arg1)->checkReplyType(arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_RedisReply_checkStatusOK_swsscommon_728e05b169b08794(swss::RedisReply *_swig_go_0) {
  swss::RedisReply *arg1 = (swss::RedisReply *) 0 ;
  
  arg1 = *(swss::RedisReply **)&_swig_go_0; 
  
  {
    try {
      (arg1)->checkStatusOK();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_RedisReply_checkStatusQueued_swsscommon_728e05b169b08794(swss::RedisReply *_swig_go_0) {
  swss::RedisReply *arg1 = (swss::RedisReply *) 0 ;
  
  arg1 = *(swss::RedisReply **)&_swig_go_0; 
  
  {
    try {
      (arg1)->checkStatusQueued();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


_gostring_ _wrap_RedisReply_to_string__SWIG_0_swsscommon_728e05b169b08794(swss::RedisReply *_swig_go_0) {
  swss::RedisReply *arg1 = (swss::RedisReply *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::RedisReply **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->to_string();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_RedisReply_to_string__SWIG_1_swsscommon_728e05b169b08794(redisReply *_swig_go_0, _gostring_ _swig_go_1) {
  redisReply *arg1 = (redisReply *) 0 ;
  std::string arg2 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(redisReply **)&_swig_go_0; 
  (&arg2)->assign(_swig_go_1.p, _swig_go_1.n); 
  
  {
    try {
      result = swss::RedisReply::to_string(arg1,arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_RedisReply_to_string__SWIG_2_swsscommon_728e05b169b08794(redisReply *_swig_go_0) {
  redisReply *arg1 = (redisReply *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(redisReply **)&_swig_go_0; 
  
  {
    try {
      result = swss::RedisReply::to_string(arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


intgo _wrap_RedisSelect_SUBSCRIBE_TIMEOUT_RedisSelect_swsscommon_728e05b169b08794() {
  unsigned int result;
  intgo _swig_go_result;
  
  
  result = swss::RedisSelect::SUBSCRIBE_TIMEOUT;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


swss::RedisSelect *_wrap_new_RedisSelect__SWIG_0_swsscommon_728e05b169b08794(intgo _swig_go_0) {
  int arg1 ;
  swss::RedisSelect *result = 0 ;
  swss::RedisSelect *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  {
    try {
      result = (swss::RedisSelect *)new swss::RedisSelect(arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::RedisSelect **)&_swig_go_result = (swss::RedisSelect *)result; 
  return _swig_go_result;
}


swss::RedisSelect *_wrap_new_RedisSelect__SWIG_1_swsscommon_728e05b169b08794() {
  swss::RedisSelect *result = 0 ;
  swss::RedisSelect *_swig_go_result;
  
  
  {
    try {
      result = (swss::RedisSelect *)new swss::RedisSelect();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::RedisSelect **)&_swig_go_result = (swss::RedisSelect *)result; 
  return _swig_go_result;
}


intgo _wrap_RedisSelect_getFd_swsscommon_728e05b169b08794(swss::RedisSelect *_swig_go_0) {
  swss::RedisSelect *arg1 = (swss::RedisSelect *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(swss::RedisSelect **)&_swig_go_0; 
  
  {
    try {
      result = (int)(arg1)->getFd();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_RedisSelect_readData_swsscommon_728e05b169b08794(swss::RedisSelect *_swig_go_0) {
  swss::RedisSelect *arg1 = (swss::RedisSelect *) 0 ;
  uint64_t result;
  long long _swig_go_result;
  
  arg1 = *(swss::RedisSelect **)&_swig_go_0; 
  
  {
    try {
      result = (uint64_t)(arg1)->readData();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_RedisSelect_hasData_swsscommon_728e05b169b08794(swss::RedisSelect *_swig_go_0) {
  swss::RedisSelect *arg1 = (swss::RedisSelect *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::RedisSelect **)&_swig_go_0; 
  
  {
    try {
      result = (bool)(arg1)->hasData();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_RedisSelect_hasCachedData_swsscommon_728e05b169b08794(swss::RedisSelect *_swig_go_0) {
  swss::RedisSelect *arg1 = (swss::RedisSelect *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::RedisSelect **)&_swig_go_0; 
  
  {
    try {
      result = (bool)(arg1)->hasCachedData();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_RedisSelect_initializedWithData_swsscommon_728e05b169b08794(swss::RedisSelect *_swig_go_0) {
  swss::RedisSelect *arg1 = (swss::RedisSelect *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::RedisSelect **)&_swig_go_0; 
  
  {
    try {
      result = (bool)(arg1)->initializedWithData();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RedisSelect_updateAfterRead_swsscommon_728e05b169b08794(swss::RedisSelect *_swig_go_0) {
  swss::RedisSelect *arg1 = (swss::RedisSelect *) 0 ;
  
  arg1 = *(swss::RedisSelect **)&_swig_go_0; 
  
  {
    try {
      (arg1)->updateAfterRead();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


swss::DBConnector *_wrap_RedisSelect_getDbConnector_swsscommon_728e05b169b08794(swss::RedisSelect *_swig_go_0) {
  swss::RedisSelect *arg1 = (swss::RedisSelect *) 0 ;
  swss::DBConnector *result = 0 ;
  swss::DBConnector *_swig_go_result;
  
  arg1 = *(swss::RedisSelect **)&_swig_go_0; 
  
  {
    try {
      result = (swss::DBConnector *)((swss::RedisSelect const *)arg1)->getDbConnector();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::DBConnector **)&_swig_go_result = (swss::DBConnector *)result; 
  return _swig_go_result;
}


void _wrap_RedisSelect_subscribe_swsscommon_728e05b169b08794(swss::RedisSelect *_swig_go_0, swss::DBConnector *_swig_go_1, _gostring_ _swig_go_2) {
  swss::RedisSelect *arg1 = (swss::RedisSelect *) 0 ;
  swss::DBConnector *arg2 = (swss::DBConnector *) 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = *(swss::RedisSelect **)&_swig_go_0; 
  arg2 = *(swss::DBConnector **)&_swig_go_1; 
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      (arg1)->subscribe(arg2,(std::string const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_RedisSelect_psubscribe_swsscommon_728e05b169b08794(swss::RedisSelect *_swig_go_0, swss::DBConnector *_swig_go_1, _gostring_ _swig_go_2) {
  swss::RedisSelect *arg1 = (swss::RedisSelect *) 0 ;
  swss::DBConnector *arg2 = (swss::DBConnector *) 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = *(swss::RedisSelect **)&_swig_go_0; 
  arg2 = *(swss::DBConnector **)&_swig_go_1; 
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      (arg1)->psubscribe(arg2,(std::string const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_RedisSelect_punsubscribe_swsscommon_728e05b169b08794(swss::RedisSelect *_swig_go_0, _gostring_ _swig_go_1) {
  swss::RedisSelect *arg1 = (swss::RedisSelect *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(swss::RedisSelect **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      (arg1)->punsubscribe((std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_RedisSelect_setQueueLength_swsscommon_728e05b169b08794(swss::RedisSelect *_swig_go_0, long long _swig_go_1) {
  swss::RedisSelect *arg1 = (swss::RedisSelect *) 0 ;
  long long arg2 ;
  
  arg1 = *(swss::RedisSelect **)&_swig_go_0; 
  arg2 = (long long)_swig_go_1; 
  
  {
    try {
      (arg1)->setQueueLength(arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_delete_RedisSelect_swsscommon_728e05b169b08794(swss::RedisSelect *_swig_go_0) {
  swss::RedisSelect *arg1 = (swss::RedisSelect *) 0 ;
  
  arg1 = *(swss::RedisSelect **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


intgo _wrap_RedisSelect_getPri_swsscommon_728e05b169b08794(swss::RedisSelect *_swig_go_0) {
  swss::RedisSelect *arg1 = (swss::RedisSelect *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(swss::RedisSelect **)&_swig_go_0; 
  
  swss::Selectable *swig_b0 = (swss::Selectable *)arg1;
  result = (int)((swss::Selectable const *)swig_b0)->getPri();
  _swig_go_result = result; 
  return _swig_go_result;
}


swss::RedisTransactioner *_wrap_new_RedisTransactioner_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  swss::RedisTransactioner *result = 0 ;
  swss::RedisTransactioner *_swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  {
    try {
      result = (swss::RedisTransactioner *)new swss::RedisTransactioner(arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::RedisTransactioner **)&_swig_go_result = (swss::RedisTransactioner *)result; 
  return _swig_go_result;
}


void _wrap_delete_RedisTransactioner_swsscommon_728e05b169b08794(swss::RedisTransactioner *_swig_go_0) {
  swss::RedisTransactioner *arg1 = (swss::RedisTransactioner *) 0 ;
  
  arg1 = *(swss::RedisTransactioner **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_RedisTransactioner_multi_swsscommon_728e05b169b08794(swss::RedisTransactioner *_swig_go_0) {
  swss::RedisTransactioner *arg1 = (swss::RedisTransactioner *) 0 ;
  
  arg1 = *(swss::RedisTransactioner **)&_swig_go_0; 
  
  {
    try {
      (arg1)->multi();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


bool _wrap_RedisTransactioner_exec_swsscommon_728e05b169b08794(swss::RedisTransactioner *_swig_go_0) {
  swss::RedisTransactioner *arg1 = (swss::RedisTransactioner *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::RedisTransactioner **)&_swig_go_0; 
  
  {
    try {
      result = (bool)(arg1)->exec();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RedisTransactioner_enqueue__SWIG_0_swsscommon_728e05b169b08794(swss::RedisTransactioner *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  swss::RedisTransactioner *arg1 = (swss::RedisTransactioner *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  arg1 = *(swss::RedisTransactioner **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (int)_swig_go_2; 
  
  {
    try {
      (arg1)->enqueue((std::string const &)*arg2,arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_RedisTransactioner_enqueue__SWIG_1_swsscommon_728e05b169b08794(swss::RedisTransactioner *_swig_go_0, swss::RedisCommand *_swig_go_1, intgo _swig_go_2) {
  swss::RedisTransactioner *arg1 = (swss::RedisTransactioner *) 0 ;
  swss::RedisCommand *arg2 = 0 ;
  int arg3 ;
  
  arg1 = *(swss::RedisTransactioner **)&_swig_go_0; 
  arg2 = *(swss::RedisCommand **)&_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  
  {
    try {
      (arg1)->enqueue((swss::RedisCommand const &)*arg2,arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


redisReply *_wrap_RedisTransactioner_dequeueReply_swsscommon_728e05b169b08794(swss::RedisTransactioner *_swig_go_0) {
  swss::RedisTransactioner *arg1 = (swss::RedisTransactioner *) 0 ;
  redisReply *result = 0 ;
  redisReply *_swig_go_result;
  
  arg1 = *(swss::RedisTransactioner **)&_swig_go_0; 
  
  {
    try {
      result = (redisReply *)(arg1)->dequeueReply();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(redisReply **)&_swig_go_result = (redisReply *)result; 
  return _swig_go_result;
}


_gostring_ _wrap_ConfigDBConnector_Native_INIT_INDICATOR_ConfigDBConnector_Native_swsscommon_728e05b169b08794() {
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  
  result = swss::ConfigDBConnector_Native::INIT_INDICATOR;
  
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


swss::ConfigDBConnector_Native *_wrap_new_ConfigDBConnector_Native__SWIG_0_swsscommon_728e05b169b08794(bool _swig_go_0, _gostring_ _swig_go_1) {
  bool arg1 ;
  char *arg2 = (char *) 0 ;
  swss::ConfigDBConnector_Native *result = 0 ;
  swss::ConfigDBConnector_Native *_swig_go_result;
  
  arg1 = (bool)_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  {
    try {
      result = (swss::ConfigDBConnector_Native *)new swss::ConfigDBConnector_Native(arg1,(char const *)arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::ConfigDBConnector_Native **)&_swig_go_result = (swss::ConfigDBConnector_Native *)result; 
  free(arg2); 
  return _swig_go_result;
}


swss::ConfigDBConnector_Native *_wrap_new_ConfigDBConnector_Native__SWIG_1_swsscommon_728e05b169b08794(bool _swig_go_0) {
  bool arg1 ;
  swss::ConfigDBConnector_Native *result = 0 ;
  swss::ConfigDBConnector_Native *_swig_go_result;
  
  arg1 = (bool)_swig_go_0; 
  
  {
    try {
      result = (swss::ConfigDBConnector_Native *)new swss::ConfigDBConnector_Native(arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::ConfigDBConnector_Native **)&_swig_go_result = (swss::ConfigDBConnector_Native *)result; 
  return _swig_go_result;
}


swss::ConfigDBConnector_Native *_wrap_new_ConfigDBConnector_Native__SWIG_2_swsscommon_728e05b169b08794() {
  swss::ConfigDBConnector_Native *result = 0 ;
  swss::ConfigDBConnector_Native *_swig_go_result;
  
  
  {
    try {
      result = (swss::ConfigDBConnector_Native *)new swss::ConfigDBConnector_Native();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::ConfigDBConnector_Native **)&_swig_go_result = (swss::ConfigDBConnector_Native *)result; 
  return _swig_go_result;
}


void _wrap_ConfigDBConnector_Native_db_connect__SWIG_0_swsscommon_728e05b169b08794(swss::ConfigDBConnector_Native *_swig_go_0, _gostring_ _swig_go_1, bool _swig_go_2, bool _swig_go_3) {
  swss::ConfigDBConnector_Native *arg1 = (swss::ConfigDBConnector_Native *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  bool arg4 ;
  
  arg1 = *(swss::ConfigDBConnector_Native **)&_swig_go_0; 
  (&arg2)->assign(_swig_go_1.p, _swig_go_1.n); 
  arg3 = (bool)_swig_go_2; 
  arg4 = (bool)_swig_go_3; 
  
  {
    try {
      (arg1)->db_connect(arg2,arg3,arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_ConfigDBConnector_Native_db_connect__SWIG_1_swsscommon_728e05b169b08794(swss::ConfigDBConnector_Native *_swig_go_0, _gostring_ _swig_go_1, bool _swig_go_2) {
  swss::ConfigDBConnector_Native *arg1 = (swss::ConfigDBConnector_Native *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  
  arg1 = *(swss::ConfigDBConnector_Native **)&_swig_go_0; 
  (&arg2)->assign(_swig_go_1.p, _swig_go_1.n); 
  arg3 = (bool)_swig_go_2; 
  
  {
    try {
      (arg1)->db_connect(arg2,arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_ConfigDBConnector_Native_db_connect__SWIG_2_swsscommon_728e05b169b08794(swss::ConfigDBConnector_Native *_swig_go_0, _gostring_ _swig_go_1) {
  swss::ConfigDBConnector_Native *arg1 = (swss::ConfigDBConnector_Native *) 0 ;
  std::string arg2 ;
  
  arg1 = *(swss::ConfigDBConnector_Native **)&_swig_go_0; 
  (&arg2)->assign(_swig_go_1.p, _swig_go_1.n); 
  
  {
    try {
      (arg1)->db_connect(arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_ConfigDBConnector_Native_connect__SWIG_0_swsscommon_728e05b169b08794(swss::ConfigDBConnector_Native *_swig_go_0, bool _swig_go_1, bool _swig_go_2) {
  swss::ConfigDBConnector_Native *arg1 = (swss::ConfigDBConnector_Native *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  arg1 = *(swss::ConfigDBConnector_Native **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  arg3 = (bool)_swig_go_2; 
  
  {
    try {
      (arg1)->connect(arg2,arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_ConfigDBConnector_Native_connect__SWIG_1_swsscommon_728e05b169b08794(swss::ConfigDBConnector_Native *_swig_go_0, bool _swig_go_1) {
  swss::ConfigDBConnector_Native *arg1 = (swss::ConfigDBConnector_Native *) 0 ;
  bool arg2 ;
  
  arg1 = *(swss::ConfigDBConnector_Native **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  {
    try {
      (arg1)->connect(arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_ConfigDBConnector_Native_connect__SWIG_2_swsscommon_728e05b169b08794(swss::ConfigDBConnector_Native *_swig_go_0) {
  swss::ConfigDBConnector_Native *arg1 = (swss::ConfigDBConnector_Native *) 0 ;
  
  arg1 = *(swss::ConfigDBConnector_Native **)&_swig_go_0; 
  
  {
    try {
      (arg1)->connect();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_ConfigDBConnector_Native_set_entry_swsscommon_728e05b169b08794(swss::ConfigDBConnector_Native *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, std::map< std::string,std::string,std::less< std::string > > *_swig_go_3) {
  swss::ConfigDBConnector_Native *arg1 = (swss::ConfigDBConnector_Native *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::map< std::string,std::string,std::less< std::string > > *arg4 = 0 ;
  
  arg1 = *(swss::ConfigDBConnector_Native **)&_swig_go_0; 
  (&arg2)->assign(_swig_go_1.p, _swig_go_1.n); 
  (&arg3)->assign(_swig_go_2.p, _swig_go_2.n); 
  arg4 = *(std::map< std::string,std::string,std::less< std::string > > **)&_swig_go_3; 
  
  {
    try {
      (arg1)->set_entry(arg2,arg3,(std::map< std::string,std::string,std::less< std::string > > const &)*arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_ConfigDBConnector_Native_mod_entry_swsscommon_728e05b169b08794(swss::ConfigDBConnector_Native *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, std::map< std::string,std::string,std::less< std::string > > *_swig_go_3) {
  swss::ConfigDBConnector_Native *arg1 = (swss::ConfigDBConnector_Native *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::map< std::string,std::string,std::less< std::string > > *arg4 = 0 ;
  
  arg1 = *(swss::ConfigDBConnector_Native **)&_swig_go_0; 
  (&arg2)->assign(_swig_go_1.p, _swig_go_1.n); 
  (&arg3)->assign(_swig_go_2.p, _swig_go_2.n); 
  arg4 = *(std::map< std::string,std::string,std::less< std::string > > **)&_swig_go_3; 
  
  {
    try {
      (arg1)->mod_entry(arg2,arg3,(std::map< std::string,std::string,std::less< std::string > > const &)*arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


std::map< std::string,std::string,std::less< std::string > > *_wrap_ConfigDBConnector_Native_get_entry_swsscommon_728e05b169b08794(swss::ConfigDBConnector_Native *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  swss::ConfigDBConnector_Native *arg1 = (swss::ConfigDBConnector_Native *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::map< std::string,std::string,std::less< std::string > > result;
  std::map< std::string,std::string,std::less< std::string > > *_swig_go_result;
  
  arg1 = *(swss::ConfigDBConnector_Native **)&_swig_go_0; 
  (&arg2)->assign(_swig_go_1.p, _swig_go_1.n); 
  (&arg3)->assign(_swig_go_2.p, _swig_go_2.n); 
  
  {
    try {
      result = (arg1)->get_entry(arg2,arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::map< std::string,std::string,std::less< std::string > > **)&_swig_go_result = new std::map< std::string,std::string,std::less< std::string > >(result); 
  return _swig_go_result;
}


std::vector< std::string > *_wrap_ConfigDBConnector_Native_get_keys__SWIG_0_swsscommon_728e05b169b08794(swss::ConfigDBConnector_Native *_swig_go_0, _gostring_ _swig_go_1, bool _swig_go_2) {
  swss::ConfigDBConnector_Native *arg1 = (swss::ConfigDBConnector_Native *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  std::vector< std::string > result;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = *(swss::ConfigDBConnector_Native **)&_swig_go_0; 
  (&arg2)->assign(_swig_go_1.p, _swig_go_1.n); 
  arg3 = (bool)_swig_go_2; 
  
  {
    try {
      result = (arg1)->get_keys(arg2,arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::vector< std::string > **)&_swig_go_result = new std::vector< std::string >(result); 
  return _swig_go_result;
}


std::vector< std::string > *_wrap_ConfigDBConnector_Native_get_keys__SWIG_1_swsscommon_728e05b169b08794(swss::ConfigDBConnector_Native *_swig_go_0, _gostring_ _swig_go_1) {
  swss::ConfigDBConnector_Native *arg1 = (swss::ConfigDBConnector_Native *) 0 ;
  std::string arg2 ;
  std::vector< std::string > result;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = *(swss::ConfigDBConnector_Native **)&_swig_go_0; 
  (&arg2)->assign(_swig_go_1.p, _swig_go_1.n); 
  
  {
    try {
      result = (arg1)->get_keys(arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::vector< std::string > **)&_swig_go_result = new std::vector< std::string >(result); 
  return _swig_go_result;
}


std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > > *_wrap_ConfigDBConnector_Native_get_table_swsscommon_728e05b169b08794(swss::ConfigDBConnector_Native *_swig_go_0, _gostring_ _swig_go_1) {
  swss::ConfigDBConnector_Native *arg1 = (swss::ConfigDBConnector_Native *) 0 ;
  std::string arg2 ;
  std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > > result;
  std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > > *_swig_go_result;
  
  arg1 = *(swss::ConfigDBConnector_Native **)&_swig_go_0; 
  (&arg2)->assign(_swig_go_1.p, _swig_go_1.n); 
  
  {
    try {
      result = (arg1)->get_table(arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > > **)&_swig_go_result = new std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > >(result); 
  return _swig_go_result;
}


void _wrap_ConfigDBConnector_Native_delete_table_swsscommon_728e05b169b08794(swss::ConfigDBConnector_Native *_swig_go_0, _gostring_ _swig_go_1) {
  swss::ConfigDBConnector_Native *arg1 = (swss::ConfigDBConnector_Native *) 0 ;
  std::string arg2 ;
  
  arg1 = *(swss::ConfigDBConnector_Native **)&_swig_go_0; 
  (&arg2)->assign(_swig_go_1.p, _swig_go_1.n); 
  
  {
    try {
      (arg1)->delete_table(arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_ConfigDBConnector_Native_mod_config_swsscommon_728e05b169b08794(swss::ConfigDBConnector_Native *_swig_go_0, std::map< std::string,std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > >,std::less< std::string > > *_swig_go_1) {
  swss::ConfigDBConnector_Native *arg1 = (swss::ConfigDBConnector_Native *) 0 ;
  std::map< std::string,std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > >,std::less< std::string > > *arg2 = 0 ;
  
  arg1 = *(swss::ConfigDBConnector_Native **)&_swig_go_0; 
  arg2 = *(std::map< std::string,std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > >,std::less< std::string > > **)&_swig_go_1; 
  
  {
    try {
      (arg1)->mod_config((std::map< std::string,std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > >,std::less< std::string > > const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


std::map< std::string,std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > >,std::less< std::string > > *_wrap_ConfigDBConnector_Native_get_config_swsscommon_728e05b169b08794(swss::ConfigDBConnector_Native *_swig_go_0) {
  swss::ConfigDBConnector_Native *arg1 = (swss::ConfigDBConnector_Native *) 0 ;
  std::map< std::string,std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > >,std::less< std::string > > result;
  std::map< std::string,std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > >,std::less< std::string > > *_swig_go_result;
  
  arg1 = *(swss::ConfigDBConnector_Native **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->get_config();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::map< std::string,std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > >,std::less< std::string > > **)&_swig_go_result = new std::map< std::string,std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > >,std::less< std::string > >(result); 
  return _swig_go_result;
}


_gostring_ _wrap_ConfigDBConnector_Native_getKeySeparator_swsscommon_728e05b169b08794(swss::ConfigDBConnector_Native *_swig_go_0) {
  swss::ConfigDBConnector_Native *arg1 = (swss::ConfigDBConnector_Native *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ConfigDBConnector_Native **)&_swig_go_0; 
  
  {
    try {
      result = ((swss::ConfigDBConnector_Native const *)arg1)->getKeySeparator();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_ConfigDBConnector_Native_getTableNameSeparator_swsscommon_728e05b169b08794(swss::ConfigDBConnector_Native *_swig_go_0) {
  swss::ConfigDBConnector_Native *arg1 = (swss::ConfigDBConnector_Native *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ConfigDBConnector_Native **)&_swig_go_0; 
  
  {
    try {
      result = ((swss::ConfigDBConnector_Native const *)arg1)->getTableNameSeparator();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_ConfigDBConnector_Native_getDbName_swsscommon_728e05b169b08794(swss::ConfigDBConnector_Native *_swig_go_0) {
  swss::ConfigDBConnector_Native *arg1 = (swss::ConfigDBConnector_Native *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ConfigDBConnector_Native **)&_swig_go_0; 
  
  {
    try {
      result = ((swss::ConfigDBConnector_Native const *)arg1)->getDbName();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


void _wrap_delete_ConfigDBConnector_Native_swsscommon_728e05b169b08794(swss::ConfigDBConnector_Native *_swig_go_0) {
  swss::ConfigDBConnector_Native *arg1 = (swss::ConfigDBConnector_Native *) 0 ;
  
  arg1 = *(swss::ConfigDBConnector_Native **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


_gostring_ _wrap_ConfigDBConnector_Native_getNamespace_swsscommon_728e05b169b08794(swss::ConfigDBConnector_Native *_swig_go_0) {
  swss::ConfigDBConnector_Native *arg1 = (swss::ConfigDBConnector_Native *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ConfigDBConnector_Native **)&_swig_go_0; 
  
  swss::SonicV2Connector_Native *swig_b0 = (swss::SonicV2Connector_Native *)arg1;
  result = ((swss::SonicV2Connector_Native const *)swig_b0)->getNamespace();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


void _wrap_ConfigDBConnector_Native_close__SWIG_0_swsscommon_728e05b169b08794(swss::ConfigDBConnector_Native *_swig_go_0, _gostring_ _swig_go_1) {
  swss::ConfigDBConnector_Native *arg1 = (swss::ConfigDBConnector_Native *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(swss::ConfigDBConnector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  swss::SonicV2Connector_Native *swig_b0 = (swss::SonicV2Connector_Native *)arg1;
  (swig_b0)->close((std::string const &)*arg2);
  
}


void _wrap_ConfigDBConnector_Native_close__SWIG_1_swsscommon_728e05b169b08794(swss::ConfigDBConnector_Native *_swig_go_0) {
  swss::ConfigDBConnector_Native *arg1 = (swss::ConfigDBConnector_Native *) 0 ;
  
  arg1 = *(swss::ConfigDBConnector_Native **)&_swig_go_0; 
  
  swss::SonicV2Connector_Native *swig_b0 = (swss::SonicV2Connector_Native *)arg1;
  (swig_b0)->close();
  
}


std::vector< std::string > *_wrap_ConfigDBConnector_Native_get_db_list_swsscommon_728e05b169b08794(swss::ConfigDBConnector_Native *_swig_go_0) {
  swss::ConfigDBConnector_Native *arg1 = (swss::ConfigDBConnector_Native *) 0 ;
  std::vector< std::string > result;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = *(swss::ConfigDBConnector_Native **)&_swig_go_0; 
  
  swss::SonicV2Connector_Native *swig_b0 = (swss::SonicV2Connector_Native *)arg1;
  result = (swig_b0)->get_db_list();
  *(std::vector< std::string > **)&_swig_go_result = new std::vector< std::string >(result); 
  return _swig_go_result;
}


intgo _wrap_ConfigDBConnector_Native_get_dbid_swsscommon_728e05b169b08794(swss::ConfigDBConnector_Native *_swig_go_0, _gostring_ _swig_go_1) {
  swss::ConfigDBConnector_Native *arg1 = (swss::ConfigDBConnector_Native *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(swss::ConfigDBConnector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  swss::SonicV2Connector_Native *swig_b0 = (swss::SonicV2Connector_Native *)arg1;
  result = (int)(swig_b0)->get_dbid((std::string const &)*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_ConfigDBConnector_Native_get_db_separator_swsscommon_728e05b169b08794(swss::ConfigDBConnector_Native *_swig_go_0, _gostring_ _swig_go_1) {
  swss::ConfigDBConnector_Native *arg1 = (swss::ConfigDBConnector_Native *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ConfigDBConnector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  swss::SonicV2Connector_Native *swig_b0 = (swss::SonicV2Connector_Native *)arg1;
  result = (swig_b0)->get_db_separator((std::string const &)*arg2);
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


swss::DBConnector *_wrap_ConfigDBConnector_Native_get_redis_client_swsscommon_728e05b169b08794(swss::ConfigDBConnector_Native *_swig_go_0, _gostring_ _swig_go_1) {
  swss::ConfigDBConnector_Native *arg1 = (swss::ConfigDBConnector_Native *) 0 ;
  std::string *arg2 = 0 ;
  swss::DBConnector *result = 0 ;
  swss::DBConnector *_swig_go_result;
  
  arg1 = *(swss::ConfigDBConnector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  swss::SonicV2Connector_Native *swig_b0 = (swss::SonicV2Connector_Native *)arg1;
  result = (swss::DBConnector *) &(swig_b0)->get_redis_client((std::string const &)*arg2);
  *(swss::DBConnector **)&_swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_ConfigDBConnector_Native_publish_swsscommon_728e05b169b08794(swss::ConfigDBConnector_Native *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3) {
  swss::ConfigDBConnector_Native *arg1 = (swss::ConfigDBConnector_Native *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int64_t result;
  long long _swig_go_result;
  
  arg1 = *(swss::ConfigDBConnector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  swss::SonicV2Connector_Native *swig_b0 = (swss::SonicV2Connector_Native *)arg1;
  result = (int64_t)(swig_b0)->publish((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_ConfigDBConnector_Native_exists_swsscommon_728e05b169b08794(swss::ConfigDBConnector_Native *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  swss::ConfigDBConnector_Native *arg1 = (swss::ConfigDBConnector_Native *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::ConfigDBConnector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  swss::SonicV2Connector_Native *swig_b0 = (swss::SonicV2Connector_Native *)arg1;
  result = (bool)(swig_b0)->exists((std::string const &)*arg2,(std::string const &)*arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


std::vector< std::string > *_wrap_ConfigDBConnector_Native_keys__SWIG_0_swsscommon_728e05b169b08794(swss::ConfigDBConnector_Native *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, bool _swig_go_3) {
  swss::ConfigDBConnector_Native *arg1 = (swss::ConfigDBConnector_Native *) 0 ;
  std::string *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  std::vector< std::string > result;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = *(swss::ConfigDBConnector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';
  
  arg4 = (bool)_swig_go_3; 
  
  swss::SonicV2Connector_Native *swig_b0 = (swss::SonicV2Connector_Native *)arg1;
  result = (swig_b0)->keys((std::string const &)*arg2,(char const *)arg3,arg4);
  *(std::vector< std::string > **)&_swig_go_result = new std::vector< std::string >(result); 
  free(arg3); 
  return _swig_go_result;
}


std::vector< std::string > *_wrap_ConfigDBConnector_Native_keys__SWIG_1_swsscommon_728e05b169b08794(swss::ConfigDBConnector_Native *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  swss::ConfigDBConnector_Native *arg1 = (swss::ConfigDBConnector_Native *) 0 ;
  std::string *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  std::vector< std::string > result;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = *(swss::ConfigDBConnector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';
  
  
  swss::SonicV2Connector_Native *swig_b0 = (swss::SonicV2Connector_Native *)arg1;
  result = (swig_b0)->keys((std::string const &)*arg2,(char const *)arg3);
  *(std::vector< std::string > **)&_swig_go_result = new std::vector< std::string >(result); 
  free(arg3); 
  return _swig_go_result;
}


std::vector< std::string > *_wrap_ConfigDBConnector_Native_keys__SWIG_2_swsscommon_728e05b169b08794(swss::ConfigDBConnector_Native *_swig_go_0, _gostring_ _swig_go_1) {
  swss::ConfigDBConnector_Native *arg1 = (swss::ConfigDBConnector_Native *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > result;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = *(swss::ConfigDBConnector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  swss::SonicV2Connector_Native *swig_b0 = (swss::SonicV2Connector_Native *)arg1;
  result = (swig_b0)->keys((std::string const &)*arg2);
  *(std::vector< std::string > **)&_swig_go_result = new std::vector< std::string >(result); 
  return _swig_go_result;
}


std::pair< int,std::vector< std::string > > *_wrap_ConfigDBConnector_Native_scan__SWIG_0_swsscommon_728e05b169b08794(swss::ConfigDBConnector_Native *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, _gostring_ _swig_go_3, intgo _swig_go_4) {
  swss::ConfigDBConnector_Native *arg1 = (swss::ConfigDBConnector_Native *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  uint32_t arg5 ;
  SwigValueWrapper< std::pair< int,std::vector< std::string > > > result;
  std::pair< int,std::vector< std::string > > *_swig_go_result;
  
  arg1 = *(swss::ConfigDBConnector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (int)_swig_go_2; 
  
  arg4 = (char *)malloc(_swig_go_3.n + 1);
  memcpy(arg4, _swig_go_3.p, _swig_go_3.n);
  arg4[_swig_go_3.n] = '\0';
  
  arg5 = (uint32_t)_swig_go_4; 
  
  swss::SonicV2Connector_Native *swig_b0 = (swss::SonicV2Connector_Native *)arg1;
  result = (swig_b0)->scan((std::string const &)*arg2,arg3,(char const *)arg4,arg5);
  *(std::pair< int,std::vector< std::string > > **)&_swig_go_result = new std::pair< int,std::vector< std::string > >(result); 
  free(arg4); 
  return _swig_go_result;
}


std::pair< int,std::vector< std::string > > *_wrap_ConfigDBConnector_Native_scan__SWIG_1_swsscommon_728e05b169b08794(swss::ConfigDBConnector_Native *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, _gostring_ _swig_go_3) {
  swss::ConfigDBConnector_Native *arg1 = (swss::ConfigDBConnector_Native *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  SwigValueWrapper< std::pair< int,std::vector< std::string > > > result;
  std::pair< int,std::vector< std::string > > *_swig_go_result;
  
  arg1 = *(swss::ConfigDBConnector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (int)_swig_go_2; 
  
  arg4 = (char *)malloc(_swig_go_3.n + 1);
  memcpy(arg4, _swig_go_3.p, _swig_go_3.n);
  arg4[_swig_go_3.n] = '\0';
  
  
  swss::SonicV2Connector_Native *swig_b0 = (swss::SonicV2Connector_Native *)arg1;
  result = (swig_b0)->scan((std::string const &)*arg2,arg3,(char const *)arg4);
  *(std::pair< int,std::vector< std::string > > **)&_swig_go_result = new std::pair< int,std::vector< std::string > >(result); 
  free(arg4); 
  return _swig_go_result;
}


std::pair< int,std::vector< std::string > > *_wrap_ConfigDBConnector_Native_scan__SWIG_2_swsscommon_728e05b169b08794(swss::ConfigDBConnector_Native *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  swss::ConfigDBConnector_Native *arg1 = (swss::ConfigDBConnector_Native *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  SwigValueWrapper< std::pair< int,std::vector< std::string > > > result;
  std::pair< int,std::vector< std::string > > *_swig_go_result;
  
  arg1 = *(swss::ConfigDBConnector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (int)_swig_go_2; 
  
  swss::SonicV2Connector_Native *swig_b0 = (swss::SonicV2Connector_Native *)arg1;
  result = (swig_b0)->scan((std::string const &)*arg2,arg3);
  *(std::pair< int,std::vector< std::string > > **)&_swig_go_result = new std::pair< int,std::vector< std::string > >(result); 
  return _swig_go_result;
}


std::pair< int,std::vector< std::string > > *_wrap_ConfigDBConnector_Native_scan__SWIG_3_swsscommon_728e05b169b08794(swss::ConfigDBConnector_Native *_swig_go_0, _gostring_ _swig_go_1) {
  swss::ConfigDBConnector_Native *arg1 = (swss::ConfigDBConnector_Native *) 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< std::pair< int,std::vector< std::string > > > result;
  std::pair< int,std::vector< std::string > > *_swig_go_result;
  
  arg1 = *(swss::ConfigDBConnector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  swss::SonicV2Connector_Native *swig_b0 = (swss::SonicV2Connector_Native *)arg1;
  result = (swig_b0)->scan((std::string const &)*arg2);
  *(std::pair< int,std::vector< std::string > > **)&_swig_go_result = new std::pair< int,std::vector< std::string > >(result); 
  return _swig_go_result;
}


std::shared_ptr< std::string > *_wrap_ConfigDBConnector_Native_get__SWIG_0_swsscommon_728e05b169b08794(swss::ConfigDBConnector_Native *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3, bool _swig_go_4) {
  swss::ConfigDBConnector_Native *arg1 = (swss::ConfigDBConnector_Native *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool arg5 ;
  SwigValueWrapper< std::shared_ptr< std::string > > result;
  std::shared_ptr< std::string > *_swig_go_result;
  
  arg1 = *(swss::ConfigDBConnector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  arg5 = (bool)_swig_go_4; 
  
  swss::SonicV2Connector_Native *swig_b0 = (swss::SonicV2Connector_Native *)arg1;
  result = (swig_b0)->get((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5);
  *(std::shared_ptr< std::string > **)&_swig_go_result = new std::shared_ptr< std::string >(result); 
  return _swig_go_result;
}


std::shared_ptr< std::string > *_wrap_ConfigDBConnector_Native_get__SWIG_1_swsscommon_728e05b169b08794(swss::ConfigDBConnector_Native *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3) {
  swss::ConfigDBConnector_Native *arg1 = (swss::ConfigDBConnector_Native *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  SwigValueWrapper< std::shared_ptr< std::string > > result;
  std::shared_ptr< std::string > *_swig_go_result;
  
  arg1 = *(swss::ConfigDBConnector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  swss::SonicV2Connector_Native *swig_b0 = (swss::SonicV2Connector_Native *)arg1;
  result = (swig_b0)->get((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  *(std::shared_ptr< std::string > **)&_swig_go_result = new std::shared_ptr< std::string >(result); 
  return _swig_go_result;
}


bool _wrap_ConfigDBConnector_Native_hexists_swsscommon_728e05b169b08794(swss::ConfigDBConnector_Native *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3) {
  swss::ConfigDBConnector_Native *arg1 = (swss::ConfigDBConnector_Native *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::ConfigDBConnector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  swss::SonicV2Connector_Native *swig_b0 = (swss::SonicV2Connector_Native *)arg1;
  result = (bool)(swig_b0)->hexists((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


std::map< std::string,std::string,std::less< std::string > > *_wrap_ConfigDBConnector_Native_get_all__SWIG_0_swsscommon_728e05b169b08794(swss::ConfigDBConnector_Native *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, bool _swig_go_3) {
  swss::ConfigDBConnector_Native *arg1 = (swss::ConfigDBConnector_Native *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  std::map< std::string,std::string,std::less< std::string > > result;
  std::map< std::string,std::string,std::less< std::string > > *_swig_go_result;
  
  arg1 = *(swss::ConfigDBConnector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  arg4 = (bool)_swig_go_3; 
  
  swss::SonicV2Connector_Native *swig_b0 = (swss::SonicV2Connector_Native *)arg1;
  result = (swig_b0)->get_all((std::string const &)*arg2,(std::string const &)*arg3,arg4);
  *(std::map< std::string,std::string,std::less< std::string > > **)&_swig_go_result = new std::map< std::string,std::string,std::less< std::string > >(result); 
  return _swig_go_result;
}


std::map< std::string,std::string,std::less< std::string > > *_wrap_ConfigDBConnector_Native_get_all__SWIG_1_swsscommon_728e05b169b08794(swss::ConfigDBConnector_Native *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  swss::ConfigDBConnector_Native *arg1 = (swss::ConfigDBConnector_Native *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > result;
  std::map< std::string,std::string,std::less< std::string > > *_swig_go_result;
  
  arg1 = *(swss::ConfigDBConnector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  swss::SonicV2Connector_Native *swig_b0 = (swss::SonicV2Connector_Native *)arg1;
  result = (swig_b0)->get_all((std::string const &)*arg2,(std::string const &)*arg3);
  *(std::map< std::string,std::string,std::less< std::string > > **)&_swig_go_result = new std::map< std::string,std::string,std::less< std::string > >(result); 
  return _swig_go_result;
}


void _wrap_ConfigDBConnector_Native_hmset_swsscommon_728e05b169b08794(swss::ConfigDBConnector_Native *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, std::map< std::string,std::string,std::less< std::string > > *_swig_go_3) {
  swss::ConfigDBConnector_Native *arg1 = (swss::ConfigDBConnector_Native *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg4 = 0 ;
  
  arg1 = *(swss::ConfigDBConnector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  arg4 = *(std::map< std::string,std::string,std::less< std::string > > **)&_swig_go_3; 
  
  swss::SonicV2Connector_Native *swig_b0 = (swss::SonicV2Connector_Native *)arg1;
  (swig_b0)->hmset((std::string const &)*arg2,(std::string const &)*arg3,(std::map< std::string,std::string,std::less< std::string > > const &)*arg4);
  
}


long long _wrap_ConfigDBConnector_Native_set__SWIG_0_swsscommon_728e05b169b08794(swss::ConfigDBConnector_Native *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3, _gostring_ _swig_go_4, bool _swig_go_5) {
  swss::ConfigDBConnector_Native *arg1 = (swss::ConfigDBConnector_Native *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  bool arg6 ;
  int64_t result;
  long long _swig_go_result;
  
  arg1 = *(swss::ConfigDBConnector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(_swig_go_4.p, _swig_go_4.n);
  arg5 = &arg5_str;
  
  arg6 = (bool)_swig_go_5; 
  
  swss::SonicV2Connector_Native *swig_b0 = (swss::SonicV2Connector_Native *)arg1;
  result = (int64_t)(swig_b0)->set((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,arg6);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_ConfigDBConnector_Native_set__SWIG_1_swsscommon_728e05b169b08794(swss::ConfigDBConnector_Native *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3, _gostring_ _swig_go_4) {
  swss::ConfigDBConnector_Native *arg1 = (swss::ConfigDBConnector_Native *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  int64_t result;
  long long _swig_go_result;
  
  arg1 = *(swss::ConfigDBConnector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(_swig_go_4.p, _swig_go_4.n);
  arg5 = &arg5_str;
  
  
  swss::SonicV2Connector_Native *swig_b0 = (swss::SonicV2Connector_Native *)arg1;
  result = (int64_t)(swig_b0)->set((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_ConfigDBConnector_Native_delete__SWIG_0_swsscommon_728e05b169b08794(swss::ConfigDBConnector_Native *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, bool _swig_go_3) {
  swss::ConfigDBConnector_Native *arg1 = (swss::ConfigDBConnector_Native *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  int64_t result;
  long long _swig_go_result;
  
  arg1 = *(swss::ConfigDBConnector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  arg4 = (bool)_swig_go_3; 
  
  swss::SonicV2Connector_Native *swig_b0 = (swss::SonicV2Connector_Native *)arg1;
  result = (int64_t)(swig_b0)->del((std::string const &)*arg2,(std::string const &)*arg3,arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_ConfigDBConnector_Native_delete__SWIG_1_swsscommon_728e05b169b08794(swss::ConfigDBConnector_Native *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  swss::ConfigDBConnector_Native *arg1 = (swss::ConfigDBConnector_Native *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int64_t result;
  long long _swig_go_result;
  
  arg1 = *(swss::ConfigDBConnector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  swss::SonicV2Connector_Native *swig_b0 = (swss::SonicV2Connector_Native *)arg1;
  result = (int64_t)(swig_b0)->del((std::string const &)*arg2,(std::string const &)*arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ConfigDBConnector_Native_delete_all_by_pattern_swsscommon_728e05b169b08794(swss::ConfigDBConnector_Native *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  swss::ConfigDBConnector_Native *arg1 = (swss::ConfigDBConnector_Native *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = *(swss::ConfigDBConnector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  swss::SonicV2Connector_Native *swig_b0 = (swss::SonicV2Connector_Native *)arg1;
  (swig_b0)->delete_all_by_pattern((std::string const &)*arg2,(std::string const &)*arg3);
  
}


swss::ConfigDBPipeConnector_Native *_wrap_new_ConfigDBPipeConnector_Native__SWIG_0_swsscommon_728e05b169b08794(bool _swig_go_0, _gostring_ _swig_go_1) {
  bool arg1 ;
  char *arg2 = (char *) 0 ;
  swss::ConfigDBPipeConnector_Native *result = 0 ;
  swss::ConfigDBPipeConnector_Native *_swig_go_result;
  
  arg1 = (bool)_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  {
    try {
      result = (swss::ConfigDBPipeConnector_Native *)new swss::ConfigDBPipeConnector_Native(arg1,(char const *)arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::ConfigDBPipeConnector_Native **)&_swig_go_result = (swss::ConfigDBPipeConnector_Native *)result; 
  free(arg2); 
  return _swig_go_result;
}


swss::ConfigDBPipeConnector_Native *_wrap_new_ConfigDBPipeConnector_Native__SWIG_1_swsscommon_728e05b169b08794(bool _swig_go_0) {
  bool arg1 ;
  swss::ConfigDBPipeConnector_Native *result = 0 ;
  swss::ConfigDBPipeConnector_Native *_swig_go_result;
  
  arg1 = (bool)_swig_go_0; 
  
  {
    try {
      result = (swss::ConfigDBPipeConnector_Native *)new swss::ConfigDBPipeConnector_Native(arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::ConfigDBPipeConnector_Native **)&_swig_go_result = (swss::ConfigDBPipeConnector_Native *)result; 
  return _swig_go_result;
}


swss::ConfigDBPipeConnector_Native *_wrap_new_ConfigDBPipeConnector_Native__SWIG_2_swsscommon_728e05b169b08794() {
  swss::ConfigDBPipeConnector_Native *result = 0 ;
  swss::ConfigDBPipeConnector_Native *_swig_go_result;
  
  
  {
    try {
      result = (swss::ConfigDBPipeConnector_Native *)new swss::ConfigDBPipeConnector_Native();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::ConfigDBPipeConnector_Native **)&_swig_go_result = (swss::ConfigDBPipeConnector_Native *)result; 
  return _swig_go_result;
}


void _wrap_ConfigDBPipeConnector_Native_set_entry_swsscommon_728e05b169b08794(swss::ConfigDBPipeConnector_Native *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, std::map< std::string,std::string,std::less< std::string > > *_swig_go_3) {
  swss::ConfigDBPipeConnector_Native *arg1 = (swss::ConfigDBPipeConnector_Native *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::map< std::string,std::string,std::less< std::string > > *arg4 = 0 ;
  
  arg1 = *(swss::ConfigDBPipeConnector_Native **)&_swig_go_0; 
  (&arg2)->assign(_swig_go_1.p, _swig_go_1.n); 
  (&arg3)->assign(_swig_go_2.p, _swig_go_2.n); 
  arg4 = *(std::map< std::string,std::string,std::less< std::string > > **)&_swig_go_3; 
  
  {
    try {
      (arg1)->set_entry(arg2,arg3,(std::map< std::string,std::string,std::less< std::string > > const &)*arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_ConfigDBPipeConnector_Native_mod_config_swsscommon_728e05b169b08794(swss::ConfigDBPipeConnector_Native *_swig_go_0, std::map< std::string,std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > >,std::less< std::string > > *_swig_go_1) {
  swss::ConfigDBPipeConnector_Native *arg1 = (swss::ConfigDBPipeConnector_Native *) 0 ;
  std::map< std::string,std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > >,std::less< std::string > > *arg2 = 0 ;
  
  arg1 = *(swss::ConfigDBPipeConnector_Native **)&_swig_go_0; 
  arg2 = *(std::map< std::string,std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > >,std::less< std::string > > **)&_swig_go_1; 
  
  {
    try {
      (arg1)->mod_config((std::map< std::string,std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > >,std::less< std::string > > const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


std::map< std::string,std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > >,std::less< std::string > > *_wrap_ConfigDBPipeConnector_Native_get_config_swsscommon_728e05b169b08794(swss::ConfigDBPipeConnector_Native *_swig_go_0) {
  swss::ConfigDBPipeConnector_Native *arg1 = (swss::ConfigDBPipeConnector_Native *) 0 ;
  std::map< std::string,std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > >,std::less< std::string > > result;
  std::map< std::string,std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > >,std::less< std::string > > *_swig_go_result;
  
  arg1 = *(swss::ConfigDBPipeConnector_Native **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->get_config();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::map< std::string,std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > >,std::less< std::string > > **)&_swig_go_result = new std::map< std::string,std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > >,std::less< std::string > >(result); 
  return _swig_go_result;
}


void _wrap_delete_ConfigDBPipeConnector_Native_swsscommon_728e05b169b08794(swss::ConfigDBPipeConnector_Native *_swig_go_0) {
  swss::ConfigDBPipeConnector_Native *arg1 = (swss::ConfigDBPipeConnector_Native *) 0 ;
  
  arg1 = *(swss::ConfigDBPipeConnector_Native **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_ConfigDBPipeConnector_Native_db_connect__SWIG_0_swsscommon_728e05b169b08794(swss::ConfigDBPipeConnector_Native *_swig_go_0, _gostring_ _swig_go_1, bool _swig_go_2, bool _swig_go_3) {
  swss::ConfigDBPipeConnector_Native *arg1 = (swss::ConfigDBPipeConnector_Native *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  bool arg4 ;
  
  arg1 = *(swss::ConfigDBPipeConnector_Native **)&_swig_go_0; 
  (&arg2)->assign(_swig_go_1.p, _swig_go_1.n); 
  arg3 = (bool)_swig_go_2; 
  arg4 = (bool)_swig_go_3; 
  
  swss::ConfigDBConnector_Native *swig_b0 = (swss::ConfigDBConnector_Native *)arg1;
  (swig_b0)->db_connect(arg2,arg3,arg4);
  
}


void _wrap_ConfigDBPipeConnector_Native_db_connect__SWIG_1_swsscommon_728e05b169b08794(swss::ConfigDBPipeConnector_Native *_swig_go_0, _gostring_ _swig_go_1, bool _swig_go_2) {
  swss::ConfigDBPipeConnector_Native *arg1 = (swss::ConfigDBPipeConnector_Native *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  
  arg1 = *(swss::ConfigDBPipeConnector_Native **)&_swig_go_0; 
  (&arg2)->assign(_swig_go_1.p, _swig_go_1.n); 
  arg3 = (bool)_swig_go_2; 
  
  swss::ConfigDBConnector_Native *swig_b0 = (swss::ConfigDBConnector_Native *)arg1;
  (swig_b0)->db_connect(arg2,arg3);
  
}


void _wrap_ConfigDBPipeConnector_Native_db_connect__SWIG_2_swsscommon_728e05b169b08794(swss::ConfigDBPipeConnector_Native *_swig_go_0, _gostring_ _swig_go_1) {
  swss::ConfigDBPipeConnector_Native *arg1 = (swss::ConfigDBPipeConnector_Native *) 0 ;
  std::string arg2 ;
  
  arg1 = *(swss::ConfigDBPipeConnector_Native **)&_swig_go_0; 
  (&arg2)->assign(_swig_go_1.p, _swig_go_1.n); 
  
  swss::ConfigDBConnector_Native *swig_b0 = (swss::ConfigDBConnector_Native *)arg1;
  (swig_b0)->db_connect(arg2);
  
}


void _wrap_ConfigDBPipeConnector_Native_connect__SWIG_0_swsscommon_728e05b169b08794(swss::ConfigDBPipeConnector_Native *_swig_go_0, bool _swig_go_1, bool _swig_go_2) {
  swss::ConfigDBPipeConnector_Native *arg1 = (swss::ConfigDBPipeConnector_Native *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  arg1 = *(swss::ConfigDBPipeConnector_Native **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  arg3 = (bool)_swig_go_2; 
  
  swss::ConfigDBConnector_Native *swig_b0 = (swss::ConfigDBConnector_Native *)arg1;
  (swig_b0)->connect(arg2,arg3);
  
}


void _wrap_ConfigDBPipeConnector_Native_connect__SWIG_1_swsscommon_728e05b169b08794(swss::ConfigDBPipeConnector_Native *_swig_go_0, bool _swig_go_1) {
  swss::ConfigDBPipeConnector_Native *arg1 = (swss::ConfigDBPipeConnector_Native *) 0 ;
  bool arg2 ;
  
  arg1 = *(swss::ConfigDBPipeConnector_Native **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  swss::ConfigDBConnector_Native *swig_b0 = (swss::ConfigDBConnector_Native *)arg1;
  (swig_b0)->connect(arg2);
  
}


void _wrap_ConfigDBPipeConnector_Native_connect__SWIG_2_swsscommon_728e05b169b08794(swss::ConfigDBPipeConnector_Native *_swig_go_0) {
  swss::ConfigDBPipeConnector_Native *arg1 = (swss::ConfigDBPipeConnector_Native *) 0 ;
  
  arg1 = *(swss::ConfigDBPipeConnector_Native **)&_swig_go_0; 
  
  swss::ConfigDBConnector_Native *swig_b0 = (swss::ConfigDBConnector_Native *)arg1;
  (swig_b0)->connect();
  
}


void _wrap_ConfigDBPipeConnector_Native_mod_entry_swsscommon_728e05b169b08794(swss::ConfigDBPipeConnector_Native *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, std::map< std::string,std::string,std::less< std::string > > *_swig_go_3) {
  swss::ConfigDBPipeConnector_Native *arg1 = (swss::ConfigDBPipeConnector_Native *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::map< std::string,std::string,std::less< std::string > > *arg4 = 0 ;
  
  arg1 = *(swss::ConfigDBPipeConnector_Native **)&_swig_go_0; 
  (&arg2)->assign(_swig_go_1.p, _swig_go_1.n); 
  (&arg3)->assign(_swig_go_2.p, _swig_go_2.n); 
  arg4 = *(std::map< std::string,std::string,std::less< std::string > > **)&_swig_go_3; 
  
  swss::ConfigDBConnector_Native *swig_b0 = (swss::ConfigDBConnector_Native *)arg1;
  (swig_b0)->mod_entry(arg2,arg3,(std::map< std::string,std::string,std::less< std::string > > const &)*arg4);
  
}


std::map< std::string,std::string,std::less< std::string > > *_wrap_ConfigDBPipeConnector_Native_get_entry_swsscommon_728e05b169b08794(swss::ConfigDBPipeConnector_Native *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  swss::ConfigDBPipeConnector_Native *arg1 = (swss::ConfigDBPipeConnector_Native *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::map< std::string,std::string,std::less< std::string > > result;
  std::map< std::string,std::string,std::less< std::string > > *_swig_go_result;
  
  arg1 = *(swss::ConfigDBPipeConnector_Native **)&_swig_go_0; 
  (&arg2)->assign(_swig_go_1.p, _swig_go_1.n); 
  (&arg3)->assign(_swig_go_2.p, _swig_go_2.n); 
  
  swss::ConfigDBConnector_Native *swig_b0 = (swss::ConfigDBConnector_Native *)arg1;
  result = (swig_b0)->get_entry(arg2,arg3);
  *(std::map< std::string,std::string,std::less< std::string > > **)&_swig_go_result = new std::map< std::string,std::string,std::less< std::string > >(result); 
  return _swig_go_result;
}


std::vector< std::string > *_wrap_ConfigDBPipeConnector_Native_get_keys__SWIG_0_swsscommon_728e05b169b08794(swss::ConfigDBPipeConnector_Native *_swig_go_0, _gostring_ _swig_go_1, bool _swig_go_2) {
  swss::ConfigDBPipeConnector_Native *arg1 = (swss::ConfigDBPipeConnector_Native *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  std::vector< std::string > result;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = *(swss::ConfigDBPipeConnector_Native **)&_swig_go_0; 
  (&arg2)->assign(_swig_go_1.p, _swig_go_1.n); 
  arg3 = (bool)_swig_go_2; 
  
  swss::ConfigDBConnector_Native *swig_b0 = (swss::ConfigDBConnector_Native *)arg1;
  result = (swig_b0)->get_keys(arg2,arg3);
  *(std::vector< std::string > **)&_swig_go_result = new std::vector< std::string >(result); 
  return _swig_go_result;
}


std::vector< std::string > *_wrap_ConfigDBPipeConnector_Native_get_keys__SWIG_1_swsscommon_728e05b169b08794(swss::ConfigDBPipeConnector_Native *_swig_go_0, _gostring_ _swig_go_1) {
  swss::ConfigDBPipeConnector_Native *arg1 = (swss::ConfigDBPipeConnector_Native *) 0 ;
  std::string arg2 ;
  std::vector< std::string > result;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = *(swss::ConfigDBPipeConnector_Native **)&_swig_go_0; 
  (&arg2)->assign(_swig_go_1.p, _swig_go_1.n); 
  
  swss::ConfigDBConnector_Native *swig_b0 = (swss::ConfigDBConnector_Native *)arg1;
  result = (swig_b0)->get_keys(arg2);
  *(std::vector< std::string > **)&_swig_go_result = new std::vector< std::string >(result); 
  return _swig_go_result;
}


std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > > *_wrap_ConfigDBPipeConnector_Native_get_table_swsscommon_728e05b169b08794(swss::ConfigDBPipeConnector_Native *_swig_go_0, _gostring_ _swig_go_1) {
  swss::ConfigDBPipeConnector_Native *arg1 = (swss::ConfigDBPipeConnector_Native *) 0 ;
  std::string arg2 ;
  std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > > result;
  std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > > *_swig_go_result;
  
  arg1 = *(swss::ConfigDBPipeConnector_Native **)&_swig_go_0; 
  (&arg2)->assign(_swig_go_1.p, _swig_go_1.n); 
  
  swss::ConfigDBConnector_Native *swig_b0 = (swss::ConfigDBConnector_Native *)arg1;
  result = (swig_b0)->get_table(arg2);
  *(std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > > **)&_swig_go_result = new std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > >(result); 
  return _swig_go_result;
}


void _wrap_ConfigDBPipeConnector_Native_delete_table_swsscommon_728e05b169b08794(swss::ConfigDBPipeConnector_Native *_swig_go_0, _gostring_ _swig_go_1) {
  swss::ConfigDBPipeConnector_Native *arg1 = (swss::ConfigDBPipeConnector_Native *) 0 ;
  std::string arg2 ;
  
  arg1 = *(swss::ConfigDBPipeConnector_Native **)&_swig_go_0; 
  (&arg2)->assign(_swig_go_1.p, _swig_go_1.n); 
  
  swss::ConfigDBConnector_Native *swig_b0 = (swss::ConfigDBConnector_Native *)arg1;
  (swig_b0)->delete_table(arg2);
  
}


_gostring_ _wrap_ConfigDBPipeConnector_Native_getKeySeparator_swsscommon_728e05b169b08794(swss::ConfigDBPipeConnector_Native *_swig_go_0) {
  swss::ConfigDBPipeConnector_Native *arg1 = (swss::ConfigDBPipeConnector_Native *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ConfigDBPipeConnector_Native **)&_swig_go_0; 
  
  swss::ConfigDBConnector_Native *swig_b0 = (swss::ConfigDBConnector_Native *)arg1;
  result = ((swss::ConfigDBConnector_Native const *)swig_b0)->getKeySeparator();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_ConfigDBPipeConnector_Native_getTableNameSeparator_swsscommon_728e05b169b08794(swss::ConfigDBPipeConnector_Native *_swig_go_0) {
  swss::ConfigDBPipeConnector_Native *arg1 = (swss::ConfigDBPipeConnector_Native *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ConfigDBPipeConnector_Native **)&_swig_go_0; 
  
  swss::ConfigDBConnector_Native *swig_b0 = (swss::ConfigDBConnector_Native *)arg1;
  result = ((swss::ConfigDBConnector_Native const *)swig_b0)->getTableNameSeparator();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_ConfigDBPipeConnector_Native_getDbName_swsscommon_728e05b169b08794(swss::ConfigDBPipeConnector_Native *_swig_go_0) {
  swss::ConfigDBPipeConnector_Native *arg1 = (swss::ConfigDBPipeConnector_Native *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ConfigDBPipeConnector_Native **)&_swig_go_0; 
  
  swss::ConfigDBConnector_Native *swig_b0 = (swss::ConfigDBConnector_Native *)arg1;
  result = ((swss::ConfigDBConnector_Native const *)swig_b0)->getDbName();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_ConfigDBPipeConnector_Native_getNamespace_swsscommon_728e05b169b08794(swss::ConfigDBPipeConnector_Native *_swig_go_0) {
  swss::ConfigDBPipeConnector_Native *arg1 = (swss::ConfigDBPipeConnector_Native *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ConfigDBPipeConnector_Native **)&_swig_go_0; 
  
  swss::ConfigDBConnector_Native *swig_b0 = (swss::ConfigDBConnector_Native *)arg1;
  swss::SonicV2Connector_Native *swig_b1 = (swss::SonicV2Connector_Native *)swig_b0;
  result = ((swss::SonicV2Connector_Native const *)swig_b1)->getNamespace();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


void _wrap_ConfigDBPipeConnector_Native_close__SWIG_0_swsscommon_728e05b169b08794(swss::ConfigDBPipeConnector_Native *_swig_go_0, _gostring_ _swig_go_1) {
  swss::ConfigDBPipeConnector_Native *arg1 = (swss::ConfigDBPipeConnector_Native *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(swss::ConfigDBPipeConnector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  swss::ConfigDBConnector_Native *swig_b0 = (swss::ConfigDBConnector_Native *)arg1;
  swss::SonicV2Connector_Native *swig_b1 = (swss::SonicV2Connector_Native *)swig_b0;
  (swig_b1)->close((std::string const &)*arg2);
  
}


void _wrap_ConfigDBPipeConnector_Native_close__SWIG_1_swsscommon_728e05b169b08794(swss::ConfigDBPipeConnector_Native *_swig_go_0) {
  swss::ConfigDBPipeConnector_Native *arg1 = (swss::ConfigDBPipeConnector_Native *) 0 ;
  
  arg1 = *(swss::ConfigDBPipeConnector_Native **)&_swig_go_0; 
  
  swss::ConfigDBConnector_Native *swig_b0 = (swss::ConfigDBConnector_Native *)arg1;
  swss::SonicV2Connector_Native *swig_b1 = (swss::SonicV2Connector_Native *)swig_b0;
  (swig_b1)->close();
  
}


std::vector< std::string > *_wrap_ConfigDBPipeConnector_Native_get_db_list_swsscommon_728e05b169b08794(swss::ConfigDBPipeConnector_Native *_swig_go_0) {
  swss::ConfigDBPipeConnector_Native *arg1 = (swss::ConfigDBPipeConnector_Native *) 0 ;
  std::vector< std::string > result;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = *(swss::ConfigDBPipeConnector_Native **)&_swig_go_0; 
  
  swss::ConfigDBConnector_Native *swig_b0 = (swss::ConfigDBConnector_Native *)arg1;
  swss::SonicV2Connector_Native *swig_b1 = (swss::SonicV2Connector_Native *)swig_b0;
  result = (swig_b1)->get_db_list();
  *(std::vector< std::string > **)&_swig_go_result = new std::vector< std::string >(result); 
  return _swig_go_result;
}


intgo _wrap_ConfigDBPipeConnector_Native_get_dbid_swsscommon_728e05b169b08794(swss::ConfigDBPipeConnector_Native *_swig_go_0, _gostring_ _swig_go_1) {
  swss::ConfigDBPipeConnector_Native *arg1 = (swss::ConfigDBPipeConnector_Native *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(swss::ConfigDBPipeConnector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  swss::ConfigDBConnector_Native *swig_b0 = (swss::ConfigDBConnector_Native *)arg1;
  swss::SonicV2Connector_Native *swig_b1 = (swss::SonicV2Connector_Native *)swig_b0;
  result = (int)(swig_b1)->get_dbid((std::string const &)*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_ConfigDBPipeConnector_Native_get_db_separator_swsscommon_728e05b169b08794(swss::ConfigDBPipeConnector_Native *_swig_go_0, _gostring_ _swig_go_1) {
  swss::ConfigDBPipeConnector_Native *arg1 = (swss::ConfigDBPipeConnector_Native *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ConfigDBPipeConnector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  swss::ConfigDBConnector_Native *swig_b0 = (swss::ConfigDBConnector_Native *)arg1;
  swss::SonicV2Connector_Native *swig_b1 = (swss::SonicV2Connector_Native *)swig_b0;
  result = (swig_b1)->get_db_separator((std::string const &)*arg2);
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


swss::DBConnector *_wrap_ConfigDBPipeConnector_Native_get_redis_client_swsscommon_728e05b169b08794(swss::ConfigDBPipeConnector_Native *_swig_go_0, _gostring_ _swig_go_1) {
  swss::ConfigDBPipeConnector_Native *arg1 = (swss::ConfigDBPipeConnector_Native *) 0 ;
  std::string *arg2 = 0 ;
  swss::DBConnector *result = 0 ;
  swss::DBConnector *_swig_go_result;
  
  arg1 = *(swss::ConfigDBPipeConnector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  swss::ConfigDBConnector_Native *swig_b0 = (swss::ConfigDBConnector_Native *)arg1;
  swss::SonicV2Connector_Native *swig_b1 = (swss::SonicV2Connector_Native *)swig_b0;
  result = (swss::DBConnector *) &(swig_b1)->get_redis_client((std::string const &)*arg2);
  *(swss::DBConnector **)&_swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_ConfigDBPipeConnector_Native_publish_swsscommon_728e05b169b08794(swss::ConfigDBPipeConnector_Native *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3) {
  swss::ConfigDBPipeConnector_Native *arg1 = (swss::ConfigDBPipeConnector_Native *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int64_t result;
  long long _swig_go_result;
  
  arg1 = *(swss::ConfigDBPipeConnector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  swss::ConfigDBConnector_Native *swig_b0 = (swss::ConfigDBConnector_Native *)arg1;
  swss::SonicV2Connector_Native *swig_b1 = (swss::SonicV2Connector_Native *)swig_b0;
  result = (int64_t)(swig_b1)->publish((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_ConfigDBPipeConnector_Native_exists_swsscommon_728e05b169b08794(swss::ConfigDBPipeConnector_Native *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  swss::ConfigDBPipeConnector_Native *arg1 = (swss::ConfigDBPipeConnector_Native *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::ConfigDBPipeConnector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  swss::ConfigDBConnector_Native *swig_b0 = (swss::ConfigDBConnector_Native *)arg1;
  swss::SonicV2Connector_Native *swig_b1 = (swss::SonicV2Connector_Native *)swig_b0;
  result = (bool)(swig_b1)->exists((std::string const &)*arg2,(std::string const &)*arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


std::vector< std::string > *_wrap_ConfigDBPipeConnector_Native_keys__SWIG_0_swsscommon_728e05b169b08794(swss::ConfigDBPipeConnector_Native *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, bool _swig_go_3) {
  swss::ConfigDBPipeConnector_Native *arg1 = (swss::ConfigDBPipeConnector_Native *) 0 ;
  std::string *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  std::vector< std::string > result;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = *(swss::ConfigDBPipeConnector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';
  
  arg4 = (bool)_swig_go_3; 
  
  swss::ConfigDBConnector_Native *swig_b0 = (swss::ConfigDBConnector_Native *)arg1;
  swss::SonicV2Connector_Native *swig_b1 = (swss::SonicV2Connector_Native *)swig_b0;
  result = (swig_b1)->keys((std::string const &)*arg2,(char const *)arg3,arg4);
  *(std::vector< std::string > **)&_swig_go_result = new std::vector< std::string >(result); 
  free(arg3); 
  return _swig_go_result;
}


std::vector< std::string > *_wrap_ConfigDBPipeConnector_Native_keys__SWIG_1_swsscommon_728e05b169b08794(swss::ConfigDBPipeConnector_Native *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  swss::ConfigDBPipeConnector_Native *arg1 = (swss::ConfigDBPipeConnector_Native *) 0 ;
  std::string *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  std::vector< std::string > result;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = *(swss::ConfigDBPipeConnector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';
  
  
  swss::ConfigDBConnector_Native *swig_b0 = (swss::ConfigDBConnector_Native *)arg1;
  swss::SonicV2Connector_Native *swig_b1 = (swss::SonicV2Connector_Native *)swig_b0;
  result = (swig_b1)->keys((std::string const &)*arg2,(char const *)arg3);
  *(std::vector< std::string > **)&_swig_go_result = new std::vector< std::string >(result); 
  free(arg3); 
  return _swig_go_result;
}


std::vector< std::string > *_wrap_ConfigDBPipeConnector_Native_keys__SWIG_2_swsscommon_728e05b169b08794(swss::ConfigDBPipeConnector_Native *_swig_go_0, _gostring_ _swig_go_1) {
  swss::ConfigDBPipeConnector_Native *arg1 = (swss::ConfigDBPipeConnector_Native *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > result;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = *(swss::ConfigDBPipeConnector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  swss::ConfigDBConnector_Native *swig_b0 = (swss::ConfigDBConnector_Native *)arg1;
  swss::SonicV2Connector_Native *swig_b1 = (swss::SonicV2Connector_Native *)swig_b0;
  result = (swig_b1)->keys((std::string const &)*arg2);
  *(std::vector< std::string > **)&_swig_go_result = new std::vector< std::string >(result); 
  return _swig_go_result;
}


std::pair< int,std::vector< std::string > > *_wrap_ConfigDBPipeConnector_Native_scan__SWIG_0_swsscommon_728e05b169b08794(swss::ConfigDBPipeConnector_Native *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, _gostring_ _swig_go_3, intgo _swig_go_4) {
  swss::ConfigDBPipeConnector_Native *arg1 = (swss::ConfigDBPipeConnector_Native *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  uint32_t arg5 ;
  SwigValueWrapper< std::pair< int,std::vector< std::string > > > result;
  std::pair< int,std::vector< std::string > > *_swig_go_result;
  
  arg1 = *(swss::ConfigDBPipeConnector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (int)_swig_go_2; 
  
  arg4 = (char *)malloc(_swig_go_3.n + 1);
  memcpy(arg4, _swig_go_3.p, _swig_go_3.n);
  arg4[_swig_go_3.n] = '\0';
  
  arg5 = (uint32_t)_swig_go_4; 
  
  swss::ConfigDBConnector_Native *swig_b0 = (swss::ConfigDBConnector_Native *)arg1;
  swss::SonicV2Connector_Native *swig_b1 = (swss::SonicV2Connector_Native *)swig_b0;
  result = (swig_b1)->scan((std::string const &)*arg2,arg3,(char const *)arg4,arg5);
  *(std::pair< int,std::vector< std::string > > **)&_swig_go_result = new std::pair< int,std::vector< std::string > >(result); 
  free(arg4); 
  return _swig_go_result;
}


std::pair< int,std::vector< std::string > > *_wrap_ConfigDBPipeConnector_Native_scan__SWIG_1_swsscommon_728e05b169b08794(swss::ConfigDBPipeConnector_Native *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, _gostring_ _swig_go_3) {
  swss::ConfigDBPipeConnector_Native *arg1 = (swss::ConfigDBPipeConnector_Native *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  SwigValueWrapper< std::pair< int,std::vector< std::string > > > result;
  std::pair< int,std::vector< std::string > > *_swig_go_result;
  
  arg1 = *(swss::ConfigDBPipeConnector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (int)_swig_go_2; 
  
  arg4 = (char *)malloc(_swig_go_3.n + 1);
  memcpy(arg4, _swig_go_3.p, _swig_go_3.n);
  arg4[_swig_go_3.n] = '\0';
  
  
  swss::ConfigDBConnector_Native *swig_b0 = (swss::ConfigDBConnector_Native *)arg1;
  swss::SonicV2Connector_Native *swig_b1 = (swss::SonicV2Connector_Native *)swig_b0;
  result = (swig_b1)->scan((std::string const &)*arg2,arg3,(char const *)arg4);
  *(std::pair< int,std::vector< std::string > > **)&_swig_go_result = new std::pair< int,std::vector< std::string > >(result); 
  free(arg4); 
  return _swig_go_result;
}


std::pair< int,std::vector< std::string > > *_wrap_ConfigDBPipeConnector_Native_scan__SWIG_2_swsscommon_728e05b169b08794(swss::ConfigDBPipeConnector_Native *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  swss::ConfigDBPipeConnector_Native *arg1 = (swss::ConfigDBPipeConnector_Native *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  SwigValueWrapper< std::pair< int,std::vector< std::string > > > result;
  std::pair< int,std::vector< std::string > > *_swig_go_result;
  
  arg1 = *(swss::ConfigDBPipeConnector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (int)_swig_go_2; 
  
  swss::ConfigDBConnector_Native *swig_b0 = (swss::ConfigDBConnector_Native *)arg1;
  swss::SonicV2Connector_Native *swig_b1 = (swss::SonicV2Connector_Native *)swig_b0;
  result = (swig_b1)->scan((std::string const &)*arg2,arg3);
  *(std::pair< int,std::vector< std::string > > **)&_swig_go_result = new std::pair< int,std::vector< std::string > >(result); 
  return _swig_go_result;
}


std::pair< int,std::vector< std::string > > *_wrap_ConfigDBPipeConnector_Native_scan__SWIG_3_swsscommon_728e05b169b08794(swss::ConfigDBPipeConnector_Native *_swig_go_0, _gostring_ _swig_go_1) {
  swss::ConfigDBPipeConnector_Native *arg1 = (swss::ConfigDBPipeConnector_Native *) 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< std::pair< int,std::vector< std::string > > > result;
  std::pair< int,std::vector< std::string > > *_swig_go_result;
  
  arg1 = *(swss::ConfigDBPipeConnector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  swss::ConfigDBConnector_Native *swig_b0 = (swss::ConfigDBConnector_Native *)arg1;
  swss::SonicV2Connector_Native *swig_b1 = (swss::SonicV2Connector_Native *)swig_b0;
  result = (swig_b1)->scan((std::string const &)*arg2);
  *(std::pair< int,std::vector< std::string > > **)&_swig_go_result = new std::pair< int,std::vector< std::string > >(result); 
  return _swig_go_result;
}


std::shared_ptr< std::string > *_wrap_ConfigDBPipeConnector_Native_get__SWIG_0_swsscommon_728e05b169b08794(swss::ConfigDBPipeConnector_Native *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3, bool _swig_go_4) {
  swss::ConfigDBPipeConnector_Native *arg1 = (swss::ConfigDBPipeConnector_Native *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool arg5 ;
  SwigValueWrapper< std::shared_ptr< std::string > > result;
  std::shared_ptr< std::string > *_swig_go_result;
  
  arg1 = *(swss::ConfigDBPipeConnector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  arg5 = (bool)_swig_go_4; 
  
  swss::ConfigDBConnector_Native *swig_b0 = (swss::ConfigDBConnector_Native *)arg1;
  swss::SonicV2Connector_Native *swig_b1 = (swss::SonicV2Connector_Native *)swig_b0;
  result = (swig_b1)->get((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5);
  *(std::shared_ptr< std::string > **)&_swig_go_result = new std::shared_ptr< std::string >(result); 
  return _swig_go_result;
}


std::shared_ptr< std::string > *_wrap_ConfigDBPipeConnector_Native_get__SWIG_1_swsscommon_728e05b169b08794(swss::ConfigDBPipeConnector_Native *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3) {
  swss::ConfigDBPipeConnector_Native *arg1 = (swss::ConfigDBPipeConnector_Native *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  SwigValueWrapper< std::shared_ptr< std::string > > result;
  std::shared_ptr< std::string > *_swig_go_result;
  
  arg1 = *(swss::ConfigDBPipeConnector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  swss::ConfigDBConnector_Native *swig_b0 = (swss::ConfigDBConnector_Native *)arg1;
  swss::SonicV2Connector_Native *swig_b1 = (swss::SonicV2Connector_Native *)swig_b0;
  result = (swig_b1)->get((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  *(std::shared_ptr< std::string > **)&_swig_go_result = new std::shared_ptr< std::string >(result); 
  return _swig_go_result;
}


bool _wrap_ConfigDBPipeConnector_Native_hexists_swsscommon_728e05b169b08794(swss::ConfigDBPipeConnector_Native *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3) {
  swss::ConfigDBPipeConnector_Native *arg1 = (swss::ConfigDBPipeConnector_Native *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::ConfigDBPipeConnector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  swss::ConfigDBConnector_Native *swig_b0 = (swss::ConfigDBConnector_Native *)arg1;
  swss::SonicV2Connector_Native *swig_b1 = (swss::SonicV2Connector_Native *)swig_b0;
  result = (bool)(swig_b1)->hexists((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


std::map< std::string,std::string,std::less< std::string > > *_wrap_ConfigDBPipeConnector_Native_get_all__SWIG_0_swsscommon_728e05b169b08794(swss::ConfigDBPipeConnector_Native *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, bool _swig_go_3) {
  swss::ConfigDBPipeConnector_Native *arg1 = (swss::ConfigDBPipeConnector_Native *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  std::map< std::string,std::string,std::less< std::string > > result;
  std::map< std::string,std::string,std::less< std::string > > *_swig_go_result;
  
  arg1 = *(swss::ConfigDBPipeConnector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  arg4 = (bool)_swig_go_3; 
  
  swss::ConfigDBConnector_Native *swig_b0 = (swss::ConfigDBConnector_Native *)arg1;
  swss::SonicV2Connector_Native *swig_b1 = (swss::SonicV2Connector_Native *)swig_b0;
  result = (swig_b1)->get_all((std::string const &)*arg2,(std::string const &)*arg3,arg4);
  *(std::map< std::string,std::string,std::less< std::string > > **)&_swig_go_result = new std::map< std::string,std::string,std::less< std::string > >(result); 
  return _swig_go_result;
}


std::map< std::string,std::string,std::less< std::string > > *_wrap_ConfigDBPipeConnector_Native_get_all__SWIG_1_swsscommon_728e05b169b08794(swss::ConfigDBPipeConnector_Native *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  swss::ConfigDBPipeConnector_Native *arg1 = (swss::ConfigDBPipeConnector_Native *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > result;
  std::map< std::string,std::string,std::less< std::string > > *_swig_go_result;
  
  arg1 = *(swss::ConfigDBPipeConnector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  swss::ConfigDBConnector_Native *swig_b0 = (swss::ConfigDBConnector_Native *)arg1;
  swss::SonicV2Connector_Native *swig_b1 = (swss::SonicV2Connector_Native *)swig_b0;
  result = (swig_b1)->get_all((std::string const &)*arg2,(std::string const &)*arg3);
  *(std::map< std::string,std::string,std::less< std::string > > **)&_swig_go_result = new std::map< std::string,std::string,std::less< std::string > >(result); 
  return _swig_go_result;
}


void _wrap_ConfigDBPipeConnector_Native_hmset_swsscommon_728e05b169b08794(swss::ConfigDBPipeConnector_Native *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, std::map< std::string,std::string,std::less< std::string > > *_swig_go_3) {
  swss::ConfigDBPipeConnector_Native *arg1 = (swss::ConfigDBPipeConnector_Native *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg4 = 0 ;
  
  arg1 = *(swss::ConfigDBPipeConnector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  arg4 = *(std::map< std::string,std::string,std::less< std::string > > **)&_swig_go_3; 
  
  swss::ConfigDBConnector_Native *swig_b0 = (swss::ConfigDBConnector_Native *)arg1;
  swss::SonicV2Connector_Native *swig_b1 = (swss::SonicV2Connector_Native *)swig_b0;
  (swig_b1)->hmset((std::string const &)*arg2,(std::string const &)*arg3,(std::map< std::string,std::string,std::less< std::string > > const &)*arg4);
  
}


long long _wrap_ConfigDBPipeConnector_Native_set__SWIG_0_swsscommon_728e05b169b08794(swss::ConfigDBPipeConnector_Native *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3, _gostring_ _swig_go_4, bool _swig_go_5) {
  swss::ConfigDBPipeConnector_Native *arg1 = (swss::ConfigDBPipeConnector_Native *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  bool arg6 ;
  int64_t result;
  long long _swig_go_result;
  
  arg1 = *(swss::ConfigDBPipeConnector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(_swig_go_4.p, _swig_go_4.n);
  arg5 = &arg5_str;
  
  arg6 = (bool)_swig_go_5; 
  
  swss::ConfigDBConnector_Native *swig_b0 = (swss::ConfigDBConnector_Native *)arg1;
  swss::SonicV2Connector_Native *swig_b1 = (swss::SonicV2Connector_Native *)swig_b0;
  result = (int64_t)(swig_b1)->set((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,arg6);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_ConfigDBPipeConnector_Native_set__SWIG_1_swsscommon_728e05b169b08794(swss::ConfigDBPipeConnector_Native *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3, _gostring_ _swig_go_4) {
  swss::ConfigDBPipeConnector_Native *arg1 = (swss::ConfigDBPipeConnector_Native *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  int64_t result;
  long long _swig_go_result;
  
  arg1 = *(swss::ConfigDBPipeConnector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(_swig_go_4.p, _swig_go_4.n);
  arg5 = &arg5_str;
  
  
  swss::ConfigDBConnector_Native *swig_b0 = (swss::ConfigDBConnector_Native *)arg1;
  swss::SonicV2Connector_Native *swig_b1 = (swss::SonicV2Connector_Native *)swig_b0;
  result = (int64_t)(swig_b1)->set((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_ConfigDBPipeConnector_Native_delete__SWIG_0_swsscommon_728e05b169b08794(swss::ConfigDBPipeConnector_Native *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, bool _swig_go_3) {
  swss::ConfigDBPipeConnector_Native *arg1 = (swss::ConfigDBPipeConnector_Native *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  int64_t result;
  long long _swig_go_result;
  
  arg1 = *(swss::ConfigDBPipeConnector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  arg4 = (bool)_swig_go_3; 
  
  swss::ConfigDBConnector_Native *swig_b0 = (swss::ConfigDBConnector_Native *)arg1;
  swss::SonicV2Connector_Native *swig_b1 = (swss::SonicV2Connector_Native *)swig_b0;
  result = (int64_t)(swig_b1)->del((std::string const &)*arg2,(std::string const &)*arg3,arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_ConfigDBPipeConnector_Native_delete__SWIG_1_swsscommon_728e05b169b08794(swss::ConfigDBPipeConnector_Native *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  swss::ConfigDBPipeConnector_Native *arg1 = (swss::ConfigDBPipeConnector_Native *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int64_t result;
  long long _swig_go_result;
  
  arg1 = *(swss::ConfigDBPipeConnector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  swss::ConfigDBConnector_Native *swig_b0 = (swss::ConfigDBConnector_Native *)arg1;
  swss::SonicV2Connector_Native *swig_b1 = (swss::SonicV2Connector_Native *)swig_b0;
  result = (int64_t)(swig_b1)->del((std::string const &)*arg2,(std::string const &)*arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ConfigDBPipeConnector_Native_delete_all_by_pattern_swsscommon_728e05b169b08794(swss::ConfigDBPipeConnector_Native *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  swss::ConfigDBPipeConnector_Native *arg1 = (swss::ConfigDBPipeConnector_Native *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = *(swss::ConfigDBPipeConnector_Native **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  swss::ConfigDBConnector_Native *swig_b0 = (swss::ConfigDBConnector_Native *)arg1;
  swss::SonicV2Connector_Native *swig_b1 = (swss::SonicV2Connector_Native *)swig_b0;
  (swig_b1)->delete_all_by_pattern((std::string const &)*arg2,(std::string const &)*arg3);
  
}


intgo _wrap_MQ_RESPONSE_MAX_COUNT_swsscommon_728e05b169b08794() {
  int result;
  intgo _swig_go_result;
  
  
  result = (int)((16*1024*1024));
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_MQ_POLL_TIMEOUT_swsscommon_728e05b169b08794() {
  int result;
  intgo _swig_go_result;
  
  
  result = (int)((1000));
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_ORCH_ZMQ_PORT_get_swsscommon_728e05b169b08794() {
  int result;
  intgo _swig_go_result;
  
  
  result = (int)(int)ORCH_ZMQ_PORT;
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_ZmqMessageHandler_swsscommon_728e05b169b08794(swss::ZmqMessageHandler *_swig_go_0) {
  swss::ZmqMessageHandler *arg1 = (swss::ZmqMessageHandler *) 0 ;
  
  arg1 = *(swss::ZmqMessageHandler **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_ZmqMessageHandler_handleReceivedData_swsscommon_728e05b169b08794(swss::ZmqMessageHandler *_swig_go_0, std::vector< std::shared_ptr< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > > *_swig_go_1) {
  swss::ZmqMessageHandler *arg1 = (swss::ZmqMessageHandler *) 0 ;
  std::vector< std::shared_ptr< swss::KeyOpFieldsValuesTuple > > *arg2 = 0 ;
  
  arg1 = *(swss::ZmqMessageHandler **)&_swig_go_0; 
  arg2 = *(std::vector< std::shared_ptr< swss::KeyOpFieldsValuesTuple > > **)&_swig_go_1; 
  
  {
    try {
      (arg1)->handleReceivedData((std::vector< std::shared_ptr< swss::KeyOpFieldsValuesTuple > > const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


intgo _wrap_ZmqServer_DEFAULT_POP_BATCH_SIZE_ZmqServer_swsscommon_728e05b169b08794() {
  int result;
  intgo _swig_go_result;
  
  
  result = swss::ZmqServer::DEFAULT_POP_BATCH_SIZE;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


swss::ZmqServer *_wrap_new_ZmqServer_swsscommon_728e05b169b08794(_gostring_ _swig_go_0) {
  std::string *arg1 = 0 ;
  swss::ZmqServer *result = 0 ;
  swss::ZmqServer *_swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  {
    try {
      result = (swss::ZmqServer *)new swss::ZmqServer((std::string const &)*arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::ZmqServer **)&_swig_go_result = (swss::ZmqServer *)result; 
  return _swig_go_result;
}


void _wrap_delete_ZmqServer_swsscommon_728e05b169b08794(swss::ZmqServer *_swig_go_0) {
  swss::ZmqServer *arg1 = (swss::ZmqServer *) 0 ;
  
  arg1 = *(swss::ZmqServer **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_ZmqServer_registerMessageHandler_swsscommon_728e05b169b08794(swss::ZmqServer *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, swss::ZmqMessageHandler *_swig_go_3) {
  swss::ZmqServer *arg1 = (swss::ZmqServer *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  swss::ZmqMessageHandler *arg4 = (swss::ZmqMessageHandler *) 0 ;
  
  arg1 = *(swss::ZmqServer **)&_swig_go_0; 
  (&arg2)->assign(_swig_go_1.p, _swig_go_1.n); 
  (&arg3)->assign(_swig_go_2.p, _swig_go_2.n); 
  arg4 = *(swss::ZmqMessageHandler **)&_swig_go_3; 
  
  {
    try {
      (arg1)->registerMessageHandler(arg2,arg3,arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


swss::ZmqClient *_wrap_new_ZmqClient_swsscommon_728e05b169b08794(_gostring_ _swig_go_0) {
  std::string *arg1 = 0 ;
  swss::ZmqClient *result = 0 ;
  swss::ZmqClient *_swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  {
    try {
      result = (swss::ZmqClient *)new swss::ZmqClient((std::string const &)*arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::ZmqClient **)&_swig_go_result = (swss::ZmqClient *)result; 
  return _swig_go_result;
}


void _wrap_delete_ZmqClient_swsscommon_728e05b169b08794(swss::ZmqClient *_swig_go_0) {
  swss::ZmqClient *arg1 = (swss::ZmqClient *) 0 ;
  
  arg1 = *(swss::ZmqClient **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


bool _wrap_ZmqClient_isConnected_swsscommon_728e05b169b08794(swss::ZmqClient *_swig_go_0) {
  swss::ZmqClient *arg1 = (swss::ZmqClient *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::ZmqClient **)&_swig_go_0; 
  
  {
    try {
      result = (bool)(arg1)->isConnected();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ZmqClient_connect_swsscommon_728e05b169b08794(swss::ZmqClient *_swig_go_0) {
  swss::ZmqClient *arg1 = (swss::ZmqClient *) 0 ;
  
  arg1 = *(swss::ZmqClient **)&_swig_go_0; 
  
  {
    try {
      (arg1)->connect();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_ZmqClient_sendMsg_swsscommon_728e05b169b08794(swss::ZmqClient *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, std::vector< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_3, std::vector< char > *_swig_go_4) {
  swss::ZmqClient *arg1 = (swss::ZmqClient *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::vector< swss::KeyOpFieldsValuesTuple > *arg4 = 0 ;
  std::vector< char > *arg5 = 0 ;
  
  arg1 = *(swss::ZmqClient **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  arg4 = *(std::vector< swss::KeyOpFieldsValuesTuple > **)&_swig_go_3; 
  arg5 = *(std::vector< char > **)&_swig_go_4; 
  
  {
    try {
      (arg1)->sendMsg((std::string const &)*arg2,(std::string const &)*arg3,(std::vector< swss::KeyOpFieldsValuesTuple > const &)*arg4,*arg5);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


intgo _wrap_ZmqConsumerStateTable_DEFAULT_POP_BATCH_SIZE_ZmqConsumerStateTable_swsscommon_728e05b169b08794() {
  int result;
  intgo _swig_go_result;
  
  
  result = swss::ZmqConsumerStateTable::DEFAULT_POP_BATCH_SIZE;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


swss::ZmqConsumerStateTable *_wrap_new_ZmqConsumerStateTable__SWIG_0_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0, _gostring_ _swig_go_1, swss::ZmqServer *_swig_go_2, intgo _swig_go_3, intgo _swig_go_4, bool _swig_go_5) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  std::string *arg2 = 0 ;
  swss::ZmqServer *arg3 = 0 ;
  int arg4 ;
  int arg5 ;
  bool arg6 ;
  swss::ZmqConsumerStateTable *result = 0 ;
  swss::ZmqConsumerStateTable *_swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = *(swss::ZmqServer **)&_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  arg5 = (int)_swig_go_4; 
  arg6 = (bool)_swig_go_5; 
  
  {
    try {
      result = (swss::ZmqConsumerStateTable *)new swss::ZmqConsumerStateTable(arg1,(std::string const &)*arg2,*arg3,arg4,arg5,arg6);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::ZmqConsumerStateTable **)&_swig_go_result = (swss::ZmqConsumerStateTable *)result; 
  return _swig_go_result;
}


swss::ZmqConsumerStateTable *_wrap_new_ZmqConsumerStateTable__SWIG_1_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0, _gostring_ _swig_go_1, swss::ZmqServer *_swig_go_2, intgo _swig_go_3, intgo _swig_go_4) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  std::string *arg2 = 0 ;
  swss::ZmqServer *arg3 = 0 ;
  int arg4 ;
  int arg5 ;
  swss::ZmqConsumerStateTable *result = 0 ;
  swss::ZmqConsumerStateTable *_swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = *(swss::ZmqServer **)&_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  arg5 = (int)_swig_go_4; 
  
  {
    try {
      result = (swss::ZmqConsumerStateTable *)new swss::ZmqConsumerStateTable(arg1,(std::string const &)*arg2,*arg3,arg4,arg5);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::ZmqConsumerStateTable **)&_swig_go_result = (swss::ZmqConsumerStateTable *)result; 
  return _swig_go_result;
}


swss::ZmqConsumerStateTable *_wrap_new_ZmqConsumerStateTable__SWIG_2_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0, _gostring_ _swig_go_1, swss::ZmqServer *_swig_go_2, intgo _swig_go_3) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  std::string *arg2 = 0 ;
  swss::ZmqServer *arg3 = 0 ;
  int arg4 ;
  swss::ZmqConsumerStateTable *result = 0 ;
  swss::ZmqConsumerStateTable *_swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = *(swss::ZmqServer **)&_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  
  {
    try {
      result = (swss::ZmqConsumerStateTable *)new swss::ZmqConsumerStateTable(arg1,(std::string const &)*arg2,*arg3,arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::ZmqConsumerStateTable **)&_swig_go_result = (swss::ZmqConsumerStateTable *)result; 
  return _swig_go_result;
}


swss::ZmqConsumerStateTable *_wrap_new_ZmqConsumerStateTable__SWIG_3_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0, _gostring_ _swig_go_1, swss::ZmqServer *_swig_go_2) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  std::string *arg2 = 0 ;
  swss::ZmqServer *arg3 = 0 ;
  swss::ZmqConsumerStateTable *result = 0 ;
  swss::ZmqConsumerStateTable *_swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = *(swss::ZmqServer **)&_swig_go_2; 
  
  {
    try {
      result = (swss::ZmqConsumerStateTable *)new swss::ZmqConsumerStateTable(arg1,(std::string const &)*arg2,*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::ZmqConsumerStateTable **)&_swig_go_result = (swss::ZmqConsumerStateTable *)result; 
  return _swig_go_result;
}


void _wrap_ZmqConsumerStateTable_pops__SWIG_0_swsscommon_728e05b169b08794(swss::ZmqConsumerStateTable *_swig_go_0, std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_1, _gostring_ _swig_go_2) {
  swss::ZmqConsumerStateTable *arg1 = (swss::ZmqConsumerStateTable *) 0 ;
  std::deque< swss::KeyOpFieldsValuesTuple > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = *(swss::ZmqConsumerStateTable **)&_swig_go_0; 
  arg2 = *(std::deque< swss::KeyOpFieldsValuesTuple > **)&_swig_go_1; 
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      (arg1)->pops(*arg2,(std::string const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_ZmqConsumerStateTable_pops__SWIG_1_swsscommon_728e05b169b08794(swss::ZmqConsumerStateTable *_swig_go_0, std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_1) {
  swss::ZmqConsumerStateTable *arg1 = (swss::ZmqConsumerStateTable *) 0 ;
  std::deque< swss::KeyOpFieldsValuesTuple > *arg2 = 0 ;
  
  arg1 = *(swss::ZmqConsumerStateTable **)&_swig_go_0; 
  arg2 = *(std::deque< swss::KeyOpFieldsValuesTuple > **)&_swig_go_1; 
  
  {
    try {
      (arg1)->pops(*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


intgo _wrap_ZmqConsumerStateTable_getFd_swsscommon_728e05b169b08794(swss::ZmqConsumerStateTable *_swig_go_0) {
  swss::ZmqConsumerStateTable *arg1 = (swss::ZmqConsumerStateTable *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(swss::ZmqConsumerStateTable **)&_swig_go_0; 
  
  {
    try {
      result = (int)(arg1)->getFd();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_ZmqConsumerStateTable_readData_swsscommon_728e05b169b08794(swss::ZmqConsumerStateTable *_swig_go_0) {
  swss::ZmqConsumerStateTable *arg1 = (swss::ZmqConsumerStateTable *) 0 ;
  uint64_t result;
  long long _swig_go_result;
  
  arg1 = *(swss::ZmqConsumerStateTable **)&_swig_go_0; 
  
  {
    try {
      result = (uint64_t)(arg1)->readData();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_ZmqConsumerStateTable_hasData_swsscommon_728e05b169b08794(swss::ZmqConsumerStateTable *_swig_go_0) {
  swss::ZmqConsumerStateTable *arg1 = (swss::ZmqConsumerStateTable *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::ZmqConsumerStateTable **)&_swig_go_0; 
  
  {
    try {
      result = (bool)(arg1)->hasData();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_ZmqConsumerStateTable_hasCachedData_swsscommon_728e05b169b08794(swss::ZmqConsumerStateTable *_swig_go_0) {
  swss::ZmqConsumerStateTable *arg1 = (swss::ZmqConsumerStateTable *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::ZmqConsumerStateTable **)&_swig_go_0; 
  
  {
    try {
      result = (bool)(arg1)->hasCachedData();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_ZmqConsumerStateTable_initializedWithData_swsscommon_728e05b169b08794(swss::ZmqConsumerStateTable *_swig_go_0) {
  swss::ZmqConsumerStateTable *arg1 = (swss::ZmqConsumerStateTable *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::ZmqConsumerStateTable **)&_swig_go_0; 
  
  {
    try {
      result = (bool)(arg1)->initializedWithData();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


swss::DBConnector *_wrap_ZmqConsumerStateTable_getDbConnector_swsscommon_728e05b169b08794(swss::ZmqConsumerStateTable *_swig_go_0) {
  swss::ZmqConsumerStateTable *arg1 = (swss::ZmqConsumerStateTable *) 0 ;
  swss::DBConnector *result = 0 ;
  swss::DBConnector *_swig_go_result;
  
  arg1 = *(swss::ZmqConsumerStateTable **)&_swig_go_0; 
  
  {
    try {
      result = (swss::DBConnector *)((swss::ZmqConsumerStateTable const *)arg1)->getDbConnector();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::DBConnector **)&_swig_go_result = (swss::DBConnector *)result; 
  return _swig_go_result;
}


long long _wrap_ZmqConsumerStateTable_dbUpdaterQueueSize_swsscommon_728e05b169b08794(swss::ZmqConsumerStateTable *_swig_go_0) {
  swss::ZmqConsumerStateTable *arg1 = (swss::ZmqConsumerStateTable *) 0 ;
  size_t result;
  long long _swig_go_result;
  
  arg1 = *(swss::ZmqConsumerStateTable **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->dbUpdaterQueueSize();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_ZmqConsumerStateTable_swsscommon_728e05b169b08794(swss::ZmqConsumerStateTable *_swig_go_0) {
  swss::ZmqConsumerStateTable *arg1 = (swss::ZmqConsumerStateTable *) 0 ;
  
  arg1 = *(swss::ZmqConsumerStateTable **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_ZmqConsumerStateTable_updateAfterRead_swsscommon_728e05b169b08794(swss::ZmqConsumerStateTable *_swig_go_0) {
  swss::ZmqConsumerStateTable *arg1 = (swss::ZmqConsumerStateTable *) 0 ;
  
  arg1 = *(swss::ZmqConsumerStateTable **)&_swig_go_0; 
  
  swss::Selectable *swig_b0 = (swss::Selectable *)arg1;
  (swig_b0)->updateAfterRead();
  
}


intgo _wrap_ZmqConsumerStateTable_getPri_swsscommon_728e05b169b08794(swss::ZmqConsumerStateTable *_swig_go_0) {
  swss::ZmqConsumerStateTable *arg1 = (swss::ZmqConsumerStateTable *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(swss::ZmqConsumerStateTable **)&_swig_go_0; 
  
  swss::Selectable *swig_b0 = (swss::Selectable *)arg1;
  result = (int)((swss::Selectable const *)swig_b0)->getPri();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ZmqConsumerStateTable_handleReceivedData_swsscommon_728e05b169b08794(swss::ZmqConsumerStateTable *_swig_go_0, std::vector< std::shared_ptr< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > > *_swig_go_1) {
  swss::ZmqConsumerStateTable *arg1 = (swss::ZmqConsumerStateTable *) 0 ;
  std::vector< std::shared_ptr< swss::KeyOpFieldsValuesTuple > > *arg2 = 0 ;
  
  arg1 = *(swss::ZmqConsumerStateTable **)&_swig_go_0; 
  arg2 = *(std::vector< std::shared_ptr< swss::KeyOpFieldsValuesTuple > > **)&_swig_go_1; 
  
  swss::ZmqMessageHandler *swig_b0 = (swss::ZmqMessageHandler *)arg1;
  (swig_b0)->handleReceivedData((std::vector< std::shared_ptr< swss::KeyOpFieldsValuesTuple > > const &)*arg2);
  
}


swss::ZmqMessageHandler *_wrap_ZmqConsumerStateTable_SwigGetZmqMessageHandler_swsscommon_728e05b169b08794(swss::ZmqConsumerStateTable *_swig_go_0) {
  swss::ZmqConsumerStateTable *arg1 = (swss::ZmqConsumerStateTable *) 0 ;
  swss::ZmqMessageHandler *result = 0 ;
  swss::ZmqMessageHandler *_swig_go_result;
  
  arg1 = *(swss::ZmqConsumerStateTable **)&_swig_go_0; 
  
  {
    try {
      result = (swss::ZmqMessageHandler*)arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::ZmqMessageHandler **)&_swig_go_result = (swss::ZmqMessageHandler *)result; 
  return _swig_go_result;
}


long long _wrap_IFACE_NAME_MAX_LEN_get_swsscommon_728e05b169b08794() {
  size_t result;
  long long _swig_go_result;
  
  
  result = (size_t)swss::IFACE_NAME_MAX_LEN;
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_isInterfaceNameValid_swsscommon_728e05b169b08794(_gostring_ _swig_go_0) {
  std::string *arg1 = 0 ;
  bool result;
  bool _swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  {
    try {
      result = (bool)swss::isInterfaceNameValid((std::string const &)*arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > *_wrap_zmqWait_swsscommon_728e05b169b08794(swss::ZmqProducerStateTable *_swig_go_0) {
  swss::ZmqProducerStateTable *arg1 = 0 ;
  std::vector< std::pair< std::string,std::vector< swss::FieldValueTuple > > > result;
  std::vector< std::pair< std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_result;
  
  arg1 = *(swss::ZmqProducerStateTable **)&_swig_go_0; 
  
  {
    try {
      result = zmqWait(*arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::vector< std::pair< std::string,std::vector< swss::FieldValueTuple > > > **)&_swig_go_result = new std::vector< std::pair< std::string,std::vector< swss::FieldValueTuple > > >(result); 
  return _swig_go_result;
}


swss::TableBase *_wrap_new_TableBase__SWIG_0_swsscommon_728e05b169b08794(intgo _swig_go_0, _gostring_ _swig_go_1) {
  int arg1 ;
  std::string *arg2 = 0 ;
  swss::TableBase *result = 0 ;
  swss::TableBase *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = (swss::TableBase *)new swss::TableBase(arg1,(std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::TableBase **)&_swig_go_result = (swss::TableBase *)result; 
  return _swig_go_result;
}


swss::TableBase *_wrap_new_TableBase__SWIG_1_swsscommon_728e05b169b08794(_gostring_ _swig_go_0, _gostring_ _swig_go_1) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  swss::TableBase *result = 0 ;
  swss::TableBase *_swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = (swss::TableBase *)new swss::TableBase((std::string const &)*arg1,(std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::TableBase **)&_swig_go_result = (swss::TableBase *)result; 
  return _swig_go_result;
}


_gostring_ _wrap_TableBase_getTableSeparator_swsscommon_728e05b169b08794(intgo _swig_go_0) {
  int arg1 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  {
    try {
      result = swss::TableBase::getTableSeparator(arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_TableBase_getTableName_swsscommon_728e05b169b08794(swss::TableBase *_swig_go_0) {
  swss::TableBase *arg1 = (swss::TableBase *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::TableBase **)&_swig_go_0; 
  
  {
    try {
      result = ((swss::TableBase const *)arg1)->getTableName();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_TableBase_getKeyName_swsscommon_728e05b169b08794(swss::TableBase *_swig_go_0, _gostring_ _swig_go_1) {
  swss::TableBase *arg1 = (swss::TableBase *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::TableBase **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = (arg1)->getKeyName((std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_TableBase_getTableNameSeparator_swsscommon_728e05b169b08794(swss::TableBase *_swig_go_0) {
  swss::TableBase *arg1 = (swss::TableBase *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::TableBase **)&_swig_go_0; 
  
  {
    try {
      result = ((swss::TableBase const *)arg1)->getTableNameSeparator();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_TableBase_getChannelName__SWIG_0_swsscommon_728e05b169b08794(swss::TableBase *_swig_go_0) {
  swss::TableBase *arg1 = (swss::TableBase *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::TableBase **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->getChannelName();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_TableBase_getChannelName__SWIG_1_swsscommon_728e05b169b08794(swss::TableBase *_swig_go_0, _gostring_ _swig_go_1) {
  swss::TableBase *arg1 = (swss::TableBase *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::TableBase **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = (arg1)->getChannelName((std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_TableBase_getChannelName__SWIG_2_swsscommon_728e05b169b08794(swss::TableBase *_swig_go_0, intgo _swig_go_1) {
  swss::TableBase *arg1 = (swss::TableBase *) 0 ;
  int arg2 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::TableBase **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  {
    try {
      result = (arg1)->getChannelName(arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


void _wrap_delete_TableBase_swsscommon_728e05b169b08794(swss::TableBase *_swig_go_0) {
  swss::TableBase *arg1 = (swss::TableBase *) 0 ;
  
  arg1 = *(swss::TableBase **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_delete_TableEntryWritable_swsscommon_728e05b169b08794(swss::TableEntryWritable *_swig_go_0) {
  swss::TableEntryWritable *arg1 = (swss::TableEntryWritable *) 0 ;
  
  arg1 = *(swss::TableEntryWritable **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_TableEntryWritable_set__SWIG_0_swsscommon_728e05b169b08794(swss::TableEntryWritable *_swig_go_0, _gostring_ _swig_go_1, std::vector< std::pair< std::string,std::string > > *_swig_go_2, _gostring_ _swig_go_3, _gostring_ _swig_go_4) {
  swss::TableEntryWritable *arg1 = (swss::TableEntryWritable *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< swss::FieldValueTuple > *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  
  arg1 = *(swss::TableEntryWritable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = *(std::vector< swss::FieldValueTuple > **)&_swig_go_2; 
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(_swig_go_4.p, _swig_go_4.n);
  arg5 = &arg5_str;
  
  
  {
    try {
      (arg1)->set((std::string const &)*arg2,(std::vector< swss::FieldValueTuple > const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_TableEntryWritable_set__SWIG_1_swsscommon_728e05b169b08794(swss::TableEntryWritable *_swig_go_0, _gostring_ _swig_go_1, std::vector< std::pair< std::string,std::string > > *_swig_go_2, _gostring_ _swig_go_3) {
  swss::TableEntryWritable *arg1 = (swss::TableEntryWritable *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< swss::FieldValueTuple > *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  arg1 = *(swss::TableEntryWritable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = *(std::vector< swss::FieldValueTuple > **)&_swig_go_2; 
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  {
    try {
      (arg1)->set((std::string const &)*arg2,(std::vector< swss::FieldValueTuple > const &)*arg3,(std::string const &)*arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_TableEntryWritable_set__SWIG_2_swsscommon_728e05b169b08794(swss::TableEntryWritable *_swig_go_0, _gostring_ _swig_go_1, std::vector< std::pair< std::string,std::string > > *_swig_go_2) {
  swss::TableEntryWritable *arg1 = (swss::TableEntryWritable *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< swss::FieldValueTuple > *arg3 = 0 ;
  
  arg1 = *(swss::TableEntryWritable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = *(std::vector< swss::FieldValueTuple > **)&_swig_go_2; 
  
  {
    try {
      (arg1)->set((std::string const &)*arg2,(std::vector< swss::FieldValueTuple > const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_TableEntryWritable_delete__SWIG_0_swsscommon_728e05b169b08794(swss::TableEntryWritable *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3) {
  swss::TableEntryWritable *arg1 = (swss::TableEntryWritable *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  arg1 = *(swss::TableEntryWritable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  {
    try {
      (arg1)->del((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_TableEntryWritable_delete__SWIG_1_swsscommon_728e05b169b08794(swss::TableEntryWritable *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  swss::TableEntryWritable *arg1 = (swss::TableEntryWritable *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = *(swss::TableEntryWritable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      (arg1)->del((std::string const &)*arg2,(std::string const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_TableEntryWritable_delete__SWIG_2_swsscommon_728e05b169b08794(swss::TableEntryWritable *_swig_go_0, _gostring_ _swig_go_1) {
  swss::TableEntryWritable *arg1 = (swss::TableEntryWritable *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(swss::TableEntryWritable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      (arg1)->del((std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_delete_TableEntryPoppable_swsscommon_728e05b169b08794(swss::TableEntryPoppable *_swig_go_0) {
  swss::TableEntryPoppable *arg1 = (swss::TableEntryPoppable *) 0 ;
  
  arg1 = *(swss::TableEntryPoppable **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_TableEntryPoppable_pop__SWIG_0_swsscommon_728e05b169b08794(swss::TableEntryPoppable *_swig_go_0, std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > *_swig_go_1, _gostring_ _swig_go_2) {
  swss::TableEntryPoppable *arg1 = (swss::TableEntryPoppable *) 0 ;
  swss::KeyOpFieldsValuesTuple *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = *(swss::TableEntryPoppable **)&_swig_go_0; 
  arg2 = *(swss::KeyOpFieldsValuesTuple **)&_swig_go_1; 
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      (arg1)->pop(*arg2,(std::string const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_TableEntryPoppable_pop__SWIG_1_swsscommon_728e05b169b08794(swss::TableEntryPoppable *_swig_go_0, std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > *_swig_go_1) {
  swss::TableEntryPoppable *arg1 = (swss::TableEntryPoppable *) 0 ;
  swss::KeyOpFieldsValuesTuple *arg2 = 0 ;
  
  arg1 = *(swss::TableEntryPoppable **)&_swig_go_0; 
  arg2 = *(swss::KeyOpFieldsValuesTuple **)&_swig_go_1; 
  
  {
    try {
      (arg1)->pop(*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_TableEntryPoppable_pops__SWIG_0_swsscommon_728e05b169b08794(swss::TableEntryPoppable *_swig_go_0, std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_1) {
  swss::TableEntryPoppable *arg1 = (swss::TableEntryPoppable *) 0 ;
  std::deque< swss::KeyOpFieldsValuesTuple > *arg2 = 0 ;
  
  arg1 = *(swss::TableEntryPoppable **)&_swig_go_0; 
  arg2 = *(std::deque< swss::KeyOpFieldsValuesTuple > **)&_swig_go_1; 
  
  {
    try {
      (arg1)->pops(*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_TableEntryPoppable_pops__SWIG_1_swsscommon_728e05b169b08794(swss::TableEntryPoppable *_swig_go_0, std::vector< std::string > *_swig_go_1, std::vector< std::string > *_swig_go_2, std::vector< std::vector< std::pair< std::string,std::string > > > *_swig_go_3, _gostring_ _swig_go_4) {
  swss::TableEntryPoppable *arg1 = (swss::TableEntryPoppable *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  std::vector< std::string > *arg3 = 0 ;
  std::vector< std::vector< swss::FieldValueTuple > > *arg4 = 0 ;
  std::string *arg5 = 0 ;
  
  arg1 = *(swss::TableEntryPoppable **)&_swig_go_0; 
  arg2 = *(std::vector< std::string > **)&_swig_go_1; 
  arg3 = *(std::vector< std::string > **)&_swig_go_2; 
  arg4 = *(std::vector< std::vector< swss::FieldValueTuple > > **)&_swig_go_3; 
  
  std::string arg5_str(_swig_go_4.p, _swig_go_4.n);
  arg5 = &arg5_str;
  
  
  {
    try {
      (arg1)->pops(*arg2,*arg3,*arg4,(std::string const &)*arg5);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_TableEntryPoppable_pops__SWIG_2_swsscommon_728e05b169b08794(swss::TableEntryPoppable *_swig_go_0, std::vector< std::string > *_swig_go_1, std::vector< std::string > *_swig_go_2, std::vector< std::vector< std::pair< std::string,std::string > > > *_swig_go_3) {
  swss::TableEntryPoppable *arg1 = (swss::TableEntryPoppable *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  std::vector< std::string > *arg3 = 0 ;
  std::vector< std::vector< swss::FieldValueTuple > > *arg4 = 0 ;
  
  arg1 = *(swss::TableEntryPoppable **)&_swig_go_0; 
  arg2 = *(std::vector< std::string > **)&_swig_go_1; 
  arg3 = *(std::vector< std::string > **)&_swig_go_2; 
  arg4 = *(std::vector< std::vector< swss::FieldValueTuple > > **)&_swig_go_3; 
  
  {
    try {
      (arg1)->pops(*arg2,*arg3,*arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


intgo _wrap_TableConsumable_DEFAULT_POP_BATCH_SIZE_TableConsumable_swsscommon_728e05b169b08794() {
  int result;
  intgo _swig_go_result;
  
  
  result = swss::TableConsumable::DEFAULT_POP_BATCH_SIZE;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_TableConsumable_swsscommon_728e05b169b08794(swss::TableConsumable *_swig_go_0) {
  swss::TableConsumable *arg1 = (swss::TableConsumable *) 0 ;
  
  arg1 = *(swss::TableConsumable **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


_gostring_ _wrap_TableConsumable_getTableSeparator_swsscommon_728e05b169b08794(intgo _swig_go_0) {
  int arg1 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  {
    try {
      result = swss::TableBase::getTableSeparator(arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_TableConsumable_getTableName_swsscommon_728e05b169b08794(swss::TableConsumable *_swig_go_0) {
  swss::TableConsumable *arg1 = (swss::TableConsumable *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::TableConsumable **)&_swig_go_0; 
  
  swss::TableBase *swig_b0 = (swss::TableBase *)arg1;
  result = ((swss::TableBase const *)swig_b0)->getTableName();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_TableConsumable_getKeyName_swsscommon_728e05b169b08794(swss::TableConsumable *_swig_go_0, _gostring_ _swig_go_1) {
  swss::TableConsumable *arg1 = (swss::TableConsumable *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::TableConsumable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  swss::TableBase *swig_b0 = (swss::TableBase *)arg1;
  result = (swig_b0)->getKeyName((std::string const &)*arg2);
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_TableConsumable_getTableNameSeparator_swsscommon_728e05b169b08794(swss::TableConsumable *_swig_go_0) {
  swss::TableConsumable *arg1 = (swss::TableConsumable *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::TableConsumable **)&_swig_go_0; 
  
  swss::TableBase *swig_b0 = (swss::TableBase *)arg1;
  result = ((swss::TableBase const *)swig_b0)->getTableNameSeparator();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_TableConsumable_getChannelName__SWIG_0_swsscommon_728e05b169b08794(swss::TableConsumable *_swig_go_0) {
  swss::TableConsumable *arg1 = (swss::TableConsumable *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::TableConsumable **)&_swig_go_0; 
  
  swss::TableBase *swig_b0 = (swss::TableBase *)arg1;
  result = (swig_b0)->getChannelName();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_TableConsumable_getChannelName__SWIG_1_swsscommon_728e05b169b08794(swss::TableConsumable *_swig_go_0, _gostring_ _swig_go_1) {
  swss::TableConsumable *arg1 = (swss::TableConsumable *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::TableConsumable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  swss::TableBase *swig_b0 = (swss::TableBase *)arg1;
  result = (swig_b0)->getChannelName((std::string const &)*arg2);
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_TableConsumable_getChannelName__SWIG_2_swsscommon_728e05b169b08794(swss::TableConsumable *_swig_go_0, intgo _swig_go_1) {
  swss::TableConsumable *arg1 = (swss::TableConsumable *) 0 ;
  int arg2 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::TableConsumable **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  swss::TableBase *swig_b0 = (swss::TableBase *)arg1;
  result = (swig_b0)->getChannelName(arg2);
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


void _wrap_TableConsumable_pop__SWIG_0_swsscommon_728e05b169b08794(swss::TableConsumable *_swig_go_0, std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > *_swig_go_1, _gostring_ _swig_go_2) {
  swss::TableConsumable *arg1 = (swss::TableConsumable *) 0 ;
  swss::KeyOpFieldsValuesTuple *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = *(swss::TableConsumable **)&_swig_go_0; 
  arg2 = *(swss::KeyOpFieldsValuesTuple **)&_swig_go_1; 
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  swss::TableEntryPoppable *swig_b0 = (swss::TableEntryPoppable *)arg1;
  (swig_b0)->pop(*arg2,(std::string const &)*arg3);
  
}


void _wrap_TableConsumable_pop__SWIG_1_swsscommon_728e05b169b08794(swss::TableConsumable *_swig_go_0, std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > *_swig_go_1) {
  swss::TableConsumable *arg1 = (swss::TableConsumable *) 0 ;
  swss::KeyOpFieldsValuesTuple *arg2 = 0 ;
  
  arg1 = *(swss::TableConsumable **)&_swig_go_0; 
  arg2 = *(swss::KeyOpFieldsValuesTuple **)&_swig_go_1; 
  
  swss::TableEntryPoppable *swig_b0 = (swss::TableEntryPoppable *)arg1;
  (swig_b0)->pop(*arg2);
  
}


void _wrap_TableConsumable_pops__SWIG_0_swsscommon_728e05b169b08794(swss::TableConsumable *_swig_go_0, std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_1) {
  swss::TableConsumable *arg1 = (swss::TableConsumable *) 0 ;
  std::deque< swss::KeyOpFieldsValuesTuple > *arg2 = 0 ;
  
  arg1 = *(swss::TableConsumable **)&_swig_go_0; 
  arg2 = *(std::deque< swss::KeyOpFieldsValuesTuple > **)&_swig_go_1; 
  
  swss::TableEntryPoppable *swig_b0 = (swss::TableEntryPoppable *)arg1;
  (swig_b0)->pops(*arg2);
  
}


void _wrap_TableConsumable_pops__SWIG_1_swsscommon_728e05b169b08794(swss::TableConsumable *_swig_go_0, std::vector< std::string > *_swig_go_1, std::vector< std::string > *_swig_go_2, std::vector< std::vector< std::pair< std::string,std::string > > > *_swig_go_3, _gostring_ _swig_go_4) {
  swss::TableConsumable *arg1 = (swss::TableConsumable *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  std::vector< std::string > *arg3 = 0 ;
  std::vector< std::vector< swss::FieldValueTuple > > *arg4 = 0 ;
  std::string *arg5 = 0 ;
  
  arg1 = *(swss::TableConsumable **)&_swig_go_0; 
  arg2 = *(std::vector< std::string > **)&_swig_go_1; 
  arg3 = *(std::vector< std::string > **)&_swig_go_2; 
  arg4 = *(std::vector< std::vector< swss::FieldValueTuple > > **)&_swig_go_3; 
  
  std::string arg5_str(_swig_go_4.p, _swig_go_4.n);
  arg5 = &arg5_str;
  
  
  swss::TableEntryPoppable *swig_b0 = (swss::TableEntryPoppable *)arg1;
  (swig_b0)->pops(*arg2,*arg3,*arg4,(std::string const &)*arg5);
  
}


void _wrap_TableConsumable_pops__SWIG_2_swsscommon_728e05b169b08794(swss::TableConsumable *_swig_go_0, std::vector< std::string > *_swig_go_1, std::vector< std::string > *_swig_go_2, std::vector< std::vector< std::pair< std::string,std::string > > > *_swig_go_3) {
  swss::TableConsumable *arg1 = (swss::TableConsumable *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  std::vector< std::string > *arg3 = 0 ;
  std::vector< std::vector< swss::FieldValueTuple > > *arg4 = 0 ;
  
  arg1 = *(swss::TableConsumable **)&_swig_go_0; 
  arg2 = *(std::vector< std::string > **)&_swig_go_1; 
  arg3 = *(std::vector< std::string > **)&_swig_go_2; 
  arg4 = *(std::vector< std::vector< swss::FieldValueTuple > > **)&_swig_go_3; 
  
  swss::TableEntryPoppable *swig_b0 = (swss::TableEntryPoppable *)arg1;
  (swig_b0)->pops(*arg2,*arg3,*arg4);
  
}


intgo _wrap_TableConsumable_getFd_swsscommon_728e05b169b08794(swss::TableConsumable *_swig_go_0) {
  swss::TableConsumable *arg1 = (swss::TableConsumable *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(swss::TableConsumable **)&_swig_go_0; 
  
  swss::RedisSelect *swig_b0 = (swss::RedisSelect *)arg1;
  result = (int)(swig_b0)->getFd();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_TableConsumable_readData_swsscommon_728e05b169b08794(swss::TableConsumable *_swig_go_0) {
  swss::TableConsumable *arg1 = (swss::TableConsumable *) 0 ;
  uint64_t result;
  long long _swig_go_result;
  
  arg1 = *(swss::TableConsumable **)&_swig_go_0; 
  
  swss::RedisSelect *swig_b0 = (swss::RedisSelect *)arg1;
  result = (uint64_t)(swig_b0)->readData();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_TableConsumable_hasData_swsscommon_728e05b169b08794(swss::TableConsumable *_swig_go_0) {
  swss::TableConsumable *arg1 = (swss::TableConsumable *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::TableConsumable **)&_swig_go_0; 
  
  swss::RedisSelect *swig_b0 = (swss::RedisSelect *)arg1;
  result = (bool)(swig_b0)->hasData();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_TableConsumable_hasCachedData_swsscommon_728e05b169b08794(swss::TableConsumable *_swig_go_0) {
  swss::TableConsumable *arg1 = (swss::TableConsumable *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::TableConsumable **)&_swig_go_0; 
  
  swss::RedisSelect *swig_b0 = (swss::RedisSelect *)arg1;
  result = (bool)(swig_b0)->hasCachedData();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_TableConsumable_initializedWithData_swsscommon_728e05b169b08794(swss::TableConsumable *_swig_go_0) {
  swss::TableConsumable *arg1 = (swss::TableConsumable *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::TableConsumable **)&_swig_go_0; 
  
  swss::RedisSelect *swig_b0 = (swss::RedisSelect *)arg1;
  result = (bool)(swig_b0)->initializedWithData();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_TableConsumable_updateAfterRead_swsscommon_728e05b169b08794(swss::TableConsumable *_swig_go_0) {
  swss::TableConsumable *arg1 = (swss::TableConsumable *) 0 ;
  
  arg1 = *(swss::TableConsumable **)&_swig_go_0; 
  
  swss::RedisSelect *swig_b0 = (swss::RedisSelect *)arg1;
  (swig_b0)->updateAfterRead();
  
}


swss::DBConnector *_wrap_TableConsumable_getDbConnector_swsscommon_728e05b169b08794(swss::TableConsumable *_swig_go_0) {
  swss::TableConsumable *arg1 = (swss::TableConsumable *) 0 ;
  swss::DBConnector *result = 0 ;
  swss::DBConnector *_swig_go_result;
  
  arg1 = *(swss::TableConsumable **)&_swig_go_0; 
  
  swss::RedisSelect *swig_b0 = (swss::RedisSelect *)arg1;
  result = (swss::DBConnector *)((swss::RedisSelect const *)swig_b0)->getDbConnector();
  *(swss::DBConnector **)&_swig_go_result = (swss::DBConnector *)result; 
  return _swig_go_result;
}


void _wrap_TableConsumable_subscribe_swsscommon_728e05b169b08794(swss::TableConsumable *_swig_go_0, swss::DBConnector *_swig_go_1, _gostring_ _swig_go_2) {
  swss::TableConsumable *arg1 = (swss::TableConsumable *) 0 ;
  swss::DBConnector *arg2 = (swss::DBConnector *) 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = *(swss::TableConsumable **)&_swig_go_0; 
  arg2 = *(swss::DBConnector **)&_swig_go_1; 
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  swss::RedisSelect *swig_b0 = (swss::RedisSelect *)arg1;
  (swig_b0)->subscribe(arg2,(std::string const &)*arg3);
  
}


void _wrap_TableConsumable_psubscribe_swsscommon_728e05b169b08794(swss::TableConsumable *_swig_go_0, swss::DBConnector *_swig_go_1, _gostring_ _swig_go_2) {
  swss::TableConsumable *arg1 = (swss::TableConsumable *) 0 ;
  swss::DBConnector *arg2 = (swss::DBConnector *) 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = *(swss::TableConsumable **)&_swig_go_0; 
  arg2 = *(swss::DBConnector **)&_swig_go_1; 
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  swss::RedisSelect *swig_b0 = (swss::RedisSelect *)arg1;
  (swig_b0)->psubscribe(arg2,(std::string const &)*arg3);
  
}


void _wrap_TableConsumable_punsubscribe_swsscommon_728e05b169b08794(swss::TableConsumable *_swig_go_0, _gostring_ _swig_go_1) {
  swss::TableConsumable *arg1 = (swss::TableConsumable *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(swss::TableConsumable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  swss::RedisSelect *swig_b0 = (swss::RedisSelect *)arg1;
  (swig_b0)->punsubscribe((std::string const &)*arg2);
  
}


void _wrap_TableConsumable_setQueueLength_swsscommon_728e05b169b08794(swss::TableConsumable *_swig_go_0, long long _swig_go_1) {
  swss::TableConsumable *arg1 = (swss::TableConsumable *) 0 ;
  long long arg2 ;
  
  arg1 = *(swss::TableConsumable **)&_swig_go_0; 
  arg2 = (long long)_swig_go_1; 
  
  swss::RedisSelect *swig_b0 = (swss::RedisSelect *)arg1;
  (swig_b0)->setQueueLength(arg2);
  
}


intgo _wrap_TableConsumable_getPri_swsscommon_728e05b169b08794(swss::TableConsumable *_swig_go_0) {
  swss::TableConsumable *arg1 = (swss::TableConsumable *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(swss::TableConsumable **)&_swig_go_0; 
  
  swss::RedisSelect *swig_b0 = (swss::RedisSelect *)arg1;
  swss::Selectable *swig_b1 = (swss::Selectable *)swig_b0;
  result = (int)((swss::Selectable const *)swig_b1)->getPri();
  _swig_go_result = result; 
  return _swig_go_result;
}


swss::TableEntryPoppable *_wrap_TableConsumable_SwigGetTableEntryPoppable_swsscommon_728e05b169b08794(swss::TableConsumable *_swig_go_0) {
  swss::TableConsumable *arg1 = (swss::TableConsumable *) 0 ;
  swss::TableEntryPoppable *result = 0 ;
  swss::TableEntryPoppable *_swig_go_result;
  
  arg1 = *(swss::TableConsumable **)&_swig_go_0; 
  
  {
    try {
      result = (swss::TableEntryPoppable*)arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::TableEntryPoppable **)&_swig_go_result = (swss::TableEntryPoppable *)result; 
  return _swig_go_result;
}


swss::RedisSelect *_wrap_TableConsumable_SwigGetRedisSelect_swsscommon_728e05b169b08794(swss::TableConsumable *_swig_go_0) {
  swss::TableConsumable *arg1 = (swss::TableConsumable *) 0 ;
  swss::RedisSelect *result = 0 ;
  swss::RedisSelect *_swig_go_result;
  
  arg1 = *(swss::TableConsumable **)&_swig_go_0; 
  
  {
    try {
      result = (swss::RedisSelect*)arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::RedisSelect **)&_swig_go_result = (swss::RedisSelect *)result; 
  return _swig_go_result;
}


void _wrap_delete_TableEntryEnumerable_swsscommon_728e05b169b08794(swss::TableEntryEnumerable *_swig_go_0) {
  swss::TableEntryEnumerable *arg1 = (swss::TableEntryEnumerable *) 0 ;
  
  arg1 = *(swss::TableEntryEnumerable **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


bool _wrap_TableEntryEnumerable_get_swsscommon_728e05b169b08794(swss::TableEntryEnumerable *_swig_go_0, _gostring_ _swig_go_1, std::vector< std::pair< std::string,std::string > > *_swig_go_2) {
  swss::TableEntryEnumerable *arg1 = (swss::TableEntryEnumerable *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< swss::FieldValueTuple > *arg3 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::TableEntryEnumerable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = *(std::vector< swss::FieldValueTuple > **)&_swig_go_2; 
  
  {
    try {
      result = (bool)(arg1)->get((std::string const &)*arg2,*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_TableEntryEnumerable_hget_swsscommon_728e05b169b08794(swss::TableEntryEnumerable *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, std::string *_swig_go_3) {
  swss::TableEntryEnumerable *arg1 = (swss::TableEntryEnumerable *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::TableEntryEnumerable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  arg4 = *(std::string **)&_swig_go_3; 
  
  {
    try {
      result = (bool)(arg1)->hget((std::string const &)*arg2,(std::string const &)*arg3,*arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_TableEntryEnumerable_getKeys_swsscommon_728e05b169b08794(swss::TableEntryEnumerable *_swig_go_0, std::vector< std::string > *_swig_go_1) {
  swss::TableEntryEnumerable *arg1 = (swss::TableEntryEnumerable *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  arg1 = *(swss::TableEntryEnumerable **)&_swig_go_0; 
  arg2 = *(std::vector< std::string > **)&_swig_go_1; 
  
  {
    try {
      (arg1)->getKeys(*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_TableEntryEnumerable_getContent_swsscommon_728e05b169b08794(swss::TableEntryEnumerable *_swig_go_0, std::vector< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_1) {
  swss::TableEntryEnumerable *arg1 = (swss::TableEntryEnumerable *) 0 ;
  std::vector< swss::KeyOpFieldsValuesTuple > *arg2 = 0 ;
  
  arg1 = *(swss::TableEntryEnumerable **)&_swig_go_0; 
  arg2 = *(std::vector< swss::KeyOpFieldsValuesTuple > **)&_swig_go_1; 
  
  {
    try {
      (arg1)->getContent(*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


long long _wrap_DEFAULT_DB_TTL_get_swsscommon_728e05b169b08794() {
  int64_t result;
  long long _swig_go_result;
  
  
  result = (int64_t)swss::DEFAULT_DB_TTL;
  _swig_go_result = result; 
  return _swig_go_result;
}


swss::Table *_wrap_new_Table__SWIG_0_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0, _gostring_ _swig_go_1) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  std::string *arg2 = 0 ;
  swss::Table *result = 0 ;
  swss::Table *_swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = (swss::Table *)new swss::Table((swss::DBConnector const *)arg1,(std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::Table **)&_swig_go_result = (swss::Table *)result; 
  return _swig_go_result;
}


swss::Table *_wrap_new_Table__SWIG_1_swsscommon_728e05b169b08794(swss::RedisPipeline *_swig_go_0, _gostring_ _swig_go_1, bool _swig_go_2) {
  swss::RedisPipeline *arg1 = (swss::RedisPipeline *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  swss::Table *result = 0 ;
  swss::Table *_swig_go_result;
  
  arg1 = *(swss::RedisPipeline **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (bool)_swig_go_2; 
  
  {
    try {
      result = (swss::Table *)new swss::Table(arg1,(std::string const &)*arg2,arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::Table **)&_swig_go_result = (swss::Table *)result; 
  return _swig_go_result;
}


void _wrap_delete_Table_swsscommon_728e05b169b08794(swss::Table *_swig_go_0) {
  swss::Table *arg1 = (swss::Table *) 0 ;
  
  arg1 = *(swss::Table **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_Table_set__SWIG_0_swsscommon_728e05b169b08794(swss::Table *_swig_go_0, _gostring_ _swig_go_1, std::vector< std::pair< std::string,std::string > > *_swig_go_2, _gostring_ _swig_go_3, _gostring_ _swig_go_4) {
  swss::Table *arg1 = (swss::Table *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< swss::FieldValueTuple > *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  
  arg1 = *(swss::Table **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = *(std::vector< swss::FieldValueTuple > **)&_swig_go_2; 
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(_swig_go_4.p, _swig_go_4.n);
  arg5 = &arg5_str;
  
  
  {
    try {
      (arg1)->set((std::string const &)*arg2,(std::vector< swss::FieldValueTuple > const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_Table_set__SWIG_1_swsscommon_728e05b169b08794(swss::Table *_swig_go_0, _gostring_ _swig_go_1, std::vector< std::pair< std::string,std::string > > *_swig_go_2, _gostring_ _swig_go_3) {
  swss::Table *arg1 = (swss::Table *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< swss::FieldValueTuple > *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  arg1 = *(swss::Table **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = *(std::vector< swss::FieldValueTuple > **)&_swig_go_2; 
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  {
    try {
      (arg1)->set((std::string const &)*arg2,(std::vector< swss::FieldValueTuple > const &)*arg3,(std::string const &)*arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_Table_set__SWIG_2_swsscommon_728e05b169b08794(swss::Table *_swig_go_0, _gostring_ _swig_go_1, std::vector< std::pair< std::string,std::string > > *_swig_go_2) {
  swss::Table *arg1 = (swss::Table *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< swss::FieldValueTuple > *arg3 = 0 ;
  
  arg1 = *(swss::Table **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = *(std::vector< swss::FieldValueTuple > **)&_swig_go_2; 
  
  {
    try {
      (arg1)->set((std::string const &)*arg2,(std::vector< swss::FieldValueTuple > const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_Table_set__SWIG_3_swsscommon_728e05b169b08794(swss::Table *_swig_go_0, _gostring_ _swig_go_1, std::vector< std::pair< std::string,std::string > > *_swig_go_2, _gostring_ _swig_go_3, _gostring_ _swig_go_4, long long _swig_go_5) {
  swss::Table *arg1 = (swss::Table *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< swss::FieldValueTuple > *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  int64_t *arg6 = 0 ;
  
  arg1 = *(swss::Table **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = *(std::vector< swss::FieldValueTuple > **)&_swig_go_2; 
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(_swig_go_4.p, _swig_go_4.n);
  arg5 = &arg5_str;
  
  arg6 = (int64_t *)&_swig_go_5; 
  
  {
    try {
      (arg1)->set((std::string const &)*arg2,(std::vector< swss::FieldValueTuple > const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(int64_t const &)*arg6);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_Table_delete__SWIG_0_swsscommon_728e05b169b08794(swss::Table *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3) {
  swss::Table *arg1 = (swss::Table *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  arg1 = *(swss::Table **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  {
    try {
      (arg1)->del((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_Table_delete__SWIG_1_swsscommon_728e05b169b08794(swss::Table *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  swss::Table *arg1 = (swss::Table *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = *(swss::Table **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      (arg1)->del((std::string const &)*arg2,(std::string const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_Table_delete__SWIG_2_swsscommon_728e05b169b08794(swss::Table *_swig_go_0, _gostring_ _swig_go_1) {
  swss::Table *arg1 = (swss::Table *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(swss::Table **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      (arg1)->del((std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


bool _wrap_Table_ttl_swsscommon_728e05b169b08794(swss::Table *_swig_go_0, _gostring_ _swig_go_1, int64_t *_swig_go_2) {
  swss::Table *arg1 = (swss::Table *) 0 ;
  std::string *arg2 = 0 ;
  int64_t *arg3 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::Table **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = *(int64_t **)&_swig_go_2; 
  
  {
    try {
      result = (bool)(arg1)->ttl((std::string const &)*arg2,*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Table_hdel__SWIG_0_swsscommon_728e05b169b08794(swss::Table *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3, _gostring_ _swig_go_4) {
  swss::Table *arg1 = (swss::Table *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  
  arg1 = *(swss::Table **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(_swig_go_4.p, _swig_go_4.n);
  arg5 = &arg5_str;
  
  
  {
    try {
      (arg1)->hdel((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_Table_hdel__SWIG_1_swsscommon_728e05b169b08794(swss::Table *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3) {
  swss::Table *arg1 = (swss::Table *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  arg1 = *(swss::Table **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  {
    try {
      (arg1)->hdel((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_Table_hdel__SWIG_2_swsscommon_728e05b169b08794(swss::Table *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  swss::Table *arg1 = (swss::Table *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = *(swss::Table **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      (arg1)->hdel((std::string const &)*arg2,(std::string const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


bool _wrap_Table_get_swsscommon_728e05b169b08794(swss::Table *_swig_go_0, _gostring_ _swig_go_1, std::vector< std::pair< std::string,std::string > > *_swig_go_2) {
  swss::Table *arg1 = (swss::Table *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< swss::FieldValueTuple > *arg3 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::Table **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = *(std::vector< swss::FieldValueTuple > **)&_swig_go_2; 
  
  {
    try {
      result = (bool)(arg1)->get((std::string const &)*arg2,*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_Table_hget_swsscommon_728e05b169b08794(swss::Table *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, std::string *_swig_go_3) {
  swss::Table *arg1 = (swss::Table *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::Table **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  arg4 = *(std::string **)&_swig_go_3; 
  
  {
    try {
      result = (bool)(arg1)->hget((std::string const &)*arg2,(std::string const &)*arg3,*arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Table_hset__SWIG_0_swsscommon_728e05b169b08794(swss::Table *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3, _gostring_ _swig_go_4, _gostring_ _swig_go_5) {
  swss::Table *arg1 = (swss::Table *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  
  arg1 = *(swss::Table **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(_swig_go_4.p, _swig_go_4.n);
  arg5 = &arg5_str;
  
  
  std::string arg6_str(_swig_go_5.p, _swig_go_5.n);
  arg6 = &arg6_str;
  
  
  {
    try {
      (arg1)->hset((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_Table_hset__SWIG_1_swsscommon_728e05b169b08794(swss::Table *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3, _gostring_ _swig_go_4) {
  swss::Table *arg1 = (swss::Table *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  
  arg1 = *(swss::Table **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(_swig_go_4.p, _swig_go_4.n);
  arg5 = &arg5_str;
  
  
  {
    try {
      (arg1)->hset((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_Table_hset__SWIG_2_swsscommon_728e05b169b08794(swss::Table *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3) {
  swss::Table *arg1 = (swss::Table *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  arg1 = *(swss::Table **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  {
    try {
      (arg1)->hset((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_Table_getKeys_swsscommon_728e05b169b08794(swss::Table *_swig_go_0, std::vector< std::string > *_swig_go_1) {
  swss::Table *arg1 = (swss::Table *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  arg1 = *(swss::Table **)&_swig_go_0; 
  arg2 = *(std::vector< std::string > **)&_swig_go_1; 
  
  {
    try {
      (arg1)->getKeys(*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_Table_setBuffered_swsscommon_728e05b169b08794(swss::Table *_swig_go_0, bool _swig_go_1) {
  swss::Table *arg1 = (swss::Table *) 0 ;
  bool arg2 ;
  
  arg1 = *(swss::Table **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  {
    try {
      (arg1)->setBuffered(arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_Table_flush_swsscommon_728e05b169b08794(swss::Table *_swig_go_0) {
  swss::Table *arg1 = (swss::Table *) 0 ;
  
  arg1 = *(swss::Table **)&_swig_go_0; 
  
  {
    try {
      (arg1)->flush();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_Table_dump_swsscommon_728e05b169b08794(swss::Table *_swig_go_0, std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > > *_swig_go_1) {
  swss::Table *arg1 = (swss::Table *) 0 ;
  swss::TableDump *arg2 = 0 ;
  
  arg1 = *(swss::Table **)&_swig_go_0; 
  arg2 = *(swss::TableDump **)&_swig_go_1; 
  
  {
    try {
      (arg1)->dump(*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


_gostring_ _wrap_Table_getTableSeparator_swsscommon_728e05b169b08794(intgo _swig_go_0) {
  int arg1 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  {
    try {
      result = swss::TableBase::getTableSeparator(arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_Table_getTableName_swsscommon_728e05b169b08794(swss::Table *_swig_go_0) {
  swss::Table *arg1 = (swss::Table *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::Table **)&_swig_go_0; 
  
  swss::TableBase *swig_b0 = (swss::TableBase *)arg1;
  result = ((swss::TableBase const *)swig_b0)->getTableName();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_Table_getKeyName_swsscommon_728e05b169b08794(swss::Table *_swig_go_0, _gostring_ _swig_go_1) {
  swss::Table *arg1 = (swss::Table *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::Table **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  swss::TableBase *swig_b0 = (swss::TableBase *)arg1;
  result = (swig_b0)->getKeyName((std::string const &)*arg2);
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_Table_getTableNameSeparator_swsscommon_728e05b169b08794(swss::Table *_swig_go_0) {
  swss::Table *arg1 = (swss::Table *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::Table **)&_swig_go_0; 
  
  swss::TableBase *swig_b0 = (swss::TableBase *)arg1;
  result = ((swss::TableBase const *)swig_b0)->getTableNameSeparator();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_Table_getChannelName__SWIG_0_swsscommon_728e05b169b08794(swss::Table *_swig_go_0) {
  swss::Table *arg1 = (swss::Table *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::Table **)&_swig_go_0; 
  
  swss::TableBase *swig_b0 = (swss::TableBase *)arg1;
  result = (swig_b0)->getChannelName();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_Table_getChannelName__SWIG_1_swsscommon_728e05b169b08794(swss::Table *_swig_go_0, _gostring_ _swig_go_1) {
  swss::Table *arg1 = (swss::Table *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::Table **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  swss::TableBase *swig_b0 = (swss::TableBase *)arg1;
  result = (swig_b0)->getChannelName((std::string const &)*arg2);
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_Table_getChannelName__SWIG_2_swsscommon_728e05b169b08794(swss::Table *_swig_go_0, intgo _swig_go_1) {
  swss::Table *arg1 = (swss::Table *) 0 ;
  int arg2 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::Table **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  swss::TableBase *swig_b0 = (swss::TableBase *)arg1;
  result = (swig_b0)->getChannelName(arg2);
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


void _wrap_Table_getContent_swsscommon_728e05b169b08794(swss::Table *_swig_go_0, std::vector< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_1) {
  swss::Table *arg1 = (swss::Table *) 0 ;
  std::vector< swss::KeyOpFieldsValuesTuple > *arg2 = 0 ;
  
  arg1 = *(swss::Table **)&_swig_go_0; 
  arg2 = *(std::vector< swss::KeyOpFieldsValuesTuple > **)&_swig_go_1; 
  
  swss::TableEntryEnumerable *swig_b0 = (swss::TableEntryEnumerable *)arg1;
  (swig_b0)->getContent(*arg2);
  
}


swss::TableEntryEnumerable *_wrap_Table_SwigGetTableEntryEnumerable_swsscommon_728e05b169b08794(swss::Table *_swig_go_0) {
  swss::Table *arg1 = (swss::Table *) 0 ;
  swss::TableEntryEnumerable *result = 0 ;
  swss::TableEntryEnumerable *_swig_go_result;
  
  arg1 = *(swss::Table **)&_swig_go_0; 
  
  {
    try {
      result = (swss::TableEntryEnumerable*)arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::TableEntryEnumerable **)&_swig_go_result = (swss::TableEntryEnumerable *)result; 
  return _swig_go_result;
}


swss::TableName_KeyValueOpQueues *_wrap_new_TableName_KeyValueOpQueues_swsscommon_728e05b169b08794(_gostring_ _swig_go_0) {
  std::string *arg1 = 0 ;
  swss::TableName_KeyValueOpQueues *result = 0 ;
  swss::TableName_KeyValueOpQueues *_swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  {
    try {
      result = (swss::TableName_KeyValueOpQueues *)new swss::TableName_KeyValueOpQueues((std::string const &)*arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::TableName_KeyValueOpQueues **)&_swig_go_result = (swss::TableName_KeyValueOpQueues *)result; 
  return _swig_go_result;
}


_gostring_ _wrap_TableName_KeyValueOpQueues_getKeyValueOpQueueTableName_swsscommon_728e05b169b08794(swss::TableName_KeyValueOpQueues *_swig_go_0) {
  swss::TableName_KeyValueOpQueues *arg1 = (swss::TableName_KeyValueOpQueues *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::TableName_KeyValueOpQueues **)&_swig_go_0; 
  
  {
    try {
      result = ((swss::TableName_KeyValueOpQueues const *)arg1)->getKeyValueOpQueueTableName();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


void _wrap_delete_TableName_KeyValueOpQueues_swsscommon_728e05b169b08794(swss::TableName_KeyValueOpQueues *_swig_go_0) {
  swss::TableName_KeyValueOpQueues *arg1 = (swss::TableName_KeyValueOpQueues *) 0 ;
  
  arg1 = *(swss::TableName_KeyValueOpQueues **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


swss::TableName_KeySet *_wrap_new_TableName_KeySet_swsscommon_728e05b169b08794(_gostring_ _swig_go_0) {
  std::string *arg1 = 0 ;
  swss::TableName_KeySet *result = 0 ;
  swss::TableName_KeySet *_swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  {
    try {
      result = (swss::TableName_KeySet *)new swss::TableName_KeySet((std::string const &)*arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::TableName_KeySet **)&_swig_go_result = (swss::TableName_KeySet *)result; 
  return _swig_go_result;
}


_gostring_ _wrap_TableName_KeySet_getKeySetName_swsscommon_728e05b169b08794(swss::TableName_KeySet *_swig_go_0) {
  swss::TableName_KeySet *arg1 = (swss::TableName_KeySet *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::TableName_KeySet **)&_swig_go_0; 
  
  {
    try {
      result = ((swss::TableName_KeySet const *)arg1)->getKeySetName();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_TableName_KeySet_getDelKeySetName_swsscommon_728e05b169b08794(swss::TableName_KeySet *_swig_go_0) {
  swss::TableName_KeySet *arg1 = (swss::TableName_KeySet *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::TableName_KeySet **)&_swig_go_0; 
  
  {
    try {
      result = ((swss::TableName_KeySet const *)arg1)->getDelKeySetName();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_TableName_KeySet_getStateHashPrefix_swsscommon_728e05b169b08794(swss::TableName_KeySet *_swig_go_0) {
  swss::TableName_KeySet *arg1 = (swss::TableName_KeySet *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::TableName_KeySet **)&_swig_go_0; 
  
  {
    try {
      result = ((swss::TableName_KeySet const *)arg1)->getStateHashPrefix();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


void _wrap_delete_TableName_KeySet_swsscommon_728e05b169b08794(swss::TableName_KeySet *_swig_go_0) {
  swss::TableName_KeySet *arg1 = (swss::TableName_KeySet *) 0 ;
  
  arg1 = *(swss::TableName_KeySet **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


swss::LuaTable *_wrap_new_LuaTable__SWIG_0_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, std::vector< std::string > *_swig_go_3) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::vector< std::string > *arg4 = 0 ;
  swss::LuaTable *result = 0 ;
  swss::LuaTable *_swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  arg4 = *(std::vector< std::string > **)&_swig_go_3; 
  
  {
    try {
      result = (swss::LuaTable *)new swss::LuaTable((swss::DBConnector const *)arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::vector< std::string > const &)*arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::LuaTable **)&_swig_go_result = (swss::LuaTable *)result; 
  return _swig_go_result;
}


swss::LuaTable *_wrap_new_LuaTable__SWIG_1_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  swss::LuaTable *result = 0 ;
  swss::LuaTable *_swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      result = (swss::LuaTable *)new swss::LuaTable((swss::DBConnector const *)arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::LuaTable **)&_swig_go_result = (swss::LuaTable *)result; 
  return _swig_go_result;
}


void _wrap_delete_LuaTable_swsscommon_728e05b169b08794(swss::LuaTable *_swig_go_0) {
  swss::LuaTable *arg1 = (swss::LuaTable *) 0 ;
  
  arg1 = *(swss::LuaTable **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


bool _wrap_LuaTable_get_swsscommon_728e05b169b08794(swss::LuaTable *_swig_go_0, std::vector< std::string > *_swig_go_1, std::vector< std::pair< std::string,std::string > > *_swig_go_2) {
  swss::LuaTable *arg1 = (swss::LuaTable *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  std::vector< swss::FieldValueTuple > *arg3 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::LuaTable **)&_swig_go_0; 
  arg2 = *(std::vector< std::string > **)&_swig_go_1; 
  arg3 = *(std::vector< swss::FieldValueTuple > **)&_swig_go_2; 
  
  {
    try {
      result = (bool)(arg1)->get((std::vector< std::string > const &)*arg2,*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_LuaTable_hget_swsscommon_728e05b169b08794(swss::LuaTable *_swig_go_0, std::vector< std::string > *_swig_go_1, _gostring_ _swig_go_2, std::string *_swig_go_3) {
  swss::LuaTable *arg1 = (swss::LuaTable *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::LuaTable **)&_swig_go_0; 
  arg2 = *(std::vector< std::string > **)&_swig_go_1; 
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  arg4 = *(std::string **)&_swig_go_3; 
  
  {
    try {
      result = (bool)(arg1)->hget((std::vector< std::string > const &)*arg2,(std::string const &)*arg3,*arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_LuaTable_getTableSeparator_swsscommon_728e05b169b08794(intgo _swig_go_0) {
  int arg1 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  {
    try {
      result = swss::TableBase::getTableSeparator(arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_LuaTable_getTableName_swsscommon_728e05b169b08794(swss::LuaTable *_swig_go_0) {
  swss::LuaTable *arg1 = (swss::LuaTable *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::LuaTable **)&_swig_go_0; 
  
  swss::TableBase *swig_b0 = (swss::TableBase *)arg1;
  result = ((swss::TableBase const *)swig_b0)->getTableName();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_LuaTable_getKeyName_swsscommon_728e05b169b08794(swss::LuaTable *_swig_go_0, _gostring_ _swig_go_1) {
  swss::LuaTable *arg1 = (swss::LuaTable *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::LuaTable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  swss::TableBase *swig_b0 = (swss::TableBase *)arg1;
  result = (swig_b0)->getKeyName((std::string const &)*arg2);
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_LuaTable_getTableNameSeparator_swsscommon_728e05b169b08794(swss::LuaTable *_swig_go_0) {
  swss::LuaTable *arg1 = (swss::LuaTable *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::LuaTable **)&_swig_go_0; 
  
  swss::TableBase *swig_b0 = (swss::TableBase *)arg1;
  result = ((swss::TableBase const *)swig_b0)->getTableNameSeparator();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_LuaTable_getChannelName__SWIG_0_swsscommon_728e05b169b08794(swss::LuaTable *_swig_go_0) {
  swss::LuaTable *arg1 = (swss::LuaTable *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::LuaTable **)&_swig_go_0; 
  
  swss::TableBase *swig_b0 = (swss::TableBase *)arg1;
  result = (swig_b0)->getChannelName();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_LuaTable_getChannelName__SWIG_1_swsscommon_728e05b169b08794(swss::LuaTable *_swig_go_0, _gostring_ _swig_go_1) {
  swss::LuaTable *arg1 = (swss::LuaTable *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::LuaTable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  swss::TableBase *swig_b0 = (swss::TableBase *)arg1;
  result = (swig_b0)->getChannelName((std::string const &)*arg2);
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_LuaTable_getChannelName__SWIG_2_swsscommon_728e05b169b08794(swss::LuaTable *_swig_go_0, intgo _swig_go_1) {
  swss::LuaTable *arg1 = (swss::LuaTable *) 0 ;
  int arg2 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::LuaTable **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  swss::TableBase *swig_b0 = (swss::TableBase *)arg1;
  result = (swig_b0)->getChannelName(arg2);
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


swss::CounterTable *_wrap_new_CounterTable__SWIG_0_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0, _gostring_ _swig_go_1) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  std::string *arg2 = 0 ;
  swss::CounterTable *result = 0 ;
  swss::CounterTable *_swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = (swss::CounterTable *)new swss::CounterTable((swss::DBConnector const *)arg1,(std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::CounterTable **)&_swig_go_result = (swss::CounterTable *)result; 
  return _swig_go_result;
}


swss::CounterTable *_wrap_new_CounterTable__SWIG_1_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  swss::CounterTable *result = 0 ;
  swss::CounterTable *_swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  {
    try {
      result = (swss::CounterTable *)new swss::CounterTable((swss::DBConnector const *)arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::CounterTable **)&_swig_go_result = (swss::CounterTable *)result; 
  return _swig_go_result;
}


bool _wrap_CounterTable_get_swsscommon_728e05b169b08794(swss::CounterTable *_swig_go_0, swss::Counter *_swig_go_1, _gostring_ _swig_go_2, std::vector< std::pair< std::string,std::string > > *_swig_go_3) {
  swss::CounterTable *arg1 = (swss::CounterTable *) 0 ;
  swss::Counter *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::vector< swss::FieldValueTuple > *arg4 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::CounterTable **)&_swig_go_0; 
  arg2 = *(swss::Counter **)&_swig_go_1; 
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  arg4 = *(std::vector< swss::FieldValueTuple > **)&_swig_go_3; 
  
  {
    try {
      result = (bool)(arg1)->get((swss::Counter const &)*arg2,(std::string const &)*arg3,*arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_CounterTable_hget_swsscommon_728e05b169b08794(swss::CounterTable *_swig_go_0, swss::Counter *_swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3, std::string *_swig_go_4) {
  swss::CounterTable *arg1 = (swss::CounterTable *) 0 ;
  swss::Counter *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::CounterTable **)&_swig_go_0; 
  arg2 = *(swss::Counter **)&_swig_go_1; 
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  arg5 = *(std::string **)&_swig_go_4; 
  
  {
    try {
      result = (bool)(arg1)->hget((swss::Counter const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,*arg5);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


std::unique_ptr< swss::DBConnector > *_wrap_CounterTable_getCountersDB_swsscommon_728e05b169b08794(swss::CounterTable *_swig_go_0) {
  swss::CounterTable *arg1 = (swss::CounterTable *) 0 ;
  std::unique_ptr< swss::DBConnector > *result = 0 ;
  std::unique_ptr< swss::DBConnector > *_swig_go_result;
  
  arg1 = *(swss::CounterTable **)&_swig_go_0; 
  
  {
    try {
      result = (std::unique_ptr< swss::DBConnector > *) &((swss::CounterTable const *)arg1)->getCountersDB();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::unique_ptr< swss::DBConnector > **)&_swig_go_result = result; 
  return _swig_go_result;
}


std::unique_ptr< swss::DBConnector > *_wrap_CounterTable_getGbcountersDB_swsscommon_728e05b169b08794(swss::CounterTable *_swig_go_0) {
  swss::CounterTable *arg1 = (swss::CounterTable *) 0 ;
  std::unique_ptr< swss::DBConnector > *result = 0 ;
  std::unique_ptr< swss::DBConnector > *_swig_go_result;
  
  arg1 = *(swss::CounterTable **)&_swig_go_0; 
  
  {
    try {
      result = (std::unique_ptr< swss::DBConnector > *) &((swss::CounterTable const *)arg1)->getGbcountersDB();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::unique_ptr< swss::DBConnector > **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_CounterTable_swsscommon_728e05b169b08794(swss::CounterTable *_swig_go_0) {
  swss::CounterTable *arg1 = (swss::CounterTable *) 0 ;
  
  arg1 = *(swss::CounterTable **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


_gostring_ _wrap_CounterTable_getTableSeparator_swsscommon_728e05b169b08794(intgo _swig_go_0) {
  int arg1 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  {
    try {
      result = swss::TableBase::getTableSeparator(arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_CounterTable_getTableName_swsscommon_728e05b169b08794(swss::CounterTable *_swig_go_0) {
  swss::CounterTable *arg1 = (swss::CounterTable *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::CounterTable **)&_swig_go_0; 
  
  swss::TableBase *swig_b0 = (swss::TableBase *)arg1;
  result = ((swss::TableBase const *)swig_b0)->getTableName();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_CounterTable_getKeyName_swsscommon_728e05b169b08794(swss::CounterTable *_swig_go_0, _gostring_ _swig_go_1) {
  swss::CounterTable *arg1 = (swss::CounterTable *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::CounterTable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  swss::TableBase *swig_b0 = (swss::TableBase *)arg1;
  result = (swig_b0)->getKeyName((std::string const &)*arg2);
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_CounterTable_getTableNameSeparator_swsscommon_728e05b169b08794(swss::CounterTable *_swig_go_0) {
  swss::CounterTable *arg1 = (swss::CounterTable *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::CounterTable **)&_swig_go_0; 
  
  swss::TableBase *swig_b0 = (swss::TableBase *)arg1;
  result = ((swss::TableBase const *)swig_b0)->getTableNameSeparator();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_CounterTable_getChannelName__SWIG_0_swsscommon_728e05b169b08794(swss::CounterTable *_swig_go_0) {
  swss::CounterTable *arg1 = (swss::CounterTable *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::CounterTable **)&_swig_go_0; 
  
  swss::TableBase *swig_b0 = (swss::TableBase *)arg1;
  result = (swig_b0)->getChannelName();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_CounterTable_getChannelName__SWIG_1_swsscommon_728e05b169b08794(swss::CounterTable *_swig_go_0, _gostring_ _swig_go_1) {
  swss::CounterTable *arg1 = (swss::CounterTable *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::CounterTable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  swss::TableBase *swig_b0 = (swss::TableBase *)arg1;
  result = (swig_b0)->getChannelName((std::string const &)*arg2);
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_CounterTable_getChannelName__SWIG_2_swsscommon_728e05b169b08794(swss::CounterTable *_swig_go_0, intgo _swig_go_1) {
  swss::CounterTable *arg1 = (swss::CounterTable *) 0 ;
  int arg2 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::CounterTable **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  swss::TableBase *swig_b0 = (swss::TableBase *)arg1;
  result = (swig_b0)->getChannelName(arg2);
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


swss::Counter *_wrap__swig_NewDirectorCounterCounter_swsscommon_728e05b169b08794(intgo _swig_go_0) {
  int arg1 ;
  swss::Counter *result = 0 ;
  swss::Counter *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  {
    try {
      result = new SwigDirector_Counter(arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::Counter **)&_swig_go_result = (swss::Counter *)result; 
  return _swig_go_result;
}


_gostring_ _wrap__swig_DirectorCounter_upcall_GetLuaScript_swsscommon_728e05b169b08794(SwigDirector_Counter *_swig_go_0) {
  SwigDirector_Counter *arg1 = (SwigDirector_Counter *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(SwigDirector_Counter **)&_swig_go_0; 
  
  {
    try {
      result = (std::string *)&arg1->_swig_upcall_getLuaScript();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


std::vector< std::string > *_wrap__swig_DirectorCounter_upcall_GetLuaArgv_swsscommon_728e05b169b08794(SwigDirector_Counter *_swig_go_0) {
  SwigDirector_Counter *arg1 = (SwigDirector_Counter *) 0 ;
  std::vector< std::string > result;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = *(SwigDirector_Counter **)&_swig_go_0; 
  
  {
    try {
      result = (std::vector< std::string >)arg1->_swig_upcall_getLuaArgv();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::vector< std::string > **)&_swig_go_result = new std::vector< std::string >(result); 
  return _swig_go_result;
}


bool _wrap__swig_DirectorCounter_upcall_UsingLuaTable_swsscommon_728e05b169b08794(SwigDirector_Counter *_swig_go_0, swss::CounterTable *_swig_go_1, _gostring_ _swig_go_2) {
  SwigDirector_Counter *arg1 = (SwigDirector_Counter *) 0 ;
  swss::CounterTable *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(SwigDirector_Counter **)&_swig_go_0; 
  arg2 = *(swss::CounterTable **)&_swig_go_1; 
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      result = (bool)arg1->_swig_upcall_usingLuaTable(*arg2, *arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


std::vector< std::string > *_wrap__swig_DirectorCounter_upcall_GetLuaKeys_swsscommon_728e05b169b08794(SwigDirector_Counter *_swig_go_0, swss::CounterTable *_swig_go_1, _gostring_ _swig_go_2) {
  SwigDirector_Counter *arg1 = (SwigDirector_Counter *) 0 ;
  swss::CounterTable *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::vector< std::string > result;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = *(SwigDirector_Counter **)&_swig_go_0; 
  arg2 = *(swss::CounterTable **)&_swig_go_1; 
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      result = (std::vector< std::string >)arg1->_swig_upcall_getLuaKeys(*arg2, *arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::vector< std::string > **)&_swig_go_result = new std::vector< std::string >(result); 
  return _swig_go_result;
}


void _wrap_DeleteDirectorCounter_swsscommon_728e05b169b08794(swss::Counter *_swig_go_0) {
  swss::Counter *arg1 = (swss::Counter *) 0 ;
  
  arg1 = *(swss::Counter **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


_gostring_ _wrap_Counter_getLuaScript_swsscommon_728e05b169b08794(swss::Counter *_swig_go_0) {
  swss::Counter *arg1 = (swss::Counter *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::Counter **)&_swig_go_0; 
  
  {
    try {
      result = (std::string *) &((swss::Counter const *)arg1)->getLuaScript();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


std::vector< std::string > *_wrap_Counter_getLuaArgv_swsscommon_728e05b169b08794(swss::Counter *_swig_go_0) {
  swss::Counter *arg1 = (swss::Counter *) 0 ;
  std::vector< std::string > result;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = *(swss::Counter **)&_swig_go_0; 
  
  {
    try {
      result = ((swss::Counter const *)arg1)->getLuaArgv();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::vector< std::string > **)&_swig_go_result = new std::vector< std::string >(result); 
  return _swig_go_result;
}


bool _wrap_Counter_usingLuaTable_swsscommon_728e05b169b08794(swss::Counter *_swig_go_0, swss::CounterTable *_swig_go_1, _gostring_ _swig_go_2) {
  swss::Counter *arg1 = (swss::Counter *) 0 ;
  swss::CounterTable *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::Counter **)&_swig_go_0; 
  arg2 = *(swss::CounterTable **)&_swig_go_1; 
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      result = (bool)((swss::Counter const *)arg1)->usingLuaTable((swss::CounterTable const &)*arg2,(std::string const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


std::vector< std::string > *_wrap_Counter_getLuaKeys_swsscommon_728e05b169b08794(swss::Counter *_swig_go_0, swss::CounterTable *_swig_go_1, _gostring_ _swig_go_2) {
  swss::Counter *arg1 = (swss::Counter *) 0 ;
  swss::CounterTable *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::vector< std::string > result;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = *(swss::Counter **)&_swig_go_0; 
  arg2 = *(swss::CounterTable **)&_swig_go_1; 
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      result = ((swss::Counter const *)arg1)->getLuaKeys((swss::CounterTable const &)*arg2,(std::string const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::vector< std::string > **)&_swig_go_result = new std::vector< std::string >(result); 
  return _swig_go_result;
}


std::pair< int,std::string > *_wrap_Counter_getKey_swsscommon_728e05b169b08794(swss::Counter *_swig_go_0, swss::CounterTable *_swig_go_1, _gostring_ _swig_go_2) {
  swss::Counter *arg1 = (swss::Counter *) 0 ;
  swss::CounterTable *arg2 = 0 ;
  std::string *arg3 = 0 ;
  swss::Counter::KeyPair result;
  std::pair< int,std::string > *_swig_go_result;
  
  arg1 = *(swss::Counter **)&_swig_go_0; 
  arg2 = *(swss::CounterTable **)&_swig_go_1; 
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      result = ((swss::Counter const *)arg1)->getKey((swss::CounterTable const &)*arg2,(std::string const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::Counter::KeyPair **)&_swig_go_result = new swss::Counter::KeyPair(result); 
  return _swig_go_result;
}


void _wrap_delete_Counter_swsscommon_728e05b169b08794(swss::Counter *_swig_go_0) {
  swss::Counter *arg1 = (swss::Counter *) 0 ;
  
  arg1 = *(swss::Counter **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


intgo _wrap_Mode_UNION_PortCounter_swsscommon_728e05b169b08794() {
  swss::PortCounter::Mode result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = swss::PortCounter::Mode::UNION;
      
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Mode_ASIC_PortCounter_swsscommon_728e05b169b08794() {
  swss::PortCounter::Mode result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = swss::PortCounter::Mode::ASIC;
      
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Mode_SYSTEMSIDE_PortCounter_swsscommon_728e05b169b08794() {
  swss::PortCounter::Mode result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = swss::PortCounter::Mode::SYSTEMSIDE;
      
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Mode_LINESIDE_PortCounter_swsscommon_728e05b169b08794() {
  swss::PortCounter::Mode result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = swss::PortCounter::Mode::LINESIDE;
      
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


swss::PortCounter *_wrap_new_PortCounter__SWIG_0_swsscommon_728e05b169b08794(intgo _swig_go_0) {
  swss::PortCounter::Mode arg1 ;
  swss::PortCounter *result = 0 ;
  swss::PortCounter *_swig_go_result;
  
  arg1 = (swss::PortCounter::Mode)_swig_go_0; 
  
  {
    try {
      result = (swss::PortCounter *)new swss::PortCounter(arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::PortCounter **)&_swig_go_result = (swss::PortCounter *)result; 
  return _swig_go_result;
}


swss::PortCounter *_wrap_new_PortCounter__SWIG_1_swsscommon_728e05b169b08794() {
  swss::PortCounter *result = 0 ;
  swss::PortCounter *_swig_go_result;
  
  
  {
    try {
      result = (swss::PortCounter *)new swss::PortCounter();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::PortCounter **)&_swig_go_result = (swss::PortCounter *)result; 
  return _swig_go_result;
}


void _wrap_delete_PortCounter_swsscommon_728e05b169b08794(swss::PortCounter *_swig_go_0) {
  swss::PortCounter *arg1 = (swss::PortCounter *) 0 ;
  
  arg1 = *(swss::PortCounter **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


_gostring_ _wrap_PortCounter_getLuaScript_swsscommon_728e05b169b08794(swss::PortCounter *_swig_go_0) {
  swss::PortCounter *arg1 = (swss::PortCounter *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::PortCounter **)&_swig_go_0; 
  
  {
    try {
      result = (std::string *) &((swss::PortCounter const *)arg1)->getLuaScript();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


bool _wrap_PortCounter_usingLuaTable_swsscommon_728e05b169b08794(swss::PortCounter *_swig_go_0, swss::CounterTable *_swig_go_1, _gostring_ _swig_go_2) {
  swss::PortCounter *arg1 = (swss::PortCounter *) 0 ;
  swss::CounterTable *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::PortCounter **)&_swig_go_0; 
  arg2 = *(swss::CounterTable **)&_swig_go_1; 
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      result = (bool)((swss::PortCounter const *)arg1)->usingLuaTable((swss::CounterTable const &)*arg2,(std::string const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


std::vector< std::string > *_wrap_PortCounter_getLuaKeys_swsscommon_728e05b169b08794(swss::PortCounter *_swig_go_0, swss::CounterTable *_swig_go_1, _gostring_ _swig_go_2) {
  swss::PortCounter *arg1 = (swss::PortCounter *) 0 ;
  swss::CounterTable *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::vector< std::string > result;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = *(swss::PortCounter **)&_swig_go_0; 
  arg2 = *(swss::CounterTable **)&_swig_go_1; 
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      result = ((swss::PortCounter const *)arg1)->getLuaKeys((swss::CounterTable const &)*arg2,(std::string const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::vector< std::string > **)&_swig_go_result = new std::vector< std::string >(result); 
  return _swig_go_result;
}


std::pair< int,std::string > *_wrap_PortCounter_getKey_swsscommon_728e05b169b08794(swss::PortCounter *_swig_go_0, swss::CounterTable *_swig_go_1, _gostring_ _swig_go_2) {
  swss::PortCounter *arg1 = (swss::PortCounter *) 0 ;
  swss::CounterTable *arg2 = 0 ;
  std::string *arg3 = 0 ;
  swss::Counter::KeyPair result;
  std::pair< int,std::string > *_swig_go_result;
  
  arg1 = *(swss::PortCounter **)&_swig_go_0; 
  arg2 = *(swss::CounterTable **)&_swig_go_1; 
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      result = ((swss::PortCounter const *)arg1)->getKey((swss::CounterTable const &)*arg2,(std::string const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::Counter::KeyPair **)&_swig_go_result = new swss::Counter::KeyPair(result); 
  return _swig_go_result;
}


swss::KeyCache< std::string > *_wrap_PortCounter_keyCacheInstance_swsscommon_728e05b169b08794() {
  swss::KeyCache< std::string > *result = 0 ;
  swss::KeyCache< std::string > *_swig_go_result;
  
  
  {
    try {
      result = (swss::KeyCache< std::string > *) &swss::PortCounter::keyCacheInstance();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::KeyCache< std::string > **)&_swig_go_result = result; 
  return _swig_go_result;
}


std::vector< std::string > *_wrap_PortCounter_getLuaArgv_swsscommon_728e05b169b08794(swss::PortCounter *_swig_go_0) {
  swss::PortCounter *arg1 = (swss::PortCounter *) 0 ;
  std::vector< std::string > result;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = *(swss::PortCounter **)&_swig_go_0; 
  
  swss::Counter *swig_b0 = (swss::Counter *)arg1;
  result = ((swss::Counter const *)swig_b0)->getLuaArgv();
  *(std::vector< std::string > **)&_swig_go_result = new std::vector< std::string >(result); 
  return _swig_go_result;
}


swss::MacsecCounter *_wrap_new_MacsecCounter_swsscommon_728e05b169b08794() {
  swss::MacsecCounter *result = 0 ;
  swss::MacsecCounter *_swig_go_result;
  
  
  {
    try {
      result = (swss::MacsecCounter *)new swss::MacsecCounter();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::MacsecCounter **)&_swig_go_result = (swss::MacsecCounter *)result; 
  return _swig_go_result;
}


void _wrap_delete_MacsecCounter_swsscommon_728e05b169b08794(swss::MacsecCounter *_swig_go_0) {
  swss::MacsecCounter *arg1 = (swss::MacsecCounter *) 0 ;
  
  arg1 = *(swss::MacsecCounter **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


std::pair< int,std::string > *_wrap_MacsecCounter_getKey_swsscommon_728e05b169b08794(swss::MacsecCounter *_swig_go_0, swss::CounterTable *_swig_go_1, _gostring_ _swig_go_2) {
  swss::MacsecCounter *arg1 = (swss::MacsecCounter *) 0 ;
  swss::CounterTable *arg2 = 0 ;
  std::string *arg3 = 0 ;
  swss::Counter::KeyPair result;
  std::pair< int,std::string > *_swig_go_result;
  
  arg1 = *(swss::MacsecCounter **)&_swig_go_0; 
  arg2 = *(swss::CounterTable **)&_swig_go_1; 
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      result = ((swss::MacsecCounter const *)arg1)->getKey((swss::CounterTable const &)*arg2,(std::string const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::Counter::KeyPair **)&_swig_go_result = new swss::Counter::KeyPair(result); 
  return _swig_go_result;
}


swss::KeyCache< std::pair< int,std::string > > *_wrap_MacsecCounter_keyCacheInstance_swsscommon_728e05b169b08794() {
  swss::KeyCache< swss::Counter::KeyPair > *result = 0 ;
  swss::KeyCache< std::pair< int,std::string > > *_swig_go_result;
  
  
  {
    try {
      result = (swss::KeyCache< swss::Counter::KeyPair > *) &swss::MacsecCounter::keyCacheInstance();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::KeyCache< swss::Counter::KeyPair > **)&_swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_MacsecCounter_getLuaScript_swsscommon_728e05b169b08794(swss::MacsecCounter *_swig_go_0) {
  swss::MacsecCounter *arg1 = (swss::MacsecCounter *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::MacsecCounter **)&_swig_go_0; 
  
  swss::Counter *swig_b0 = (swss::Counter *)arg1;
  result = (std::string *) &((swss::Counter const *)swig_b0)->getLuaScript();
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


std::vector< std::string > *_wrap_MacsecCounter_getLuaArgv_swsscommon_728e05b169b08794(swss::MacsecCounter *_swig_go_0) {
  swss::MacsecCounter *arg1 = (swss::MacsecCounter *) 0 ;
  std::vector< std::string > result;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = *(swss::MacsecCounter **)&_swig_go_0; 
  
  swss::Counter *swig_b0 = (swss::Counter *)arg1;
  result = ((swss::Counter const *)swig_b0)->getLuaArgv();
  *(std::vector< std::string > **)&_swig_go_result = new std::vector< std::string >(result); 
  return _swig_go_result;
}


bool _wrap_MacsecCounter_usingLuaTable_swsscommon_728e05b169b08794(swss::MacsecCounter *_swig_go_0, swss::CounterTable *_swig_go_1, _gostring_ _swig_go_2) {
  swss::MacsecCounter *arg1 = (swss::MacsecCounter *) 0 ;
  swss::CounterTable *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::MacsecCounter **)&_swig_go_0; 
  arg2 = *(swss::CounterTable **)&_swig_go_1; 
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  swss::Counter *swig_b0 = (swss::Counter *)arg1;
  result = (bool)((swss::Counter const *)swig_b0)->usingLuaTable((swss::CounterTable const &)*arg2,(std::string const &)*arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


std::vector< std::string > *_wrap_MacsecCounter_getLuaKeys_swsscommon_728e05b169b08794(swss::MacsecCounter *_swig_go_0, swss::CounterTable *_swig_go_1, _gostring_ _swig_go_2) {
  swss::MacsecCounter *arg1 = (swss::MacsecCounter *) 0 ;
  swss::CounterTable *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::vector< std::string > result;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = *(swss::MacsecCounter **)&_swig_go_0; 
  arg2 = *(swss::CounterTable **)&_swig_go_1; 
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  swss::Counter *swig_b0 = (swss::Counter *)arg1;
  result = ((swss::Counter const *)swig_b0)->getLuaKeys((swss::CounterTable const &)*arg2,(std::string const &)*arg3);
  *(std::vector< std::string > **)&_swig_go_result = new std::vector< std::string >(result); 
  return _swig_go_result;
}


std::pair< int,std::string > *_wrap_new_CounterKeyPair__SWIG_0_swsscommon_728e05b169b08794() {
  std::pair< int,std::string > *result = 0 ;
  std::pair< int,std::string > *_swig_go_result;
  
  
  {
    try {
      result = (std::pair< int,std::string > *)new std::pair< int,std::string >();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::pair< int,std::string > **)&_swig_go_result = (std::pair< int,std::string > *)result; 
  return _swig_go_result;
}


std::pair< int,std::string > *_wrap_new_CounterKeyPair__SWIG_1_swsscommon_728e05b169b08794(intgo _swig_go_0, _gostring_ _swig_go_1) {
  int arg1 ;
  std::string arg2 ;
  std::pair< int,std::string > *result = 0 ;
  std::pair< int,std::string > *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  (&arg2)->assign(_swig_go_1.p, _swig_go_1.n); 
  
  {
    try {
      result = (std::pair< int,std::string > *)new std::pair< int,std::string >(arg1,arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::pair< int,std::string > **)&_swig_go_result = (std::pair< int,std::string > *)result; 
  return _swig_go_result;
}


std::pair< int,std::string > *_wrap_new_CounterKeyPair__SWIG_2_swsscommon_728e05b169b08794(std::pair< int,std::string > *_swig_go_0) {
  std::pair< int,std::string > *arg1 = 0 ;
  std::pair< int,std::string > *result = 0 ;
  std::pair< int,std::string > *_swig_go_result;
  
  arg1 = *(std::pair< int,std::string > **)&_swig_go_0; 
  
  {
    try {
      result = (std::pair< int,std::string > *)new std::pair< int,std::string >((std::pair< int,std::string > const &)*arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::pair< int,std::string > **)&_swig_go_result = (std::pair< int,std::string > *)result; 
  return _swig_go_result;
}


void _wrap_CounterKeyPair_first_set_swsscommon_728e05b169b08794(std::pair< int,std::string > *_swig_go_0, intgo _swig_go_1) {
  std::pair< int,std::string > *arg1 = (std::pair< int,std::string > *) 0 ;
  int arg2 ;
  
  arg1 = *(std::pair< int,std::string > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->first = arg2;
  
}


intgo _wrap_CounterKeyPair_first_get_swsscommon_728e05b169b08794(std::pair< int,std::string > *_swig_go_0) {
  std::pair< int,std::string > *arg1 = (std::pair< int,std::string > *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(std::pair< int,std::string > **)&_swig_go_0; 
  
  result = (int) ((arg1)->first);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_CounterKeyPair_second_set_swsscommon_728e05b169b08794(std::pair< int,std::string > *_swig_go_0, _gostring_ _swig_go_1) {
  std::pair< int,std::string > *arg1 = (std::pair< int,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(std::pair< int,std::string > **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->second = *arg2;
  
}


_gostring_ _wrap_CounterKeyPair_second_get_swsscommon_728e05b169b08794(std::pair< int,std::string > *_swig_go_0) {
  std::pair< int,std::string > *arg1 = (std::pair< int,std::string > *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(std::pair< int,std::string > **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->second);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_delete_CounterKeyPair_swsscommon_728e05b169b08794(std::pair< int,std::string > *_swig_go_0) {
  std::pair< int,std::string > *arg1 = (std::pair< int,std::string > *) 0 ;
  
  arg1 = *(std::pair< int,std::string > **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


swss::KeyCache< std::string > *_wrap_new_KeyStringCache_swsscommon_728e05b169b08794(std::function< void (swss::CounterTable const &) > *_swig_go_0) {
  std::function< void (swss::CounterTable const &) > *arg1 = 0 ;
  swss::KeyCache< std::string > *result = 0 ;
  swss::KeyCache< std::string > *_swig_go_result;
  
  arg1 = *(std::function< void (swss::CounterTable const &) > **)&_swig_go_0; 
  
  {
    try {
      result = (swss::KeyCache< std::string > *)new swss::KeyCache< std::string >((std::function< void (swss::CounterTable const &) > const &)*arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::KeyCache< std::string > **)&_swig_go_result = (swss::KeyCache< std::string > *)result; 
  return _swig_go_result;
}


bool _wrap_KeyStringCache_enabled_swsscommon_728e05b169b08794(swss::KeyCache< std::string > *_swig_go_0) {
  swss::KeyCache< std::string > *arg1 = (swss::KeyCache< std::string > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::KeyCache< std::string > **)&_swig_go_0; 
  
  {
    try {
      result = (bool)((swss::KeyCache< std::string > const *)arg1)->enabled();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_KeyStringCache_enable_swsscommon_728e05b169b08794(swss::KeyCache< std::string > *_swig_go_0, swss::CounterTable *_swig_go_1) {
  swss::KeyCache< std::string > *arg1 = (swss::KeyCache< std::string > *) 0 ;
  swss::CounterTable *arg2 = 0 ;
  
  arg1 = *(swss::KeyCache< std::string > **)&_swig_go_0; 
  arg2 = *(swss::CounterTable **)&_swig_go_1; 
  
  {
    try {
      (arg1)->enable((swss::CounterTable const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_KeyStringCache_disable_swsscommon_728e05b169b08794(swss::KeyCache< std::string > *_swig_go_0) {
  swss::KeyCache< std::string > *arg1 = (swss::KeyCache< std::string > *) 0 ;
  
  arg1 = *(swss::KeyCache< std::string > **)&_swig_go_0; 
  
  {
    try {
      (arg1)->disable();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


bool _wrap_KeyStringCache_empty_swsscommon_728e05b169b08794(swss::KeyCache< std::string > *_swig_go_0) {
  swss::KeyCache< std::string > *arg1 = (swss::KeyCache< std::string > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::KeyCache< std::string > **)&_swig_go_0; 
  
  {
    try {
      result = (bool)((swss::KeyCache< std::string > const *)arg1)->empty();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_KeyStringCache_clear_swsscommon_728e05b169b08794(swss::KeyCache< std::string > *_swig_go_0) {
  swss::KeyCache< std::string > *arg1 = (swss::KeyCache< std::string > *) 0 ;
  
  arg1 = *(swss::KeyCache< std::string > **)&_swig_go_0; 
  
  {
    try {
      (arg1)->clear();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


_gostring_ _wrap_KeyStringCache_at_swsscommon_728e05b169b08794(swss::KeyCache< std::string > *_swig_go_0, _gostring_ _swig_go_1) {
  swss::KeyCache< std::string > *arg1 = (swss::KeyCache< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::KeyCache< std::string > **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = (std::string *) &((swss::KeyCache< std::string > const *)arg1)->at((std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_KeyStringCache_insert_swsscommon_728e05b169b08794(swss::KeyCache< std::string > *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  swss::KeyCache< std::string > *arg1 = (swss::KeyCache< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = *(swss::KeyCache< std::string > **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      (arg1)->insert((std::string const &)*arg2,(std::string const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_KeyStringCache_refresh_swsscommon_728e05b169b08794(swss::KeyCache< std::string > *_swig_go_0, swss::CounterTable *_swig_go_1) {
  swss::KeyCache< std::string > *arg1 = (swss::KeyCache< std::string > *) 0 ;
  swss::CounterTable *arg2 = 0 ;
  
  arg1 = *(swss::KeyCache< std::string > **)&_swig_go_0; 
  arg2 = *(swss::CounterTable **)&_swig_go_1; 
  
  {
    try {
      (arg1)->refresh((swss::CounterTable const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_delete_KeyStringCache_swsscommon_728e05b169b08794(swss::KeyCache< std::string > *_swig_go_0) {
  swss::KeyCache< std::string > *arg1 = (swss::KeyCache< std::string > *) 0 ;
  
  arg1 = *(swss::KeyCache< std::string > **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


swss::KeyCache< std::pair< int,std::string > > *_wrap_new_KeyPairCache_swsscommon_728e05b169b08794(std::function< void (swss::CounterTable const &) > *_swig_go_0) {
  std::function< void (swss::CounterTable const &) > *arg1 = 0 ;
  swss::KeyCache< swss::Counter::KeyPair > *result = 0 ;
  swss::KeyCache< std::pair< int,std::string > > *_swig_go_result;
  
  arg1 = *(std::function< void (swss::CounterTable const &) > **)&_swig_go_0; 
  
  {
    try {
      result = (swss::KeyCache< swss::Counter::KeyPair > *)new swss::KeyCache< swss::Counter::KeyPair >((std::function< void (swss::CounterTable const &) > const &)*arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::KeyCache< swss::Counter::KeyPair > **)&_swig_go_result = (swss::KeyCache< swss::Counter::KeyPair > *)result; 
  return _swig_go_result;
}


bool _wrap_KeyPairCache_enabled_swsscommon_728e05b169b08794(swss::KeyCache< std::pair< int,std::string > > *_swig_go_0) {
  swss::KeyCache< swss::Counter::KeyPair > *arg1 = (swss::KeyCache< swss::Counter::KeyPair > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::KeyCache< swss::Counter::KeyPair > **)&_swig_go_0; 
  
  {
    try {
      result = (bool)((swss::KeyCache< swss::Counter::KeyPair > const *)arg1)->enabled();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_KeyPairCache_enable_swsscommon_728e05b169b08794(swss::KeyCache< std::pair< int,std::string > > *_swig_go_0, swss::CounterTable *_swig_go_1) {
  swss::KeyCache< swss::Counter::KeyPair > *arg1 = (swss::KeyCache< swss::Counter::KeyPair > *) 0 ;
  swss::CounterTable *arg2 = 0 ;
  
  arg1 = *(swss::KeyCache< swss::Counter::KeyPair > **)&_swig_go_0; 
  arg2 = *(swss::CounterTable **)&_swig_go_1; 
  
  {
    try {
      (arg1)->enable((swss::CounterTable const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_KeyPairCache_disable_swsscommon_728e05b169b08794(swss::KeyCache< std::pair< int,std::string > > *_swig_go_0) {
  swss::KeyCache< swss::Counter::KeyPair > *arg1 = (swss::KeyCache< swss::Counter::KeyPair > *) 0 ;
  
  arg1 = *(swss::KeyCache< swss::Counter::KeyPair > **)&_swig_go_0; 
  
  {
    try {
      (arg1)->disable();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


bool _wrap_KeyPairCache_empty_swsscommon_728e05b169b08794(swss::KeyCache< std::pair< int,std::string > > *_swig_go_0) {
  swss::KeyCache< swss::Counter::KeyPair > *arg1 = (swss::KeyCache< swss::Counter::KeyPair > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::KeyCache< swss::Counter::KeyPair > **)&_swig_go_0; 
  
  {
    try {
      result = (bool)((swss::KeyCache< swss::Counter::KeyPair > const *)arg1)->empty();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_KeyPairCache_clear_swsscommon_728e05b169b08794(swss::KeyCache< std::pair< int,std::string > > *_swig_go_0) {
  swss::KeyCache< swss::Counter::KeyPair > *arg1 = (swss::KeyCache< swss::Counter::KeyPair > *) 0 ;
  
  arg1 = *(swss::KeyCache< swss::Counter::KeyPair > **)&_swig_go_0; 
  
  {
    try {
      (arg1)->clear();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


std::pair< int,std::string > *_wrap_KeyPairCache_at_swsscommon_728e05b169b08794(swss::KeyCache< std::pair< int,std::string > > *_swig_go_0, _gostring_ _swig_go_1) {
  swss::KeyCache< swss::Counter::KeyPair > *arg1 = (swss::KeyCache< swss::Counter::KeyPair > *) 0 ;
  std::string *arg2 = 0 ;
  std::pair< int,std::string > *result = 0 ;
  std::pair< int,std::string > *_swig_go_result;
  
  arg1 = *(swss::KeyCache< swss::Counter::KeyPair > **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = (std::pair< int,std::string > *) &((swss::KeyCache< swss::Counter::KeyPair > const *)arg1)->at((std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::pair< int,std::string > **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_KeyPairCache_insert_swsscommon_728e05b169b08794(swss::KeyCache< std::pair< int,std::string > > *_swig_go_0, _gostring_ _swig_go_1, std::pair< int,std::string > *_swig_go_2) {
  swss::KeyCache< swss::Counter::KeyPair > *arg1 = (swss::KeyCache< swss::Counter::KeyPair > *) 0 ;
  std::string *arg2 = 0 ;
  std::pair< int,std::string > *arg3 = 0 ;
  
  arg1 = *(swss::KeyCache< swss::Counter::KeyPair > **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = *(std::pair< int,std::string > **)&_swig_go_2; 
  
  {
    try {
      (arg1)->insert((std::string const &)*arg2,(std::pair< int,std::string > const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_KeyPairCache_refresh_swsscommon_728e05b169b08794(swss::KeyCache< std::pair< int,std::string > > *_swig_go_0, swss::CounterTable *_swig_go_1) {
  swss::KeyCache< swss::Counter::KeyPair > *arg1 = (swss::KeyCache< swss::Counter::KeyPair > *) 0 ;
  swss::CounterTable *arg2 = 0 ;
  
  arg1 = *(swss::KeyCache< swss::Counter::KeyPair > **)&_swig_go_0; 
  arg2 = *(swss::CounterTable **)&_swig_go_1; 
  
  {
    try {
      (arg1)->refresh((swss::CounterTable const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_delete_KeyPairCache_swsscommon_728e05b169b08794(swss::KeyCache< std::pair< int,std::string > > *_swig_go_0) {
  swss::KeyCache< swss::Counter::KeyPair > *arg1 = (swss::KeyCache< swss::Counter::KeyPair > *) 0 ;
  
  arg1 = *(swss::KeyCache< swss::Counter::KeyPair > **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


swss::ProducerTable *_wrap_new_ProducerTable__SWIG_0_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0, _gostring_ _swig_go_1) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  std::string *arg2 = 0 ;
  swss::ProducerTable *result = 0 ;
  swss::ProducerTable *_swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = (swss::ProducerTable *)new swss::ProducerTable(arg1,(std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::ProducerTable **)&_swig_go_result = (swss::ProducerTable *)result; 
  return _swig_go_result;
}


swss::ProducerTable *_wrap_new_ProducerTable__SWIG_1_swsscommon_728e05b169b08794(swss::RedisPipeline *_swig_go_0, _gostring_ _swig_go_1, bool _swig_go_2) {
  swss::RedisPipeline *arg1 = (swss::RedisPipeline *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  swss::ProducerTable *result = 0 ;
  swss::ProducerTable *_swig_go_result;
  
  arg1 = *(swss::RedisPipeline **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (bool)_swig_go_2; 
  
  {
    try {
      result = (swss::ProducerTable *)new swss::ProducerTable(arg1,(std::string const &)*arg2,arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::ProducerTable **)&_swig_go_result = (swss::ProducerTable *)result; 
  return _swig_go_result;
}


swss::ProducerTable *_wrap_new_ProducerTable__SWIG_2_swsscommon_728e05b169b08794(swss::RedisPipeline *_swig_go_0, _gostring_ _swig_go_1) {
  swss::RedisPipeline *arg1 = (swss::RedisPipeline *) 0 ;
  std::string *arg2 = 0 ;
  swss::ProducerTable *result = 0 ;
  swss::ProducerTable *_swig_go_result;
  
  arg1 = *(swss::RedisPipeline **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = (swss::ProducerTable *)new swss::ProducerTable(arg1,(std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::ProducerTable **)&_swig_go_result = (swss::ProducerTable *)result; 
  return _swig_go_result;
}


swss::ProducerTable *_wrap_new_ProducerTable__SWIG_3_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  swss::ProducerTable *result = 0 ;
  swss::ProducerTable *_swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      result = (swss::ProducerTable *)new swss::ProducerTable(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::ProducerTable **)&_swig_go_result = (swss::ProducerTable *)result; 
  return _swig_go_result;
}


void _wrap_delete_ProducerTable_swsscommon_728e05b169b08794(swss::ProducerTable *_swig_go_0) {
  swss::ProducerTable *arg1 = (swss::ProducerTable *) 0 ;
  
  arg1 = *(swss::ProducerTable **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_ProducerTable_setBuffered_swsscommon_728e05b169b08794(swss::ProducerTable *_swig_go_0, bool _swig_go_1) {
  swss::ProducerTable *arg1 = (swss::ProducerTable *) 0 ;
  bool arg2 ;
  
  arg1 = *(swss::ProducerTable **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  {
    try {
      (arg1)->setBuffered(arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_ProducerTable_set__SWIG_0_swsscommon_728e05b169b08794(swss::ProducerTable *_swig_go_0, _gostring_ _swig_go_1, std::vector< std::pair< std::string,std::string > > *_swig_go_2, _gostring_ _swig_go_3, _gostring_ _swig_go_4) {
  swss::ProducerTable *arg1 = (swss::ProducerTable *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< swss::FieldValueTuple > *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  
  arg1 = *(swss::ProducerTable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = *(std::vector< swss::FieldValueTuple > **)&_swig_go_2; 
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(_swig_go_4.p, _swig_go_4.n);
  arg5 = &arg5_str;
  
  
  {
    try {
      (arg1)->set((std::string const &)*arg2,(std::vector< swss::FieldValueTuple > const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_ProducerTable_set__SWIG_1_swsscommon_728e05b169b08794(swss::ProducerTable *_swig_go_0, _gostring_ _swig_go_1, std::vector< std::pair< std::string,std::string > > *_swig_go_2, _gostring_ _swig_go_3) {
  swss::ProducerTable *arg1 = (swss::ProducerTable *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< swss::FieldValueTuple > *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  arg1 = *(swss::ProducerTable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = *(std::vector< swss::FieldValueTuple > **)&_swig_go_2; 
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  {
    try {
      (arg1)->set((std::string const &)*arg2,(std::vector< swss::FieldValueTuple > const &)*arg3,(std::string const &)*arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_ProducerTable_set__SWIG_2_swsscommon_728e05b169b08794(swss::ProducerTable *_swig_go_0, _gostring_ _swig_go_1, std::vector< std::pair< std::string,std::string > > *_swig_go_2) {
  swss::ProducerTable *arg1 = (swss::ProducerTable *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< swss::FieldValueTuple > *arg3 = 0 ;
  
  arg1 = *(swss::ProducerTable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = *(std::vector< swss::FieldValueTuple > **)&_swig_go_2; 
  
  {
    try {
      (arg1)->set((std::string const &)*arg2,(std::vector< swss::FieldValueTuple > const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_ProducerTable_delete__SWIG_0_swsscommon_728e05b169b08794(swss::ProducerTable *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3) {
  swss::ProducerTable *arg1 = (swss::ProducerTable *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  arg1 = *(swss::ProducerTable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  {
    try {
      (arg1)->del((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_ProducerTable_delete__SWIG_1_swsscommon_728e05b169b08794(swss::ProducerTable *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  swss::ProducerTable *arg1 = (swss::ProducerTable *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = *(swss::ProducerTable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      (arg1)->del((std::string const &)*arg2,(std::string const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_ProducerTable_delete__SWIG_2_swsscommon_728e05b169b08794(swss::ProducerTable *_swig_go_0, _gostring_ _swig_go_1) {
  swss::ProducerTable *arg1 = (swss::ProducerTable *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(swss::ProducerTable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      (arg1)->del((std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_ProducerTable_flush_swsscommon_728e05b169b08794(swss::ProducerTable *_swig_go_0) {
  swss::ProducerTable *arg1 = (swss::ProducerTable *) 0 ;
  
  arg1 = *(swss::ProducerTable **)&_swig_go_0; 
  
  {
    try {
      (arg1)->flush();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


_gostring_ _wrap_ProducerTable_getTableSeparator_swsscommon_728e05b169b08794(intgo _swig_go_0) {
  int arg1 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  {
    try {
      result = swss::TableBase::getTableSeparator(arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_ProducerTable_getTableName_swsscommon_728e05b169b08794(swss::ProducerTable *_swig_go_0) {
  swss::ProducerTable *arg1 = (swss::ProducerTable *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ProducerTable **)&_swig_go_0; 
  
  swss::TableBase *swig_b0 = (swss::TableBase *)arg1;
  result = ((swss::TableBase const *)swig_b0)->getTableName();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_ProducerTable_getKeyName_swsscommon_728e05b169b08794(swss::ProducerTable *_swig_go_0, _gostring_ _swig_go_1) {
  swss::ProducerTable *arg1 = (swss::ProducerTable *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ProducerTable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  swss::TableBase *swig_b0 = (swss::TableBase *)arg1;
  result = (swig_b0)->getKeyName((std::string const &)*arg2);
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_ProducerTable_getTableNameSeparator_swsscommon_728e05b169b08794(swss::ProducerTable *_swig_go_0) {
  swss::ProducerTable *arg1 = (swss::ProducerTable *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ProducerTable **)&_swig_go_0; 
  
  swss::TableBase *swig_b0 = (swss::TableBase *)arg1;
  result = ((swss::TableBase const *)swig_b0)->getTableNameSeparator();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_ProducerTable_getChannelName__SWIG_0_swsscommon_728e05b169b08794(swss::ProducerTable *_swig_go_0) {
  swss::ProducerTable *arg1 = (swss::ProducerTable *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ProducerTable **)&_swig_go_0; 
  
  swss::TableBase *swig_b0 = (swss::TableBase *)arg1;
  result = (swig_b0)->getChannelName();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_ProducerTable_getChannelName__SWIG_1_swsscommon_728e05b169b08794(swss::ProducerTable *_swig_go_0, _gostring_ _swig_go_1) {
  swss::ProducerTable *arg1 = (swss::ProducerTable *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ProducerTable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  swss::TableBase *swig_b0 = (swss::TableBase *)arg1;
  result = (swig_b0)->getChannelName((std::string const &)*arg2);
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_ProducerTable_getChannelName__SWIG_2_swsscommon_728e05b169b08794(swss::ProducerTable *_swig_go_0, intgo _swig_go_1) {
  swss::ProducerTable *arg1 = (swss::ProducerTable *) 0 ;
  int arg2 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ProducerTable **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  swss::TableBase *swig_b0 = (swss::TableBase *)arg1;
  result = (swig_b0)->getChannelName(arg2);
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_ProducerTable_getKeyValueOpQueueTableName_swsscommon_728e05b169b08794(swss::ProducerTable *_swig_go_0) {
  swss::ProducerTable *arg1 = (swss::ProducerTable *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ProducerTable **)&_swig_go_0; 
  
  swss::TableName_KeyValueOpQueues *swig_b0 = (swss::TableName_KeyValueOpQueues *)arg1;
  result = ((swss::TableName_KeyValueOpQueues const *)swig_b0)->getKeyValueOpQueueTableName();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


swss::TableName_KeyValueOpQueues *_wrap_ProducerTable_SwigGetTableName_KeyValueOpQueues_swsscommon_728e05b169b08794(swss::ProducerTable *_swig_go_0) {
  swss::ProducerTable *arg1 = (swss::ProducerTable *) 0 ;
  swss::TableName_KeyValueOpQueues *result = 0 ;
  swss::TableName_KeyValueOpQueues *_swig_go_result;
  
  arg1 = *(swss::ProducerTable **)&_swig_go_0; 
  
  {
    try {
      result = (swss::TableName_KeyValueOpQueues*)arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::TableName_KeyValueOpQueues **)&_swig_go_result = (swss::TableName_KeyValueOpQueues *)result; 
  return _swig_go_result;
}


swss::ProducerStateTable *_wrap__swig_NewDirectorProducerStateTableProducerStateTable__SWIG_0_swsscommon_728e05b169b08794(intgo _swig_go_0, swss::DBConnector *_swig_go_1, _gostring_ _swig_go_2) {
  int arg1 ;
  swss::DBConnector *arg2 = (swss::DBConnector *) 0 ;
  std::string *arg3 = 0 ;
  swss::ProducerStateTable *result = 0 ;
  swss::ProducerStateTable *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = *(swss::DBConnector **)&_swig_go_1; 
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      result = new SwigDirector_ProducerStateTable(arg1, arg2, *arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::ProducerStateTable **)&_swig_go_result = (swss::ProducerStateTable *)result; 
  return _swig_go_result;
}


swss::ProducerStateTable *_wrap__swig_NewDirectorProducerStateTableProducerStateTable__SWIG_1_swsscommon_728e05b169b08794(intgo _swig_go_0, swss::RedisPipeline *_swig_go_1, _gostring_ _swig_go_2, bool _swig_go_3) {
  int arg1 ;
  swss::RedisPipeline *arg2 = (swss::RedisPipeline *) 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  swss::ProducerStateTable *result = 0 ;
  swss::ProducerStateTable *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = *(swss::RedisPipeline **)&_swig_go_1; 
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  arg4 = (bool)_swig_go_3; 
  
  {
    try {
      result = new SwigDirector_ProducerStateTable(arg1, arg2, *arg3, arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::ProducerStateTable **)&_swig_go_result = (swss::ProducerStateTable *)result; 
  return _swig_go_result;
}


swss::ProducerStateTable *_wrap__swig_NewDirectorProducerStateTableProducerStateTable__SWIG_2_swsscommon_728e05b169b08794(intgo _swig_go_0, swss::RedisPipeline *_swig_go_1, _gostring_ _swig_go_2) {
  int arg1 ;
  swss::RedisPipeline *arg2 = (swss::RedisPipeline *) 0 ;
  std::string *arg3 = 0 ;
  swss::ProducerStateTable *result = 0 ;
  swss::ProducerStateTable *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = *(swss::RedisPipeline **)&_swig_go_1; 
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      result = new SwigDirector_ProducerStateTable(arg1, arg2, *arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::ProducerStateTable **)&_swig_go_result = (swss::ProducerStateTable *)result; 
  return _swig_go_result;
}


void _wrap_DeleteDirectorProducerStateTable_swsscommon_728e05b169b08794(swss::ProducerStateTable *_swig_go_0) {
  swss::ProducerStateTable *arg1 = (swss::ProducerStateTable *) 0 ;
  
  arg1 = *(swss::ProducerStateTable **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap__swig_DirectorProducerStateTable_upcall_Set__SWIG_0_swsscommon_728e05b169b08794(SwigDirector_ProducerStateTable *_swig_go_0, _gostring_ _swig_go_1, std::vector< std::pair< std::string,std::string > > *_swig_go_2, _gostring_ _swig_go_3, _gostring_ _swig_go_4) {
  SwigDirector_ProducerStateTable *arg1 = (SwigDirector_ProducerStateTable *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< swss::FieldValueTuple > *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  
  arg1 = *(SwigDirector_ProducerStateTable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = *(std::vector< swss::FieldValueTuple > **)&_swig_go_2; 
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(_swig_go_4.p, _swig_go_4.n);
  arg5 = &arg5_str;
  
  
  {
    try {
      arg1->_swig_upcall_set__SWIG_0(*arg2, *arg3, *arg4, *arg5);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap__swig_DirectorProducerStateTable_upcall_Set__SWIG_1_swsscommon_728e05b169b08794(SwigDirector_ProducerStateTable *_swig_go_0, _gostring_ _swig_go_1, std::vector< std::pair< std::string,std::string > > *_swig_go_2, _gostring_ _swig_go_3) {
  SwigDirector_ProducerStateTable *arg1 = (SwigDirector_ProducerStateTable *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< swss::FieldValueTuple > *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  arg1 = *(SwigDirector_ProducerStateTable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = *(std::vector< swss::FieldValueTuple > **)&_swig_go_2; 
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  {
    try {
      arg1->_swig_upcall_set__SWIG_1(*arg2, *arg3, *arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap__swig_DirectorProducerStateTable_upcall_Set__SWIG_2_swsscommon_728e05b169b08794(SwigDirector_ProducerStateTable *_swig_go_0, _gostring_ _swig_go_1, std::vector< std::pair< std::string,std::string > > *_swig_go_2) {
  SwigDirector_ProducerStateTable *arg1 = (SwigDirector_ProducerStateTable *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< swss::FieldValueTuple > *arg3 = 0 ;
  
  arg1 = *(SwigDirector_ProducerStateTable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = *(std::vector< swss::FieldValueTuple > **)&_swig_go_2; 
  
  {
    try {
      arg1->_swig_upcall_set__SWIG_2(*arg2, *arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap__swig_DirectorProducerStateTable_upcall_Delete__SWIG_0_swsscommon_728e05b169b08794(SwigDirector_ProducerStateTable *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3) {
  SwigDirector_ProducerStateTable *arg1 = (SwigDirector_ProducerStateTable *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  arg1 = *(SwigDirector_ProducerStateTable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  {
    try {
      arg1->_swig_upcall_delete__SWIG_0(*arg2, *arg3, *arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap__swig_DirectorProducerStateTable_upcall_Delete__SWIG_1_swsscommon_728e05b169b08794(SwigDirector_ProducerStateTable *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  SwigDirector_ProducerStateTable *arg1 = (SwigDirector_ProducerStateTable *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = *(SwigDirector_ProducerStateTable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      arg1->_swig_upcall_delete__SWIG_1(*arg2, *arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap__swig_DirectorProducerStateTable_upcall_Delete__SWIG_2_swsscommon_728e05b169b08794(SwigDirector_ProducerStateTable *_swig_go_0, _gostring_ _swig_go_1) {
  SwigDirector_ProducerStateTable *arg1 = (SwigDirector_ProducerStateTable *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(SwigDirector_ProducerStateTable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      arg1->_swig_upcall_delete__SWIG_2(*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap__swig_DirectorProducerStateTable_upcall_Set__SWIG_3_swsscommon_728e05b169b08794(SwigDirector_ProducerStateTable *_swig_go_0, std::vector< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_1) {
  SwigDirector_ProducerStateTable *arg1 = (SwigDirector_ProducerStateTable *) 0 ;
  std::vector< swss::KeyOpFieldsValuesTuple > *arg2 = 0 ;
  
  arg1 = *(SwigDirector_ProducerStateTable **)&_swig_go_0; 
  arg2 = *(std::vector< swss::KeyOpFieldsValuesTuple > **)&_swig_go_1; 
  
  {
    try {
      arg1->_swig_upcall_set__SWIG_3(*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap__swig_DirectorProducerStateTable_upcall_Delete__SWIG_3_swsscommon_728e05b169b08794(SwigDirector_ProducerStateTable *_swig_go_0, std::vector< std::string > *_swig_go_1) {
  SwigDirector_ProducerStateTable *arg1 = (SwigDirector_ProducerStateTable *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  arg1 = *(SwigDirector_ProducerStateTable **)&_swig_go_0; 
  arg2 = *(std::vector< std::string > **)&_swig_go_1; 
  
  {
    try {
      arg1->_swig_upcall_delete__SWIG_3(*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


swss::ProducerStateTable *_wrap_new_ProducerStateTable__SWIG_0_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0, _gostring_ _swig_go_1) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  std::string *arg2 = 0 ;
  swss::ProducerStateTable *result = 0 ;
  swss::ProducerStateTable *_swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = (swss::ProducerStateTable *)new swss::ProducerStateTable(arg1,(std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::ProducerStateTable **)&_swig_go_result = (swss::ProducerStateTable *)result; 
  return _swig_go_result;
}


swss::ProducerStateTable *_wrap_new_ProducerStateTable__SWIG_1_swsscommon_728e05b169b08794(swss::RedisPipeline *_swig_go_0, _gostring_ _swig_go_1, bool _swig_go_2) {
  swss::RedisPipeline *arg1 = (swss::RedisPipeline *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  swss::ProducerStateTable *result = 0 ;
  swss::ProducerStateTable *_swig_go_result;
  
  arg1 = *(swss::RedisPipeline **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (bool)_swig_go_2; 
  
  {
    try {
      result = (swss::ProducerStateTable *)new swss::ProducerStateTable(arg1,(std::string const &)*arg2,arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::ProducerStateTable **)&_swig_go_result = (swss::ProducerStateTable *)result; 
  return _swig_go_result;
}


swss::ProducerStateTable *_wrap_new_ProducerStateTable__SWIG_2_swsscommon_728e05b169b08794(swss::RedisPipeline *_swig_go_0, _gostring_ _swig_go_1) {
  swss::RedisPipeline *arg1 = (swss::RedisPipeline *) 0 ;
  std::string *arg2 = 0 ;
  swss::ProducerStateTable *result = 0 ;
  swss::ProducerStateTable *_swig_go_result;
  
  arg1 = *(swss::RedisPipeline **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = (swss::ProducerStateTable *)new swss::ProducerStateTable(arg1,(std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::ProducerStateTable **)&_swig_go_result = (swss::ProducerStateTable *)result; 
  return _swig_go_result;
}


void _wrap_delete_ProducerStateTable_swsscommon_728e05b169b08794(swss::ProducerStateTable *_swig_go_0) {
  swss::ProducerStateTable *arg1 = (swss::ProducerStateTable *) 0 ;
  
  arg1 = *(swss::ProducerStateTable **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_ProducerStateTable_setBuffered_swsscommon_728e05b169b08794(swss::ProducerStateTable *_swig_go_0, bool _swig_go_1) {
  swss::ProducerStateTable *arg1 = (swss::ProducerStateTable *) 0 ;
  bool arg2 ;
  
  arg1 = *(swss::ProducerStateTable **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  {
    try {
      (arg1)->setBuffered(arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_ProducerStateTable_set__SWIG_0_swsscommon_728e05b169b08794(swss::ProducerStateTable *_swig_go_0, _gostring_ _swig_go_1, std::vector< std::pair< std::string,std::string > > *_swig_go_2, _gostring_ _swig_go_3, _gostring_ _swig_go_4) {
  swss::ProducerStateTable *arg1 = (swss::ProducerStateTable *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< swss::FieldValueTuple > *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  
  arg1 = *(swss::ProducerStateTable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = *(std::vector< swss::FieldValueTuple > **)&_swig_go_2; 
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(_swig_go_4.p, _swig_go_4.n);
  arg5 = &arg5_str;
  
  
  {
    try {
      (arg1)->set((std::string const &)*arg2,(std::vector< swss::FieldValueTuple > const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_ProducerStateTable_set__SWIG_1_swsscommon_728e05b169b08794(swss::ProducerStateTable *_swig_go_0, _gostring_ _swig_go_1, std::vector< std::pair< std::string,std::string > > *_swig_go_2, _gostring_ _swig_go_3) {
  swss::ProducerStateTable *arg1 = (swss::ProducerStateTable *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< swss::FieldValueTuple > *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  arg1 = *(swss::ProducerStateTable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = *(std::vector< swss::FieldValueTuple > **)&_swig_go_2; 
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  {
    try {
      (arg1)->set((std::string const &)*arg2,(std::vector< swss::FieldValueTuple > const &)*arg3,(std::string const &)*arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_ProducerStateTable_set__SWIG_2_swsscommon_728e05b169b08794(swss::ProducerStateTable *_swig_go_0, _gostring_ _swig_go_1, std::vector< std::pair< std::string,std::string > > *_swig_go_2) {
  swss::ProducerStateTable *arg1 = (swss::ProducerStateTable *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< swss::FieldValueTuple > *arg3 = 0 ;
  
  arg1 = *(swss::ProducerStateTable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = *(std::vector< swss::FieldValueTuple > **)&_swig_go_2; 
  
  {
    try {
      (arg1)->set((std::string const &)*arg2,(std::vector< swss::FieldValueTuple > const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_ProducerStateTable_delete__SWIG_0_swsscommon_728e05b169b08794(swss::ProducerStateTable *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3) {
  swss::ProducerStateTable *arg1 = (swss::ProducerStateTable *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  arg1 = *(swss::ProducerStateTable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  {
    try {
      (arg1)->del((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_ProducerStateTable_delete__SWIG_1_swsscommon_728e05b169b08794(swss::ProducerStateTable *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  swss::ProducerStateTable *arg1 = (swss::ProducerStateTable *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = *(swss::ProducerStateTable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      (arg1)->del((std::string const &)*arg2,(std::string const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_ProducerStateTable_delete__SWIG_2_swsscommon_728e05b169b08794(swss::ProducerStateTable *_swig_go_0, _gostring_ _swig_go_1) {
  swss::ProducerStateTable *arg1 = (swss::ProducerStateTable *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(swss::ProducerStateTable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      (arg1)->del((std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_ProducerStateTable_set__SWIG_3_swsscommon_728e05b169b08794(swss::ProducerStateTable *_swig_go_0, std::vector< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_1) {
  swss::ProducerStateTable *arg1 = (swss::ProducerStateTable *) 0 ;
  std::vector< swss::KeyOpFieldsValuesTuple > *arg2 = 0 ;
  
  arg1 = *(swss::ProducerStateTable **)&_swig_go_0; 
  arg2 = *(std::vector< swss::KeyOpFieldsValuesTuple > **)&_swig_go_1; 
  
  {
    try {
      (arg1)->set((std::vector< swss::KeyOpFieldsValuesTuple > const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_ProducerStateTable_delete__SWIG_3_swsscommon_728e05b169b08794(swss::ProducerStateTable *_swig_go_0, std::vector< std::string > *_swig_go_1) {
  swss::ProducerStateTable *arg1 = (swss::ProducerStateTable *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  arg1 = *(swss::ProducerStateTable **)&_swig_go_0; 
  arg2 = *(std::vector< std::string > **)&_swig_go_1; 
  
  {
    try {
      (arg1)->del((std::vector< std::string > const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_ProducerStateTable_flush_swsscommon_728e05b169b08794(swss::ProducerStateTable *_swig_go_0) {
  swss::ProducerStateTable *arg1 = (swss::ProducerStateTable *) 0 ;
  
  arg1 = *(swss::ProducerStateTable **)&_swig_go_0; 
  
  {
    try {
      (arg1)->flush();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


long long _wrap_ProducerStateTable_count_swsscommon_728e05b169b08794(swss::ProducerStateTable *_swig_go_0) {
  swss::ProducerStateTable *arg1 = (swss::ProducerStateTable *) 0 ;
  int64_t result;
  long long _swig_go_result;
  
  arg1 = *(swss::ProducerStateTable **)&_swig_go_0; 
  
  {
    try {
      result = (int64_t)(arg1)->count();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ProducerStateTable_clear_swsscommon_728e05b169b08794(swss::ProducerStateTable *_swig_go_0) {
  swss::ProducerStateTable *arg1 = (swss::ProducerStateTable *) 0 ;
  
  arg1 = *(swss::ProducerStateTable **)&_swig_go_0; 
  
  {
    try {
      (arg1)->clear();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_ProducerStateTable_create_temp_view_swsscommon_728e05b169b08794(swss::ProducerStateTable *_swig_go_0) {
  swss::ProducerStateTable *arg1 = (swss::ProducerStateTable *) 0 ;
  
  arg1 = *(swss::ProducerStateTable **)&_swig_go_0; 
  
  {
    try {
      (arg1)->create_temp_view();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_ProducerStateTable_apply_temp_view_swsscommon_728e05b169b08794(swss::ProducerStateTable *_swig_go_0) {
  swss::ProducerStateTable *arg1 = (swss::ProducerStateTable *) 0 ;
  
  arg1 = *(swss::ProducerStateTable **)&_swig_go_0; 
  
  {
    try {
      (arg1)->apply_temp_view();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


_gostring_ _wrap_ProducerStateTable_getTableSeparator_swsscommon_728e05b169b08794(intgo _swig_go_0) {
  int arg1 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  {
    try {
      result = swss::TableBase::getTableSeparator(arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_ProducerStateTable_getTableName_swsscommon_728e05b169b08794(swss::ProducerStateTable *_swig_go_0) {
  swss::ProducerStateTable *arg1 = (swss::ProducerStateTable *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ProducerStateTable **)&_swig_go_0; 
  
  swss::TableBase *swig_b0 = (swss::TableBase *)arg1;
  result = ((swss::TableBase const *)swig_b0)->getTableName();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_ProducerStateTable_getKeyName_swsscommon_728e05b169b08794(swss::ProducerStateTable *_swig_go_0, _gostring_ _swig_go_1) {
  swss::ProducerStateTable *arg1 = (swss::ProducerStateTable *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ProducerStateTable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  swss::TableBase *swig_b0 = (swss::TableBase *)arg1;
  result = (swig_b0)->getKeyName((std::string const &)*arg2);
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_ProducerStateTable_getTableNameSeparator_swsscommon_728e05b169b08794(swss::ProducerStateTable *_swig_go_0) {
  swss::ProducerStateTable *arg1 = (swss::ProducerStateTable *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ProducerStateTable **)&_swig_go_0; 
  
  swss::TableBase *swig_b0 = (swss::TableBase *)arg1;
  result = ((swss::TableBase const *)swig_b0)->getTableNameSeparator();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_ProducerStateTable_getChannelName__SWIG_0_swsscommon_728e05b169b08794(swss::ProducerStateTable *_swig_go_0) {
  swss::ProducerStateTable *arg1 = (swss::ProducerStateTable *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ProducerStateTable **)&_swig_go_0; 
  
  swss::TableBase *swig_b0 = (swss::TableBase *)arg1;
  result = (swig_b0)->getChannelName();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_ProducerStateTable_getChannelName__SWIG_1_swsscommon_728e05b169b08794(swss::ProducerStateTable *_swig_go_0, _gostring_ _swig_go_1) {
  swss::ProducerStateTable *arg1 = (swss::ProducerStateTable *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ProducerStateTable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  swss::TableBase *swig_b0 = (swss::TableBase *)arg1;
  result = (swig_b0)->getChannelName((std::string const &)*arg2);
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_ProducerStateTable_getChannelName__SWIG_2_swsscommon_728e05b169b08794(swss::ProducerStateTable *_swig_go_0, intgo _swig_go_1) {
  swss::ProducerStateTable *arg1 = (swss::ProducerStateTable *) 0 ;
  int arg2 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ProducerStateTable **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  swss::TableBase *swig_b0 = (swss::TableBase *)arg1;
  result = (swig_b0)->getChannelName(arg2);
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_ProducerStateTable_getKeySetName_swsscommon_728e05b169b08794(swss::ProducerStateTable *_swig_go_0) {
  swss::ProducerStateTable *arg1 = (swss::ProducerStateTable *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ProducerStateTable **)&_swig_go_0; 
  
  swss::TableName_KeySet *swig_b0 = (swss::TableName_KeySet *)arg1;
  result = ((swss::TableName_KeySet const *)swig_b0)->getKeySetName();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_ProducerStateTable_getDelKeySetName_swsscommon_728e05b169b08794(swss::ProducerStateTable *_swig_go_0) {
  swss::ProducerStateTable *arg1 = (swss::ProducerStateTable *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ProducerStateTable **)&_swig_go_0; 
  
  swss::TableName_KeySet *swig_b0 = (swss::TableName_KeySet *)arg1;
  result = ((swss::TableName_KeySet const *)swig_b0)->getDelKeySetName();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_ProducerStateTable_getStateHashPrefix_swsscommon_728e05b169b08794(swss::ProducerStateTable *_swig_go_0) {
  swss::ProducerStateTable *arg1 = (swss::ProducerStateTable *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ProducerStateTable **)&_swig_go_0; 
  
  swss::TableName_KeySet *swig_b0 = (swss::TableName_KeySet *)arg1;
  result = ((swss::TableName_KeySet const *)swig_b0)->getStateHashPrefix();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


swss::TableName_KeySet *_wrap_ProducerStateTable_SwigGetTableName_KeySet_swsscommon_728e05b169b08794(swss::ProducerStateTable *_swig_go_0) {
  swss::ProducerStateTable *arg1 = (swss::ProducerStateTable *) 0 ;
  swss::TableName_KeySet *result = 0 ;
  swss::TableName_KeySet *_swig_go_result;
  
  arg1 = *(swss::ProducerStateTable **)&_swig_go_0; 
  
  {
    try {
      result = (swss::TableName_KeySet*)arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::TableName_KeySet **)&_swig_go_result = (swss::TableName_KeySet *)result; 
  return _swig_go_result;
}


swss::ZmqProducerStateTable *_wrap__swig_NewDirectorZmqProducerStateTableZmqProducerStateTable__SWIG_0_swsscommon_728e05b169b08794(intgo _swig_go_0, swss::DBConnector *_swig_go_1, _gostring_ _swig_go_2, swss::ZmqClient *_swig_go_3, bool _swig_go_4) {
  int arg1 ;
  swss::DBConnector *arg2 = (swss::DBConnector *) 0 ;
  std::string *arg3 = 0 ;
  swss::ZmqClient *arg4 = 0 ;
  bool arg5 ;
  swss::ZmqProducerStateTable *result = 0 ;
  swss::ZmqProducerStateTable *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = *(swss::DBConnector **)&_swig_go_1; 
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  arg4 = *(swss::ZmqClient **)&_swig_go_3; 
  arg5 = (bool)_swig_go_4; 
  
  {
    try {
      result = new SwigDirector_ZmqProducerStateTable(arg1, arg2, *arg3, *arg4, arg5);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::ZmqProducerStateTable **)&_swig_go_result = (swss::ZmqProducerStateTable *)result; 
  return _swig_go_result;
}


swss::ZmqProducerStateTable *_wrap__swig_NewDirectorZmqProducerStateTableZmqProducerStateTable__SWIG_1_swsscommon_728e05b169b08794(intgo _swig_go_0, swss::DBConnector *_swig_go_1, _gostring_ _swig_go_2, swss::ZmqClient *_swig_go_3) {
  int arg1 ;
  swss::DBConnector *arg2 = (swss::DBConnector *) 0 ;
  std::string *arg3 = 0 ;
  swss::ZmqClient *arg4 = 0 ;
  swss::ZmqProducerStateTable *result = 0 ;
  swss::ZmqProducerStateTable *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = *(swss::DBConnector **)&_swig_go_1; 
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  arg4 = *(swss::ZmqClient **)&_swig_go_3; 
  
  {
    try {
      result = new SwigDirector_ZmqProducerStateTable(arg1, arg2, *arg3, *arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::ZmqProducerStateTable **)&_swig_go_result = (swss::ZmqProducerStateTable *)result; 
  return _swig_go_result;
}


swss::ZmqProducerStateTable *_wrap__swig_NewDirectorZmqProducerStateTableZmqProducerStateTable__SWIG_2_swsscommon_728e05b169b08794(intgo _swig_go_0, swss::RedisPipeline *_swig_go_1, _gostring_ _swig_go_2, swss::ZmqClient *_swig_go_3, bool _swig_go_4, bool _swig_go_5) {
  int arg1 ;
  swss::RedisPipeline *arg2 = (swss::RedisPipeline *) 0 ;
  std::string *arg3 = 0 ;
  swss::ZmqClient *arg4 = 0 ;
  bool arg5 ;
  bool arg6 ;
  swss::ZmqProducerStateTable *result = 0 ;
  swss::ZmqProducerStateTable *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = *(swss::RedisPipeline **)&_swig_go_1; 
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  arg4 = *(swss::ZmqClient **)&_swig_go_3; 
  arg5 = (bool)_swig_go_4; 
  arg6 = (bool)_swig_go_5; 
  
  {
    try {
      result = new SwigDirector_ZmqProducerStateTable(arg1, arg2, *arg3, *arg4, arg5, arg6);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::ZmqProducerStateTable **)&_swig_go_result = (swss::ZmqProducerStateTable *)result; 
  return _swig_go_result;
}


swss::ZmqProducerStateTable *_wrap__swig_NewDirectorZmqProducerStateTableZmqProducerStateTable__SWIG_3_swsscommon_728e05b169b08794(intgo _swig_go_0, swss::RedisPipeline *_swig_go_1, _gostring_ _swig_go_2, swss::ZmqClient *_swig_go_3, bool _swig_go_4) {
  int arg1 ;
  swss::RedisPipeline *arg2 = (swss::RedisPipeline *) 0 ;
  std::string *arg3 = 0 ;
  swss::ZmqClient *arg4 = 0 ;
  bool arg5 ;
  swss::ZmqProducerStateTable *result = 0 ;
  swss::ZmqProducerStateTable *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = *(swss::RedisPipeline **)&_swig_go_1; 
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  arg4 = *(swss::ZmqClient **)&_swig_go_3; 
  arg5 = (bool)_swig_go_4; 
  
  {
    try {
      result = new SwigDirector_ZmqProducerStateTable(arg1, arg2, *arg3, *arg4, arg5);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::ZmqProducerStateTable **)&_swig_go_result = (swss::ZmqProducerStateTable *)result; 
  return _swig_go_result;
}


swss::ZmqProducerStateTable *_wrap__swig_NewDirectorZmqProducerStateTableZmqProducerStateTable__SWIG_4_swsscommon_728e05b169b08794(intgo _swig_go_0, swss::RedisPipeline *_swig_go_1, _gostring_ _swig_go_2, swss::ZmqClient *_swig_go_3) {
  int arg1 ;
  swss::RedisPipeline *arg2 = (swss::RedisPipeline *) 0 ;
  std::string *arg3 = 0 ;
  swss::ZmqClient *arg4 = 0 ;
  swss::ZmqProducerStateTable *result = 0 ;
  swss::ZmqProducerStateTable *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = *(swss::RedisPipeline **)&_swig_go_1; 
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  arg4 = *(swss::ZmqClient **)&_swig_go_3; 
  
  {
    try {
      result = new SwigDirector_ZmqProducerStateTable(arg1, arg2, *arg3, *arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::ZmqProducerStateTable **)&_swig_go_result = (swss::ZmqProducerStateTable *)result; 
  return _swig_go_result;
}


void _wrap_DeleteDirectorZmqProducerStateTable_swsscommon_728e05b169b08794(swss::ZmqProducerStateTable *_swig_go_0) {
  swss::ZmqProducerStateTable *arg1 = (swss::ZmqProducerStateTable *) 0 ;
  
  arg1 = *(swss::ZmqProducerStateTable **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap__swig_DirectorZmqProducerStateTable_upcall_Set__SWIG_0_swsscommon_728e05b169b08794(SwigDirector_ZmqProducerStateTable *_swig_go_0, _gostring_ _swig_go_1, std::vector< std::pair< std::string,std::string > > *_swig_go_2, _gostring_ _swig_go_3, _gostring_ _swig_go_4) {
  SwigDirector_ZmqProducerStateTable *arg1 = (SwigDirector_ZmqProducerStateTable *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< swss::FieldValueTuple > *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  
  arg1 = *(SwigDirector_ZmqProducerStateTable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = *(std::vector< swss::FieldValueTuple > **)&_swig_go_2; 
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(_swig_go_4.p, _swig_go_4.n);
  arg5 = &arg5_str;
  
  
  {
    try {
      arg1->_swig_upcall_set__SWIG_0(*arg2, *arg3, *arg4, *arg5);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap__swig_DirectorZmqProducerStateTable_upcall_Set__SWIG_1_swsscommon_728e05b169b08794(SwigDirector_ZmqProducerStateTable *_swig_go_0, _gostring_ _swig_go_1, std::vector< std::pair< std::string,std::string > > *_swig_go_2, _gostring_ _swig_go_3) {
  SwigDirector_ZmqProducerStateTable *arg1 = (SwigDirector_ZmqProducerStateTable *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< swss::FieldValueTuple > *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  arg1 = *(SwigDirector_ZmqProducerStateTable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = *(std::vector< swss::FieldValueTuple > **)&_swig_go_2; 
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  {
    try {
      arg1->_swig_upcall_set__SWIG_1(*arg2, *arg3, *arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap__swig_DirectorZmqProducerStateTable_upcall_Set__SWIG_2_swsscommon_728e05b169b08794(SwigDirector_ZmqProducerStateTable *_swig_go_0, _gostring_ _swig_go_1, std::vector< std::pair< std::string,std::string > > *_swig_go_2) {
  SwigDirector_ZmqProducerStateTable *arg1 = (SwigDirector_ZmqProducerStateTable *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< swss::FieldValueTuple > *arg3 = 0 ;
  
  arg1 = *(SwigDirector_ZmqProducerStateTable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = *(std::vector< swss::FieldValueTuple > **)&_swig_go_2; 
  
  {
    try {
      arg1->_swig_upcall_set__SWIG_2(*arg2, *arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap__swig_DirectorZmqProducerStateTable_upcall_Delete__SWIG_0_swsscommon_728e05b169b08794(SwigDirector_ZmqProducerStateTable *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3) {
  SwigDirector_ZmqProducerStateTable *arg1 = (SwigDirector_ZmqProducerStateTable *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  arg1 = *(SwigDirector_ZmqProducerStateTable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  {
    try {
      arg1->_swig_upcall_delete__SWIG_0(*arg2, *arg3, *arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap__swig_DirectorZmqProducerStateTable_upcall_Delete__SWIG_1_swsscommon_728e05b169b08794(SwigDirector_ZmqProducerStateTable *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  SwigDirector_ZmqProducerStateTable *arg1 = (SwigDirector_ZmqProducerStateTable *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = *(SwigDirector_ZmqProducerStateTable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      arg1->_swig_upcall_delete__SWIG_1(*arg2, *arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap__swig_DirectorZmqProducerStateTable_upcall_Delete__SWIG_2_swsscommon_728e05b169b08794(SwigDirector_ZmqProducerStateTable *_swig_go_0, _gostring_ _swig_go_1) {
  SwigDirector_ZmqProducerStateTable *arg1 = (SwigDirector_ZmqProducerStateTable *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(SwigDirector_ZmqProducerStateTable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      arg1->_swig_upcall_delete__SWIG_2(*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap__swig_DirectorZmqProducerStateTable_upcall_Set__SWIG_3_swsscommon_728e05b169b08794(SwigDirector_ZmqProducerStateTable *_swig_go_0, std::vector< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_1) {
  SwigDirector_ZmqProducerStateTable *arg1 = (SwigDirector_ZmqProducerStateTable *) 0 ;
  std::vector< swss::KeyOpFieldsValuesTuple > *arg2 = 0 ;
  
  arg1 = *(SwigDirector_ZmqProducerStateTable **)&_swig_go_0; 
  arg2 = *(std::vector< swss::KeyOpFieldsValuesTuple > **)&_swig_go_1; 
  
  {
    try {
      arg1->_swig_upcall_set__SWIG_3(*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap__swig_DirectorZmqProducerStateTable_upcall_Delete__SWIG_3_swsscommon_728e05b169b08794(SwigDirector_ZmqProducerStateTable *_swig_go_0, std::vector< std::string > *_swig_go_1) {
  SwigDirector_ZmqProducerStateTable *arg1 = (SwigDirector_ZmqProducerStateTable *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  arg1 = *(SwigDirector_ZmqProducerStateTable **)&_swig_go_0; 
  arg2 = *(std::vector< std::string > **)&_swig_go_1; 
  
  {
    try {
      arg1->_swig_upcall_delete__SWIG_3(*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap__swig_DirectorZmqProducerStateTable_upcall_Send_swsscommon_728e05b169b08794(SwigDirector_ZmqProducerStateTable *_swig_go_0, std::vector< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_1) {
  SwigDirector_ZmqProducerStateTable *arg1 = (SwigDirector_ZmqProducerStateTable *) 0 ;
  std::vector< swss::KeyOpFieldsValuesTuple > *arg2 = 0 ;
  
  arg1 = *(SwigDirector_ZmqProducerStateTable **)&_swig_go_0; 
  arg2 = *(std::vector< swss::KeyOpFieldsValuesTuple > **)&_swig_go_1; 
  
  {
    try {
      arg1->_swig_upcall_send(*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


swss::ZmqProducerStateTable *_wrap_new_ZmqProducerStateTable__SWIG_0_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0, _gostring_ _swig_go_1, swss::ZmqClient *_swig_go_2, bool _swig_go_3) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  std::string *arg2 = 0 ;
  swss::ZmqClient *arg3 = 0 ;
  bool arg4 ;
  swss::ZmqProducerStateTable *result = 0 ;
  swss::ZmqProducerStateTable *_swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = *(swss::ZmqClient **)&_swig_go_2; 
  arg4 = (bool)_swig_go_3; 
  
  {
    try {
      result = (swss::ZmqProducerStateTable *)new swss::ZmqProducerStateTable(arg1,(std::string const &)*arg2,*arg3,arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::ZmqProducerStateTable **)&_swig_go_result = (swss::ZmqProducerStateTable *)result; 
  return _swig_go_result;
}


swss::ZmqProducerStateTable *_wrap_new_ZmqProducerStateTable__SWIG_1_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0, _gostring_ _swig_go_1, swss::ZmqClient *_swig_go_2) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  std::string *arg2 = 0 ;
  swss::ZmqClient *arg3 = 0 ;
  swss::ZmqProducerStateTable *result = 0 ;
  swss::ZmqProducerStateTable *_swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = *(swss::ZmqClient **)&_swig_go_2; 
  
  {
    try {
      result = (swss::ZmqProducerStateTable *)new swss::ZmqProducerStateTable(arg1,(std::string const &)*arg2,*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::ZmqProducerStateTable **)&_swig_go_result = (swss::ZmqProducerStateTable *)result; 
  return _swig_go_result;
}


swss::ZmqProducerStateTable *_wrap_new_ZmqProducerStateTable__SWIG_2_swsscommon_728e05b169b08794(swss::RedisPipeline *_swig_go_0, _gostring_ _swig_go_1, swss::ZmqClient *_swig_go_2, bool _swig_go_3, bool _swig_go_4) {
  swss::RedisPipeline *arg1 = (swss::RedisPipeline *) 0 ;
  std::string *arg2 = 0 ;
  swss::ZmqClient *arg3 = 0 ;
  bool arg4 ;
  bool arg5 ;
  swss::ZmqProducerStateTable *result = 0 ;
  swss::ZmqProducerStateTable *_swig_go_result;
  
  arg1 = *(swss::RedisPipeline **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = *(swss::ZmqClient **)&_swig_go_2; 
  arg4 = (bool)_swig_go_3; 
  arg5 = (bool)_swig_go_4; 
  
  {
    try {
      result = (swss::ZmqProducerStateTable *)new swss::ZmqProducerStateTable(arg1,(std::string const &)*arg2,*arg3,arg4,arg5);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::ZmqProducerStateTable **)&_swig_go_result = (swss::ZmqProducerStateTable *)result; 
  return _swig_go_result;
}


swss::ZmqProducerStateTable *_wrap_new_ZmqProducerStateTable__SWIG_3_swsscommon_728e05b169b08794(swss::RedisPipeline *_swig_go_0, _gostring_ _swig_go_1, swss::ZmqClient *_swig_go_2, bool _swig_go_3) {
  swss::RedisPipeline *arg1 = (swss::RedisPipeline *) 0 ;
  std::string *arg2 = 0 ;
  swss::ZmqClient *arg3 = 0 ;
  bool arg4 ;
  swss::ZmqProducerStateTable *result = 0 ;
  swss::ZmqProducerStateTable *_swig_go_result;
  
  arg1 = *(swss::RedisPipeline **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = *(swss::ZmqClient **)&_swig_go_2; 
  arg4 = (bool)_swig_go_3; 
  
  {
    try {
      result = (swss::ZmqProducerStateTable *)new swss::ZmqProducerStateTable(arg1,(std::string const &)*arg2,*arg3,arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::ZmqProducerStateTable **)&_swig_go_result = (swss::ZmqProducerStateTable *)result; 
  return _swig_go_result;
}


swss::ZmqProducerStateTable *_wrap_new_ZmqProducerStateTable__SWIG_4_swsscommon_728e05b169b08794(swss::RedisPipeline *_swig_go_0, _gostring_ _swig_go_1, swss::ZmqClient *_swig_go_2) {
  swss::RedisPipeline *arg1 = (swss::RedisPipeline *) 0 ;
  std::string *arg2 = 0 ;
  swss::ZmqClient *arg3 = 0 ;
  swss::ZmqProducerStateTable *result = 0 ;
  swss::ZmqProducerStateTable *_swig_go_result;
  
  arg1 = *(swss::RedisPipeline **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = *(swss::ZmqClient **)&_swig_go_2; 
  
  {
    try {
      result = (swss::ZmqProducerStateTable *)new swss::ZmqProducerStateTable(arg1,(std::string const &)*arg2,*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::ZmqProducerStateTable **)&_swig_go_result = (swss::ZmqProducerStateTable *)result; 
  return _swig_go_result;
}


void _wrap_ZmqProducerStateTable_set__SWIG_0_swsscommon_728e05b169b08794(swss::ZmqProducerStateTable *_swig_go_0, _gostring_ _swig_go_1, std::vector< std::pair< std::string,std::string > > *_swig_go_2, _gostring_ _swig_go_3, _gostring_ _swig_go_4) {
  swss::ZmqProducerStateTable *arg1 = (swss::ZmqProducerStateTable *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< swss::FieldValueTuple > *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  
  arg1 = *(swss::ZmqProducerStateTable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = *(std::vector< swss::FieldValueTuple > **)&_swig_go_2; 
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(_swig_go_4.p, _swig_go_4.n);
  arg5 = &arg5_str;
  
  
  {
    try {
      (arg1)->set((std::string const &)*arg2,(std::vector< swss::FieldValueTuple > const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_ZmqProducerStateTable_set__SWIG_1_swsscommon_728e05b169b08794(swss::ZmqProducerStateTable *_swig_go_0, _gostring_ _swig_go_1, std::vector< std::pair< std::string,std::string > > *_swig_go_2, _gostring_ _swig_go_3) {
  swss::ZmqProducerStateTable *arg1 = (swss::ZmqProducerStateTable *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< swss::FieldValueTuple > *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  arg1 = *(swss::ZmqProducerStateTable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = *(std::vector< swss::FieldValueTuple > **)&_swig_go_2; 
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  {
    try {
      (arg1)->set((std::string const &)*arg2,(std::vector< swss::FieldValueTuple > const &)*arg3,(std::string const &)*arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_ZmqProducerStateTable_set__SWIG_2_swsscommon_728e05b169b08794(swss::ZmqProducerStateTable *_swig_go_0, _gostring_ _swig_go_1, std::vector< std::pair< std::string,std::string > > *_swig_go_2) {
  swss::ZmqProducerStateTable *arg1 = (swss::ZmqProducerStateTable *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< swss::FieldValueTuple > *arg3 = 0 ;
  
  arg1 = *(swss::ZmqProducerStateTable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = *(std::vector< swss::FieldValueTuple > **)&_swig_go_2; 
  
  {
    try {
      (arg1)->set((std::string const &)*arg2,(std::vector< swss::FieldValueTuple > const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_ZmqProducerStateTable_delete__SWIG_0_swsscommon_728e05b169b08794(swss::ZmqProducerStateTable *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3) {
  swss::ZmqProducerStateTable *arg1 = (swss::ZmqProducerStateTable *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  arg1 = *(swss::ZmqProducerStateTable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  {
    try {
      (arg1)->del((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_ZmqProducerStateTable_delete__SWIG_1_swsscommon_728e05b169b08794(swss::ZmqProducerStateTable *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  swss::ZmqProducerStateTable *arg1 = (swss::ZmqProducerStateTable *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = *(swss::ZmqProducerStateTable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      (arg1)->del((std::string const &)*arg2,(std::string const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_ZmqProducerStateTable_delete__SWIG_2_swsscommon_728e05b169b08794(swss::ZmqProducerStateTable *_swig_go_0, _gostring_ _swig_go_1) {
  swss::ZmqProducerStateTable *arg1 = (swss::ZmqProducerStateTable *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(swss::ZmqProducerStateTable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      (arg1)->del((std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_ZmqProducerStateTable_set__SWIG_3_swsscommon_728e05b169b08794(swss::ZmqProducerStateTable *_swig_go_0, std::vector< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_1) {
  swss::ZmqProducerStateTable *arg1 = (swss::ZmqProducerStateTable *) 0 ;
  std::vector< swss::KeyOpFieldsValuesTuple > *arg2 = 0 ;
  
  arg1 = *(swss::ZmqProducerStateTable **)&_swig_go_0; 
  arg2 = *(std::vector< swss::KeyOpFieldsValuesTuple > **)&_swig_go_1; 
  
  {
    try {
      (arg1)->set((std::vector< swss::KeyOpFieldsValuesTuple > const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_ZmqProducerStateTable_delete__SWIG_3_swsscommon_728e05b169b08794(swss::ZmqProducerStateTable *_swig_go_0, std::vector< std::string > *_swig_go_1) {
  swss::ZmqProducerStateTable *arg1 = (swss::ZmqProducerStateTable *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  arg1 = *(swss::ZmqProducerStateTable **)&_swig_go_0; 
  arg2 = *(std::vector< std::string > **)&_swig_go_1; 
  
  {
    try {
      (arg1)->del((std::vector< std::string > const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_ZmqProducerStateTable_send_swsscommon_728e05b169b08794(swss::ZmqProducerStateTable *_swig_go_0, std::vector< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_1) {
  swss::ZmqProducerStateTable *arg1 = (swss::ZmqProducerStateTable *) 0 ;
  std::vector< swss::KeyOpFieldsValuesTuple > *arg2 = 0 ;
  
  arg1 = *(swss::ZmqProducerStateTable **)&_swig_go_0; 
  arg2 = *(std::vector< swss::KeyOpFieldsValuesTuple > **)&_swig_go_1; 
  
  {
    try {
      (arg1)->send((std::vector< swss::KeyOpFieldsValuesTuple > const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


long long _wrap_ZmqProducerStateTable_dbUpdaterQueueSize_swsscommon_728e05b169b08794(swss::ZmqProducerStateTable *_swig_go_0) {
  swss::ZmqProducerStateTable *arg1 = (swss::ZmqProducerStateTable *) 0 ;
  size_t result;
  long long _swig_go_result;
  
  arg1 = *(swss::ZmqProducerStateTable **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->dbUpdaterQueueSize();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_ZmqProducerStateTable_swsscommon_728e05b169b08794(swss::ZmqProducerStateTable *_swig_go_0) {
  swss::ZmqProducerStateTable *arg1 = (swss::ZmqProducerStateTable *) 0 ;
  
  arg1 = *(swss::ZmqProducerStateTable **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_ZmqProducerStateTable_setBuffered_swsscommon_728e05b169b08794(swss::ZmqProducerStateTable *_swig_go_0, bool _swig_go_1) {
  swss::ZmqProducerStateTable *arg1 = (swss::ZmqProducerStateTable *) 0 ;
  bool arg2 ;
  
  arg1 = *(swss::ZmqProducerStateTable **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  swss::ProducerStateTable *swig_b0 = (swss::ProducerStateTable *)arg1;
  (swig_b0)->setBuffered(arg2);
  
}


void _wrap_ZmqProducerStateTable_flush_swsscommon_728e05b169b08794(swss::ZmqProducerStateTable *_swig_go_0) {
  swss::ZmqProducerStateTable *arg1 = (swss::ZmqProducerStateTable *) 0 ;
  
  arg1 = *(swss::ZmqProducerStateTable **)&_swig_go_0; 
  
  swss::ProducerStateTable *swig_b0 = (swss::ProducerStateTable *)arg1;
  (swig_b0)->flush();
  
}


long long _wrap_ZmqProducerStateTable_count_swsscommon_728e05b169b08794(swss::ZmqProducerStateTable *_swig_go_0) {
  swss::ZmqProducerStateTable *arg1 = (swss::ZmqProducerStateTable *) 0 ;
  int64_t result;
  long long _swig_go_result;
  
  arg1 = *(swss::ZmqProducerStateTable **)&_swig_go_0; 
  
  swss::ProducerStateTable *swig_b0 = (swss::ProducerStateTable *)arg1;
  result = (int64_t)(swig_b0)->count();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ZmqProducerStateTable_clear_swsscommon_728e05b169b08794(swss::ZmqProducerStateTable *_swig_go_0) {
  swss::ZmqProducerStateTable *arg1 = (swss::ZmqProducerStateTable *) 0 ;
  
  arg1 = *(swss::ZmqProducerStateTable **)&_swig_go_0; 
  
  swss::ProducerStateTable *swig_b0 = (swss::ProducerStateTable *)arg1;
  (swig_b0)->clear();
  
}


void _wrap_ZmqProducerStateTable_create_temp_view_swsscommon_728e05b169b08794(swss::ZmqProducerStateTable *_swig_go_0) {
  swss::ZmqProducerStateTable *arg1 = (swss::ZmqProducerStateTable *) 0 ;
  
  arg1 = *(swss::ZmqProducerStateTable **)&_swig_go_0; 
  
  swss::ProducerStateTable *swig_b0 = (swss::ProducerStateTable *)arg1;
  (swig_b0)->create_temp_view();
  
}


void _wrap_ZmqProducerStateTable_apply_temp_view_swsscommon_728e05b169b08794(swss::ZmqProducerStateTable *_swig_go_0) {
  swss::ZmqProducerStateTable *arg1 = (swss::ZmqProducerStateTable *) 0 ;
  
  arg1 = *(swss::ZmqProducerStateTable **)&_swig_go_0; 
  
  swss::ProducerStateTable *swig_b0 = (swss::ProducerStateTable *)arg1;
  (swig_b0)->apply_temp_view();
  
}


_gostring_ _wrap_ZmqProducerStateTable_getTableSeparator_swsscommon_728e05b169b08794(intgo _swig_go_0) {
  int arg1 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  {
    try {
      result = swss::TableBase::getTableSeparator(arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_ZmqProducerStateTable_getTableName_swsscommon_728e05b169b08794(swss::ZmqProducerStateTable *_swig_go_0) {
  swss::ZmqProducerStateTable *arg1 = (swss::ZmqProducerStateTable *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ZmqProducerStateTable **)&_swig_go_0; 
  
  swss::ProducerStateTable *swig_b0 = (swss::ProducerStateTable *)arg1;
  swss::TableBase *swig_b1 = (swss::TableBase *)swig_b0;
  result = ((swss::TableBase const *)swig_b1)->getTableName();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_ZmqProducerStateTable_getKeyName_swsscommon_728e05b169b08794(swss::ZmqProducerStateTable *_swig_go_0, _gostring_ _swig_go_1) {
  swss::ZmqProducerStateTable *arg1 = (swss::ZmqProducerStateTable *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ZmqProducerStateTable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  swss::ProducerStateTable *swig_b0 = (swss::ProducerStateTable *)arg1;
  swss::TableBase *swig_b1 = (swss::TableBase *)swig_b0;
  result = (swig_b1)->getKeyName((std::string const &)*arg2);
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_ZmqProducerStateTable_getTableNameSeparator_swsscommon_728e05b169b08794(swss::ZmqProducerStateTable *_swig_go_0) {
  swss::ZmqProducerStateTable *arg1 = (swss::ZmqProducerStateTable *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ZmqProducerStateTable **)&_swig_go_0; 
  
  swss::ProducerStateTable *swig_b0 = (swss::ProducerStateTable *)arg1;
  swss::TableBase *swig_b1 = (swss::TableBase *)swig_b0;
  result = ((swss::TableBase const *)swig_b1)->getTableNameSeparator();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_ZmqProducerStateTable_getChannelName__SWIG_0_swsscommon_728e05b169b08794(swss::ZmqProducerStateTable *_swig_go_0) {
  swss::ZmqProducerStateTable *arg1 = (swss::ZmqProducerStateTable *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ZmqProducerStateTable **)&_swig_go_0; 
  
  swss::ProducerStateTable *swig_b0 = (swss::ProducerStateTable *)arg1;
  swss::TableBase *swig_b1 = (swss::TableBase *)swig_b0;
  result = (swig_b1)->getChannelName();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_ZmqProducerStateTable_getChannelName__SWIG_1_swsscommon_728e05b169b08794(swss::ZmqProducerStateTable *_swig_go_0, _gostring_ _swig_go_1) {
  swss::ZmqProducerStateTable *arg1 = (swss::ZmqProducerStateTable *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ZmqProducerStateTable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  swss::ProducerStateTable *swig_b0 = (swss::ProducerStateTable *)arg1;
  swss::TableBase *swig_b1 = (swss::TableBase *)swig_b0;
  result = (swig_b1)->getChannelName((std::string const &)*arg2);
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_ZmqProducerStateTable_getChannelName__SWIG_2_swsscommon_728e05b169b08794(swss::ZmqProducerStateTable *_swig_go_0, intgo _swig_go_1) {
  swss::ZmqProducerStateTable *arg1 = (swss::ZmqProducerStateTable *) 0 ;
  int arg2 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ZmqProducerStateTable **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  swss::ProducerStateTable *swig_b0 = (swss::ProducerStateTable *)arg1;
  swss::TableBase *swig_b1 = (swss::TableBase *)swig_b0;
  result = (swig_b1)->getChannelName(arg2);
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_ZmqProducerStateTable_getKeySetName_swsscommon_728e05b169b08794(swss::ZmqProducerStateTable *_swig_go_0) {
  swss::ZmqProducerStateTable *arg1 = (swss::ZmqProducerStateTable *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ZmqProducerStateTable **)&_swig_go_0; 
  
  swss::ProducerStateTable *swig_b0 = (swss::ProducerStateTable *)arg1;
  swss::TableName_KeySet *swig_b1 = (swss::TableName_KeySet *)swig_b0;
  result = ((swss::TableName_KeySet const *)swig_b1)->getKeySetName();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_ZmqProducerStateTable_getDelKeySetName_swsscommon_728e05b169b08794(swss::ZmqProducerStateTable *_swig_go_0) {
  swss::ZmqProducerStateTable *arg1 = (swss::ZmqProducerStateTable *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ZmqProducerStateTable **)&_swig_go_0; 
  
  swss::ProducerStateTable *swig_b0 = (swss::ProducerStateTable *)arg1;
  swss::TableName_KeySet *swig_b1 = (swss::TableName_KeySet *)swig_b0;
  result = ((swss::TableName_KeySet const *)swig_b1)->getDelKeySetName();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_ZmqProducerStateTable_getStateHashPrefix_swsscommon_728e05b169b08794(swss::ZmqProducerStateTable *_swig_go_0) {
  swss::ZmqProducerStateTable *arg1 = (swss::ZmqProducerStateTable *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ZmqProducerStateTable **)&_swig_go_0; 
  
  swss::ProducerStateTable *swig_b0 = (swss::ProducerStateTable *)arg1;
  swss::TableName_KeySet *swig_b1 = (swss::TableName_KeySet *)swig_b0;
  result = ((swss::TableName_KeySet const *)swig_b1)->getStateHashPrefix();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


intgo _wrap_ConsumerTableBase_POP_BATCH_SIZE_get_swsscommon_728e05b169b08794(swss::ConsumerTableBase *_swig_go_0) {
  swss::ConsumerTableBase *arg1 = (swss::ConsumerTableBase *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(swss::ConsumerTableBase **)&_swig_go_0; 
  
  result = (int)(int) ((arg1)->POP_BATCH_SIZE);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_ConsumerTableBase_swsscommon_728e05b169b08794(swss::ConsumerTableBase *_swig_go_0) {
  swss::ConsumerTableBase *arg1 = (swss::ConsumerTableBase *) 0 ;
  
  arg1 = *(swss::ConsumerTableBase **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


swss::DBConnector *_wrap_ConsumerTableBase_getDbConnector_swsscommon_728e05b169b08794(swss::ConsumerTableBase *_swig_go_0) {
  swss::ConsumerTableBase *arg1 = (swss::ConsumerTableBase *) 0 ;
  swss::DBConnector *result = 0 ;
  swss::DBConnector *_swig_go_result;
  
  arg1 = *(swss::ConsumerTableBase **)&_swig_go_0; 
  
  {
    try {
      result = (swss::DBConnector *)((swss::ConsumerTableBase const *)arg1)->getDbConnector();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::DBConnector **)&_swig_go_result = (swss::DBConnector *)result; 
  return _swig_go_result;
}


void _wrap_ConsumerTableBase_pop__SWIG_0_swsscommon_728e05b169b08794(swss::ConsumerTableBase *_swig_go_0, std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > *_swig_go_1, _gostring_ _swig_go_2) {
  swss::ConsumerTableBase *arg1 = (swss::ConsumerTableBase *) 0 ;
  swss::KeyOpFieldsValuesTuple *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = *(swss::ConsumerTableBase **)&_swig_go_0; 
  arg2 = *(swss::KeyOpFieldsValuesTuple **)&_swig_go_1; 
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      (arg1)->pop(*arg2,(std::string const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_ConsumerTableBase_pop__SWIG_1_swsscommon_728e05b169b08794(swss::ConsumerTableBase *_swig_go_0, std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > *_swig_go_1) {
  swss::ConsumerTableBase *arg1 = (swss::ConsumerTableBase *) 0 ;
  swss::KeyOpFieldsValuesTuple *arg2 = 0 ;
  
  arg1 = *(swss::ConsumerTableBase **)&_swig_go_0; 
  arg2 = *(swss::KeyOpFieldsValuesTuple **)&_swig_go_1; 
  
  {
    try {
      (arg1)->pop(*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_ConsumerTableBase_pop__SWIG_2_swsscommon_728e05b169b08794(swss::ConsumerTableBase *_swig_go_0, std::string *_swig_go_1, std::string *_swig_go_2, std::vector< std::pair< std::string,std::string > > *_swig_go_3, _gostring_ _swig_go_4) {
  swss::ConsumerTableBase *arg1 = (swss::ConsumerTableBase *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::vector< swss::FieldValueTuple > *arg4 = 0 ;
  std::string *arg5 = 0 ;
  
  arg1 = *(swss::ConsumerTableBase **)&_swig_go_0; 
  arg2 = *(std::string **)&_swig_go_1; 
  arg3 = *(std::string **)&_swig_go_2; 
  arg4 = *(std::vector< swss::FieldValueTuple > **)&_swig_go_3; 
  
  std::string arg5_str(_swig_go_4.p, _swig_go_4.n);
  arg5 = &arg5_str;
  
  
  {
    try {
      (arg1)->pop(*arg2,*arg3,*arg4,(std::string const &)*arg5);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_ConsumerTableBase_pop__SWIG_3_swsscommon_728e05b169b08794(swss::ConsumerTableBase *_swig_go_0, std::string *_swig_go_1, std::string *_swig_go_2, std::vector< std::pair< std::string,std::string > > *_swig_go_3) {
  swss::ConsumerTableBase *arg1 = (swss::ConsumerTableBase *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::vector< swss::FieldValueTuple > *arg4 = 0 ;
  
  arg1 = *(swss::ConsumerTableBase **)&_swig_go_0; 
  arg2 = *(std::string **)&_swig_go_1; 
  arg3 = *(std::string **)&_swig_go_2; 
  arg4 = *(std::vector< swss::FieldValueTuple > **)&_swig_go_3; 
  
  {
    try {
      (arg1)->pop(*arg2,*arg3,*arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


bool _wrap_ConsumerTableBase_empty_swsscommon_728e05b169b08794(swss::ConsumerTableBase *_swig_go_0) {
  swss::ConsumerTableBase *arg1 = (swss::ConsumerTableBase *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::ConsumerTableBase **)&_swig_go_0; 
  
  {
    try {
      result = (bool)((swss::ConsumerTableBase const *)arg1)->empty();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_ConsumerTableBase_getTableSeparator_swsscommon_728e05b169b08794(intgo _swig_go_0) {
  int arg1 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  {
    try {
      result = swss::TableBase::getTableSeparator(arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_ConsumerTableBase_getTableName_swsscommon_728e05b169b08794(swss::ConsumerTableBase *_swig_go_0) {
  swss::ConsumerTableBase *arg1 = (swss::ConsumerTableBase *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ConsumerTableBase **)&_swig_go_0; 
  
  swss::TableConsumable *swig_b0 = (swss::TableConsumable *)arg1;
  swss::TableBase *swig_b1 = (swss::TableBase *)swig_b0;
  result = ((swss::TableBase const *)swig_b1)->getTableName();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_ConsumerTableBase_getKeyName_swsscommon_728e05b169b08794(swss::ConsumerTableBase *_swig_go_0, _gostring_ _swig_go_1) {
  swss::ConsumerTableBase *arg1 = (swss::ConsumerTableBase *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ConsumerTableBase **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  swss::TableConsumable *swig_b0 = (swss::TableConsumable *)arg1;
  swss::TableBase *swig_b1 = (swss::TableBase *)swig_b0;
  result = (swig_b1)->getKeyName((std::string const &)*arg2);
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_ConsumerTableBase_getTableNameSeparator_swsscommon_728e05b169b08794(swss::ConsumerTableBase *_swig_go_0) {
  swss::ConsumerTableBase *arg1 = (swss::ConsumerTableBase *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ConsumerTableBase **)&_swig_go_0; 
  
  swss::TableConsumable *swig_b0 = (swss::TableConsumable *)arg1;
  swss::TableBase *swig_b1 = (swss::TableBase *)swig_b0;
  result = ((swss::TableBase const *)swig_b1)->getTableNameSeparator();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_ConsumerTableBase_getChannelName__SWIG_0_swsscommon_728e05b169b08794(swss::ConsumerTableBase *_swig_go_0) {
  swss::ConsumerTableBase *arg1 = (swss::ConsumerTableBase *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ConsumerTableBase **)&_swig_go_0; 
  
  swss::TableConsumable *swig_b0 = (swss::TableConsumable *)arg1;
  swss::TableBase *swig_b1 = (swss::TableBase *)swig_b0;
  result = (swig_b1)->getChannelName();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_ConsumerTableBase_getChannelName__SWIG_1_swsscommon_728e05b169b08794(swss::ConsumerTableBase *_swig_go_0, _gostring_ _swig_go_1) {
  swss::ConsumerTableBase *arg1 = (swss::ConsumerTableBase *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ConsumerTableBase **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  swss::TableConsumable *swig_b0 = (swss::TableConsumable *)arg1;
  swss::TableBase *swig_b1 = (swss::TableBase *)swig_b0;
  result = (swig_b1)->getChannelName((std::string const &)*arg2);
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_ConsumerTableBase_getChannelName__SWIG_2_swsscommon_728e05b169b08794(swss::ConsumerTableBase *_swig_go_0, intgo _swig_go_1) {
  swss::ConsumerTableBase *arg1 = (swss::ConsumerTableBase *) 0 ;
  int arg2 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ConsumerTableBase **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  swss::TableConsumable *swig_b0 = (swss::TableConsumable *)arg1;
  swss::TableBase *swig_b1 = (swss::TableBase *)swig_b0;
  result = (swig_b1)->getChannelName(arg2);
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


void _wrap_ConsumerTableBase_pops__SWIG_0_swsscommon_728e05b169b08794(swss::ConsumerTableBase *_swig_go_0, std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_1) {
  swss::ConsumerTableBase *arg1 = (swss::ConsumerTableBase *) 0 ;
  std::deque< swss::KeyOpFieldsValuesTuple > *arg2 = 0 ;
  
  arg1 = *(swss::ConsumerTableBase **)&_swig_go_0; 
  arg2 = *(std::deque< swss::KeyOpFieldsValuesTuple > **)&_swig_go_1; 
  
  swss::TableConsumable *swig_b0 = (swss::TableConsumable *)arg1;
  swss::TableEntryPoppable *swig_b1 = (swss::TableEntryPoppable *)swig_b0;
  (swig_b1)->pops(*arg2);
  
}


void _wrap_ConsumerTableBase_pops__SWIG_1_swsscommon_728e05b169b08794(swss::ConsumerTableBase *_swig_go_0, std::vector< std::string > *_swig_go_1, std::vector< std::string > *_swig_go_2, std::vector< std::vector< std::pair< std::string,std::string > > > *_swig_go_3, _gostring_ _swig_go_4) {
  swss::ConsumerTableBase *arg1 = (swss::ConsumerTableBase *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  std::vector< std::string > *arg3 = 0 ;
  std::vector< std::vector< swss::FieldValueTuple > > *arg4 = 0 ;
  std::string *arg5 = 0 ;
  
  arg1 = *(swss::ConsumerTableBase **)&_swig_go_0; 
  arg2 = *(std::vector< std::string > **)&_swig_go_1; 
  arg3 = *(std::vector< std::string > **)&_swig_go_2; 
  arg4 = *(std::vector< std::vector< swss::FieldValueTuple > > **)&_swig_go_3; 
  
  std::string arg5_str(_swig_go_4.p, _swig_go_4.n);
  arg5 = &arg5_str;
  
  
  swss::TableConsumable *swig_b0 = (swss::TableConsumable *)arg1;
  swss::TableEntryPoppable *swig_b1 = (swss::TableEntryPoppable *)swig_b0;
  (swig_b1)->pops(*arg2,*arg3,*arg4,(std::string const &)*arg5);
  
}


void _wrap_ConsumerTableBase_pops__SWIG_2_swsscommon_728e05b169b08794(swss::ConsumerTableBase *_swig_go_0, std::vector< std::string > *_swig_go_1, std::vector< std::string > *_swig_go_2, std::vector< std::vector< std::pair< std::string,std::string > > > *_swig_go_3) {
  swss::ConsumerTableBase *arg1 = (swss::ConsumerTableBase *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  std::vector< std::string > *arg3 = 0 ;
  std::vector< std::vector< swss::FieldValueTuple > > *arg4 = 0 ;
  
  arg1 = *(swss::ConsumerTableBase **)&_swig_go_0; 
  arg2 = *(std::vector< std::string > **)&_swig_go_1; 
  arg3 = *(std::vector< std::string > **)&_swig_go_2; 
  arg4 = *(std::vector< std::vector< swss::FieldValueTuple > > **)&_swig_go_3; 
  
  swss::TableConsumable *swig_b0 = (swss::TableConsumable *)arg1;
  swss::TableEntryPoppable *swig_b1 = (swss::TableEntryPoppable *)swig_b0;
  (swig_b1)->pops(*arg2,*arg3,*arg4);
  
}


intgo _wrap_ConsumerTableBase_getFd_swsscommon_728e05b169b08794(swss::ConsumerTableBase *_swig_go_0) {
  swss::ConsumerTableBase *arg1 = (swss::ConsumerTableBase *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(swss::ConsumerTableBase **)&_swig_go_0; 
  
  swss::TableConsumable *swig_b0 = (swss::TableConsumable *)arg1;
  swss::RedisSelect *swig_b1 = (swss::RedisSelect *)swig_b0;
  result = (int)(swig_b1)->getFd();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_ConsumerTableBase_readData_swsscommon_728e05b169b08794(swss::ConsumerTableBase *_swig_go_0) {
  swss::ConsumerTableBase *arg1 = (swss::ConsumerTableBase *) 0 ;
  uint64_t result;
  long long _swig_go_result;
  
  arg1 = *(swss::ConsumerTableBase **)&_swig_go_0; 
  
  swss::TableConsumable *swig_b0 = (swss::TableConsumable *)arg1;
  swss::RedisSelect *swig_b1 = (swss::RedisSelect *)swig_b0;
  result = (uint64_t)(swig_b1)->readData();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_ConsumerTableBase_hasData_swsscommon_728e05b169b08794(swss::ConsumerTableBase *_swig_go_0) {
  swss::ConsumerTableBase *arg1 = (swss::ConsumerTableBase *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::ConsumerTableBase **)&_swig_go_0; 
  
  swss::TableConsumable *swig_b0 = (swss::TableConsumable *)arg1;
  swss::RedisSelect *swig_b1 = (swss::RedisSelect *)swig_b0;
  result = (bool)(swig_b1)->hasData();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_ConsumerTableBase_hasCachedData_swsscommon_728e05b169b08794(swss::ConsumerTableBase *_swig_go_0) {
  swss::ConsumerTableBase *arg1 = (swss::ConsumerTableBase *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::ConsumerTableBase **)&_swig_go_0; 
  
  swss::TableConsumable *swig_b0 = (swss::TableConsumable *)arg1;
  swss::RedisSelect *swig_b1 = (swss::RedisSelect *)swig_b0;
  result = (bool)(swig_b1)->hasCachedData();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_ConsumerTableBase_initializedWithData_swsscommon_728e05b169b08794(swss::ConsumerTableBase *_swig_go_0) {
  swss::ConsumerTableBase *arg1 = (swss::ConsumerTableBase *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::ConsumerTableBase **)&_swig_go_0; 
  
  swss::TableConsumable *swig_b0 = (swss::TableConsumable *)arg1;
  swss::RedisSelect *swig_b1 = (swss::RedisSelect *)swig_b0;
  result = (bool)(swig_b1)->initializedWithData();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ConsumerTableBase_updateAfterRead_swsscommon_728e05b169b08794(swss::ConsumerTableBase *_swig_go_0) {
  swss::ConsumerTableBase *arg1 = (swss::ConsumerTableBase *) 0 ;
  
  arg1 = *(swss::ConsumerTableBase **)&_swig_go_0; 
  
  swss::TableConsumable *swig_b0 = (swss::TableConsumable *)arg1;
  swss::RedisSelect *swig_b1 = (swss::RedisSelect *)swig_b0;
  (swig_b1)->updateAfterRead();
  
}


void _wrap_ConsumerTableBase_subscribe_swsscommon_728e05b169b08794(swss::ConsumerTableBase *_swig_go_0, swss::DBConnector *_swig_go_1, _gostring_ _swig_go_2) {
  swss::ConsumerTableBase *arg1 = (swss::ConsumerTableBase *) 0 ;
  swss::DBConnector *arg2 = (swss::DBConnector *) 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = *(swss::ConsumerTableBase **)&_swig_go_0; 
  arg2 = *(swss::DBConnector **)&_swig_go_1; 
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  swss::TableConsumable *swig_b0 = (swss::TableConsumable *)arg1;
  swss::RedisSelect *swig_b1 = (swss::RedisSelect *)swig_b0;
  (swig_b1)->subscribe(arg2,(std::string const &)*arg3);
  
}


void _wrap_ConsumerTableBase_psubscribe_swsscommon_728e05b169b08794(swss::ConsumerTableBase *_swig_go_0, swss::DBConnector *_swig_go_1, _gostring_ _swig_go_2) {
  swss::ConsumerTableBase *arg1 = (swss::ConsumerTableBase *) 0 ;
  swss::DBConnector *arg2 = (swss::DBConnector *) 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = *(swss::ConsumerTableBase **)&_swig_go_0; 
  arg2 = *(swss::DBConnector **)&_swig_go_1; 
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  swss::TableConsumable *swig_b0 = (swss::TableConsumable *)arg1;
  swss::RedisSelect *swig_b1 = (swss::RedisSelect *)swig_b0;
  (swig_b1)->psubscribe(arg2,(std::string const &)*arg3);
  
}


void _wrap_ConsumerTableBase_punsubscribe_swsscommon_728e05b169b08794(swss::ConsumerTableBase *_swig_go_0, _gostring_ _swig_go_1) {
  swss::ConsumerTableBase *arg1 = (swss::ConsumerTableBase *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(swss::ConsumerTableBase **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  swss::TableConsumable *swig_b0 = (swss::TableConsumable *)arg1;
  swss::RedisSelect *swig_b1 = (swss::RedisSelect *)swig_b0;
  (swig_b1)->punsubscribe((std::string const &)*arg2);
  
}


void _wrap_ConsumerTableBase_setQueueLength_swsscommon_728e05b169b08794(swss::ConsumerTableBase *_swig_go_0, long long _swig_go_1) {
  swss::ConsumerTableBase *arg1 = (swss::ConsumerTableBase *) 0 ;
  long long arg2 ;
  
  arg1 = *(swss::ConsumerTableBase **)&_swig_go_0; 
  arg2 = (long long)_swig_go_1; 
  
  swss::TableConsumable *swig_b0 = (swss::TableConsumable *)arg1;
  swss::RedisSelect *swig_b1 = (swss::RedisSelect *)swig_b0;
  (swig_b1)->setQueueLength(arg2);
  
}


intgo _wrap_ConsumerTableBase_getPri_swsscommon_728e05b169b08794(swss::ConsumerTableBase *_swig_go_0) {
  swss::ConsumerTableBase *arg1 = (swss::ConsumerTableBase *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(swss::ConsumerTableBase **)&_swig_go_0; 
  
  swss::TableConsumable *swig_b0 = (swss::TableConsumable *)arg1;
  swss::RedisSelect *swig_b1 = (swss::RedisSelect *)swig_b0;
  swss::Selectable *swig_b2 = (swss::Selectable *)swig_b1;
  result = (int)((swss::Selectable const *)swig_b2)->getPri();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ConsumerTableBase_multi_swsscommon_728e05b169b08794(swss::ConsumerTableBase *_swig_go_0) {
  swss::ConsumerTableBase *arg1 = (swss::ConsumerTableBase *) 0 ;
  
  arg1 = *(swss::ConsumerTableBase **)&_swig_go_0; 
  
  swss::RedisTransactioner *swig_b0 = (swss::RedisTransactioner *)arg1;
  (swig_b0)->multi();
  
}


bool _wrap_ConsumerTableBase_exec_swsscommon_728e05b169b08794(swss::ConsumerTableBase *_swig_go_0) {
  swss::ConsumerTableBase *arg1 = (swss::ConsumerTableBase *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::ConsumerTableBase **)&_swig_go_0; 
  
  swss::RedisTransactioner *swig_b0 = (swss::RedisTransactioner *)arg1;
  result = (bool)(swig_b0)->exec();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ConsumerTableBase_enqueue__SWIG_0_swsscommon_728e05b169b08794(swss::ConsumerTableBase *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  swss::ConsumerTableBase *arg1 = (swss::ConsumerTableBase *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  arg1 = *(swss::ConsumerTableBase **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (int)_swig_go_2; 
  
  swss::RedisTransactioner *swig_b0 = (swss::RedisTransactioner *)arg1;
  (swig_b0)->enqueue((std::string const &)*arg2,arg3);
  
}


void _wrap_ConsumerTableBase_enqueue__SWIG_1_swsscommon_728e05b169b08794(swss::ConsumerTableBase *_swig_go_0, swss::RedisCommand *_swig_go_1, intgo _swig_go_2) {
  swss::ConsumerTableBase *arg1 = (swss::ConsumerTableBase *) 0 ;
  swss::RedisCommand *arg2 = 0 ;
  int arg3 ;
  
  arg1 = *(swss::ConsumerTableBase **)&_swig_go_0; 
  arg2 = *(swss::RedisCommand **)&_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  
  swss::RedisTransactioner *swig_b0 = (swss::RedisTransactioner *)arg1;
  (swig_b0)->enqueue((swss::RedisCommand const &)*arg2,arg3);
  
}


redisReply *_wrap_ConsumerTableBase_dequeueReply_swsscommon_728e05b169b08794(swss::ConsumerTableBase *_swig_go_0) {
  swss::ConsumerTableBase *arg1 = (swss::ConsumerTableBase *) 0 ;
  redisReply *result = 0 ;
  redisReply *_swig_go_result;
  
  arg1 = *(swss::ConsumerTableBase **)&_swig_go_0; 
  
  swss::RedisTransactioner *swig_b0 = (swss::RedisTransactioner *)arg1;
  result = (redisReply *)(swig_b0)->dequeueReply();
  *(redisReply **)&_swig_go_result = (redisReply *)result; 
  return _swig_go_result;
}


swss::RedisTransactioner *_wrap_ConsumerTableBase_SwigGetRedisTransactioner_swsscommon_728e05b169b08794(swss::ConsumerTableBase *_swig_go_0) {
  swss::ConsumerTableBase *arg1 = (swss::ConsumerTableBase *) 0 ;
  swss::RedisTransactioner *result = 0 ;
  swss::RedisTransactioner *_swig_go_result;
  
  arg1 = *(swss::ConsumerTableBase **)&_swig_go_0; 
  
  {
    try {
      result = (swss::RedisTransactioner*)arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::RedisTransactioner **)&_swig_go_result = (swss::RedisTransactioner *)result; 
  return _swig_go_result;
}


swss::ConsumerTable *_wrap_new_ConsumerTable__SWIG_0_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, intgo _swig_go_3) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  swss::ConsumerTable *result = 0 ;
  swss::ConsumerTable *_swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (int)_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  
  {
    try {
      result = (swss::ConsumerTable *)new swss::ConsumerTable(arg1,(std::string const &)*arg2,arg3,arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::ConsumerTable **)&_swig_go_result = (swss::ConsumerTable *)result; 
  return _swig_go_result;
}


swss::ConsumerTable *_wrap_new_ConsumerTable__SWIG_1_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  swss::ConsumerTable *result = 0 ;
  swss::ConsumerTable *_swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (int)_swig_go_2; 
  
  {
    try {
      result = (swss::ConsumerTable *)new swss::ConsumerTable(arg1,(std::string const &)*arg2,arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::ConsumerTable **)&_swig_go_result = (swss::ConsumerTable *)result; 
  return _swig_go_result;
}


swss::ConsumerTable *_wrap_new_ConsumerTable__SWIG_2_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0, _gostring_ _swig_go_1) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  std::string *arg2 = 0 ;
  swss::ConsumerTable *result = 0 ;
  swss::ConsumerTable *_swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = (swss::ConsumerTable *)new swss::ConsumerTable(arg1,(std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::ConsumerTable **)&_swig_go_result = (swss::ConsumerTable *)result; 
  return _swig_go_result;
}


void _wrap_ConsumerTable_pops_swsscommon_728e05b169b08794(swss::ConsumerTable *_swig_go_0, std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_1) {
  swss::ConsumerTable *arg1 = (swss::ConsumerTable *) 0 ;
  std::deque< swss::KeyOpFieldsValuesTuple > *arg2 = 0 ;
  
  arg1 = *(swss::ConsumerTable **)&_swig_go_0; 
  arg2 = *(std::deque< swss::KeyOpFieldsValuesTuple > **)&_swig_go_1; 
  
  {
    try {
      (arg1)->pops(*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_ConsumerTable_setModifyRedis_swsscommon_728e05b169b08794(swss::ConsumerTable *_swig_go_0, bool _swig_go_1) {
  swss::ConsumerTable *arg1 = (swss::ConsumerTable *) 0 ;
  bool arg2 ;
  
  arg1 = *(swss::ConsumerTable **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  {
    try {
      (arg1)->setModifyRedis(arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_delete_ConsumerTable_swsscommon_728e05b169b08794(swss::ConsumerTable *_swig_go_0) {
  swss::ConsumerTable *arg1 = (swss::ConsumerTable *) 0 ;
  
  arg1 = *(swss::ConsumerTable **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


intgo _wrap_GetConsumerTable_POP_BATCH_SIZE_swsscommon_728e05b169b08794(swss::ConsumerTable *_swig_go_0) {
  swss::ConsumerTable *arg1 = (swss::ConsumerTable *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(swss::ConsumerTable **)&_swig_go_0; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  result = (int)(int) ((swig_b0)->POP_BATCH_SIZE);
  _swig_go_result = result; 
  return _swig_go_result;
}


swss::DBConnector *_wrap_ConsumerTable_getDbConnector_swsscommon_728e05b169b08794(swss::ConsumerTable *_swig_go_0) {
  swss::ConsumerTable *arg1 = (swss::ConsumerTable *) 0 ;
  swss::DBConnector *result = 0 ;
  swss::DBConnector *_swig_go_result;
  
  arg1 = *(swss::ConsumerTable **)&_swig_go_0; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  result = (swss::DBConnector *)((swss::ConsumerTableBase const *)swig_b0)->getDbConnector();
  *(swss::DBConnector **)&_swig_go_result = (swss::DBConnector *)result; 
  return _swig_go_result;
}


void _wrap_ConsumerTable_pop__SWIG_0_swsscommon_728e05b169b08794(swss::ConsumerTable *_swig_go_0, std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > *_swig_go_1, _gostring_ _swig_go_2) {
  swss::ConsumerTable *arg1 = (swss::ConsumerTable *) 0 ;
  swss::KeyOpFieldsValuesTuple *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = *(swss::ConsumerTable **)&_swig_go_0; 
  arg2 = *(swss::KeyOpFieldsValuesTuple **)&_swig_go_1; 
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  (swig_b0)->pop(*arg2,(std::string const &)*arg3);
  
}


void _wrap_ConsumerTable_pop__SWIG_1_swsscommon_728e05b169b08794(swss::ConsumerTable *_swig_go_0, std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > *_swig_go_1) {
  swss::ConsumerTable *arg1 = (swss::ConsumerTable *) 0 ;
  swss::KeyOpFieldsValuesTuple *arg2 = 0 ;
  
  arg1 = *(swss::ConsumerTable **)&_swig_go_0; 
  arg2 = *(swss::KeyOpFieldsValuesTuple **)&_swig_go_1; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  (swig_b0)->pop(*arg2);
  
}


void _wrap_ConsumerTable_pop__SWIG_2_swsscommon_728e05b169b08794(swss::ConsumerTable *_swig_go_0, std::string *_swig_go_1, std::string *_swig_go_2, std::vector< std::pair< std::string,std::string > > *_swig_go_3, _gostring_ _swig_go_4) {
  swss::ConsumerTable *arg1 = (swss::ConsumerTable *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::vector< swss::FieldValueTuple > *arg4 = 0 ;
  std::string *arg5 = 0 ;
  
  arg1 = *(swss::ConsumerTable **)&_swig_go_0; 
  arg2 = *(std::string **)&_swig_go_1; 
  arg3 = *(std::string **)&_swig_go_2; 
  arg4 = *(std::vector< swss::FieldValueTuple > **)&_swig_go_3; 
  
  std::string arg5_str(_swig_go_4.p, _swig_go_4.n);
  arg5 = &arg5_str;
  
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  (swig_b0)->pop(*arg2,*arg3,*arg4,(std::string const &)*arg5);
  
}


void _wrap_ConsumerTable_pop__SWIG_3_swsscommon_728e05b169b08794(swss::ConsumerTable *_swig_go_0, std::string *_swig_go_1, std::string *_swig_go_2, std::vector< std::pair< std::string,std::string > > *_swig_go_3) {
  swss::ConsumerTable *arg1 = (swss::ConsumerTable *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::vector< swss::FieldValueTuple > *arg4 = 0 ;
  
  arg1 = *(swss::ConsumerTable **)&_swig_go_0; 
  arg2 = *(std::string **)&_swig_go_1; 
  arg3 = *(std::string **)&_swig_go_2; 
  arg4 = *(std::vector< swss::FieldValueTuple > **)&_swig_go_3; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  (swig_b0)->pop(*arg2,*arg3,*arg4);
  
}


bool _wrap_ConsumerTable_empty_swsscommon_728e05b169b08794(swss::ConsumerTable *_swig_go_0) {
  swss::ConsumerTable *arg1 = (swss::ConsumerTable *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::ConsumerTable **)&_swig_go_0; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  result = (bool)((swss::ConsumerTableBase const *)swig_b0)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_ConsumerTable_getTableSeparator_swsscommon_728e05b169b08794(intgo _swig_go_0) {
  int arg1 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  {
    try {
      result = swss::TableBase::getTableSeparator(arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_ConsumerTable_getTableName_swsscommon_728e05b169b08794(swss::ConsumerTable *_swig_go_0) {
  swss::ConsumerTable *arg1 = (swss::ConsumerTable *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ConsumerTable **)&_swig_go_0; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::TableConsumable *swig_b1 = (swss::TableConsumable *)swig_b0;
  swss::TableBase *swig_b2 = (swss::TableBase *)swig_b1;
  result = ((swss::TableBase const *)swig_b2)->getTableName();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_ConsumerTable_getKeyName_swsscommon_728e05b169b08794(swss::ConsumerTable *_swig_go_0, _gostring_ _swig_go_1) {
  swss::ConsumerTable *arg1 = (swss::ConsumerTable *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ConsumerTable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::TableConsumable *swig_b1 = (swss::TableConsumable *)swig_b0;
  swss::TableBase *swig_b2 = (swss::TableBase *)swig_b1;
  result = (swig_b2)->getKeyName((std::string const &)*arg2);
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_ConsumerTable_getTableNameSeparator_swsscommon_728e05b169b08794(swss::ConsumerTable *_swig_go_0) {
  swss::ConsumerTable *arg1 = (swss::ConsumerTable *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ConsumerTable **)&_swig_go_0; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::TableConsumable *swig_b1 = (swss::TableConsumable *)swig_b0;
  swss::TableBase *swig_b2 = (swss::TableBase *)swig_b1;
  result = ((swss::TableBase const *)swig_b2)->getTableNameSeparator();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_ConsumerTable_getChannelName__SWIG_0_swsscommon_728e05b169b08794(swss::ConsumerTable *_swig_go_0) {
  swss::ConsumerTable *arg1 = (swss::ConsumerTable *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ConsumerTable **)&_swig_go_0; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::TableConsumable *swig_b1 = (swss::TableConsumable *)swig_b0;
  swss::TableBase *swig_b2 = (swss::TableBase *)swig_b1;
  result = (swig_b2)->getChannelName();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_ConsumerTable_getChannelName__SWIG_1_swsscommon_728e05b169b08794(swss::ConsumerTable *_swig_go_0, _gostring_ _swig_go_1) {
  swss::ConsumerTable *arg1 = (swss::ConsumerTable *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ConsumerTable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::TableConsumable *swig_b1 = (swss::TableConsumable *)swig_b0;
  swss::TableBase *swig_b2 = (swss::TableBase *)swig_b1;
  result = (swig_b2)->getChannelName((std::string const &)*arg2);
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_ConsumerTable_getChannelName__SWIG_2_swsscommon_728e05b169b08794(swss::ConsumerTable *_swig_go_0, intgo _swig_go_1) {
  swss::ConsumerTable *arg1 = (swss::ConsumerTable *) 0 ;
  int arg2 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ConsumerTable **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::TableConsumable *swig_b1 = (swss::TableConsumable *)swig_b0;
  swss::TableBase *swig_b2 = (swss::TableBase *)swig_b1;
  result = (swig_b2)->getChannelName(arg2);
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


intgo _wrap_ConsumerTable_getFd_swsscommon_728e05b169b08794(swss::ConsumerTable *_swig_go_0) {
  swss::ConsumerTable *arg1 = (swss::ConsumerTable *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(swss::ConsumerTable **)&_swig_go_0; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::TableConsumable *swig_b1 = (swss::TableConsumable *)swig_b0;
  swss::RedisSelect *swig_b2 = (swss::RedisSelect *)swig_b1;
  result = (int)(swig_b2)->getFd();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_ConsumerTable_readData_swsscommon_728e05b169b08794(swss::ConsumerTable *_swig_go_0) {
  swss::ConsumerTable *arg1 = (swss::ConsumerTable *) 0 ;
  uint64_t result;
  long long _swig_go_result;
  
  arg1 = *(swss::ConsumerTable **)&_swig_go_0; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::TableConsumable *swig_b1 = (swss::TableConsumable *)swig_b0;
  swss::RedisSelect *swig_b2 = (swss::RedisSelect *)swig_b1;
  result = (uint64_t)(swig_b2)->readData();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_ConsumerTable_hasData_swsscommon_728e05b169b08794(swss::ConsumerTable *_swig_go_0) {
  swss::ConsumerTable *arg1 = (swss::ConsumerTable *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::ConsumerTable **)&_swig_go_0; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::TableConsumable *swig_b1 = (swss::TableConsumable *)swig_b0;
  swss::RedisSelect *swig_b2 = (swss::RedisSelect *)swig_b1;
  result = (bool)(swig_b2)->hasData();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_ConsumerTable_hasCachedData_swsscommon_728e05b169b08794(swss::ConsumerTable *_swig_go_0) {
  swss::ConsumerTable *arg1 = (swss::ConsumerTable *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::ConsumerTable **)&_swig_go_0; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::TableConsumable *swig_b1 = (swss::TableConsumable *)swig_b0;
  swss::RedisSelect *swig_b2 = (swss::RedisSelect *)swig_b1;
  result = (bool)(swig_b2)->hasCachedData();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_ConsumerTable_initializedWithData_swsscommon_728e05b169b08794(swss::ConsumerTable *_swig_go_0) {
  swss::ConsumerTable *arg1 = (swss::ConsumerTable *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::ConsumerTable **)&_swig_go_0; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::TableConsumable *swig_b1 = (swss::TableConsumable *)swig_b0;
  swss::RedisSelect *swig_b2 = (swss::RedisSelect *)swig_b1;
  result = (bool)(swig_b2)->initializedWithData();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ConsumerTable_updateAfterRead_swsscommon_728e05b169b08794(swss::ConsumerTable *_swig_go_0) {
  swss::ConsumerTable *arg1 = (swss::ConsumerTable *) 0 ;
  
  arg1 = *(swss::ConsumerTable **)&_swig_go_0; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::TableConsumable *swig_b1 = (swss::TableConsumable *)swig_b0;
  swss::RedisSelect *swig_b2 = (swss::RedisSelect *)swig_b1;
  (swig_b2)->updateAfterRead();
  
}


void _wrap_ConsumerTable_subscribe_swsscommon_728e05b169b08794(swss::ConsumerTable *_swig_go_0, swss::DBConnector *_swig_go_1, _gostring_ _swig_go_2) {
  swss::ConsumerTable *arg1 = (swss::ConsumerTable *) 0 ;
  swss::DBConnector *arg2 = (swss::DBConnector *) 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = *(swss::ConsumerTable **)&_swig_go_0; 
  arg2 = *(swss::DBConnector **)&_swig_go_1; 
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::TableConsumable *swig_b1 = (swss::TableConsumable *)swig_b0;
  swss::RedisSelect *swig_b2 = (swss::RedisSelect *)swig_b1;
  (swig_b2)->subscribe(arg2,(std::string const &)*arg3);
  
}


void _wrap_ConsumerTable_psubscribe_swsscommon_728e05b169b08794(swss::ConsumerTable *_swig_go_0, swss::DBConnector *_swig_go_1, _gostring_ _swig_go_2) {
  swss::ConsumerTable *arg1 = (swss::ConsumerTable *) 0 ;
  swss::DBConnector *arg2 = (swss::DBConnector *) 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = *(swss::ConsumerTable **)&_swig_go_0; 
  arg2 = *(swss::DBConnector **)&_swig_go_1; 
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::TableConsumable *swig_b1 = (swss::TableConsumable *)swig_b0;
  swss::RedisSelect *swig_b2 = (swss::RedisSelect *)swig_b1;
  (swig_b2)->psubscribe(arg2,(std::string const &)*arg3);
  
}


void _wrap_ConsumerTable_punsubscribe_swsscommon_728e05b169b08794(swss::ConsumerTable *_swig_go_0, _gostring_ _swig_go_1) {
  swss::ConsumerTable *arg1 = (swss::ConsumerTable *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(swss::ConsumerTable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::TableConsumable *swig_b1 = (swss::TableConsumable *)swig_b0;
  swss::RedisSelect *swig_b2 = (swss::RedisSelect *)swig_b1;
  (swig_b2)->punsubscribe((std::string const &)*arg2);
  
}


void _wrap_ConsumerTable_setQueueLength_swsscommon_728e05b169b08794(swss::ConsumerTable *_swig_go_0, long long _swig_go_1) {
  swss::ConsumerTable *arg1 = (swss::ConsumerTable *) 0 ;
  long long arg2 ;
  
  arg1 = *(swss::ConsumerTable **)&_swig_go_0; 
  arg2 = (long long)_swig_go_1; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::TableConsumable *swig_b1 = (swss::TableConsumable *)swig_b0;
  swss::RedisSelect *swig_b2 = (swss::RedisSelect *)swig_b1;
  (swig_b2)->setQueueLength(arg2);
  
}


intgo _wrap_ConsumerTable_getPri_swsscommon_728e05b169b08794(swss::ConsumerTable *_swig_go_0) {
  swss::ConsumerTable *arg1 = (swss::ConsumerTable *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(swss::ConsumerTable **)&_swig_go_0; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::TableConsumable *swig_b1 = (swss::TableConsumable *)swig_b0;
  swss::RedisSelect *swig_b2 = (swss::RedisSelect *)swig_b1;
  swss::Selectable *swig_b3 = (swss::Selectable *)swig_b2;
  result = (int)((swss::Selectable const *)swig_b3)->getPri();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ConsumerTable_multi_swsscommon_728e05b169b08794(swss::ConsumerTable *_swig_go_0) {
  swss::ConsumerTable *arg1 = (swss::ConsumerTable *) 0 ;
  
  arg1 = *(swss::ConsumerTable **)&_swig_go_0; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::RedisTransactioner *swig_b1 = (swss::RedisTransactioner *)swig_b0;
  (swig_b1)->multi();
  
}


bool _wrap_ConsumerTable_exec_swsscommon_728e05b169b08794(swss::ConsumerTable *_swig_go_0) {
  swss::ConsumerTable *arg1 = (swss::ConsumerTable *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::ConsumerTable **)&_swig_go_0; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::RedisTransactioner *swig_b1 = (swss::RedisTransactioner *)swig_b0;
  result = (bool)(swig_b1)->exec();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ConsumerTable_enqueue__SWIG_0_swsscommon_728e05b169b08794(swss::ConsumerTable *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  swss::ConsumerTable *arg1 = (swss::ConsumerTable *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  arg1 = *(swss::ConsumerTable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (int)_swig_go_2; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::RedisTransactioner *swig_b1 = (swss::RedisTransactioner *)swig_b0;
  (swig_b1)->enqueue((std::string const &)*arg2,arg3);
  
}


void _wrap_ConsumerTable_enqueue__SWIG_1_swsscommon_728e05b169b08794(swss::ConsumerTable *_swig_go_0, swss::RedisCommand *_swig_go_1, intgo _swig_go_2) {
  swss::ConsumerTable *arg1 = (swss::ConsumerTable *) 0 ;
  swss::RedisCommand *arg2 = 0 ;
  int arg3 ;
  
  arg1 = *(swss::ConsumerTable **)&_swig_go_0; 
  arg2 = *(swss::RedisCommand **)&_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::RedisTransactioner *swig_b1 = (swss::RedisTransactioner *)swig_b0;
  (swig_b1)->enqueue((swss::RedisCommand const &)*arg2,arg3);
  
}


redisReply *_wrap_ConsumerTable_dequeueReply_swsscommon_728e05b169b08794(swss::ConsumerTable *_swig_go_0) {
  swss::ConsumerTable *arg1 = (swss::ConsumerTable *) 0 ;
  redisReply *result = 0 ;
  redisReply *_swig_go_result;
  
  arg1 = *(swss::ConsumerTable **)&_swig_go_0; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::RedisTransactioner *swig_b1 = (swss::RedisTransactioner *)swig_b0;
  result = (redisReply *)(swig_b1)->dequeueReply();
  *(redisReply **)&_swig_go_result = (redisReply *)result; 
  return _swig_go_result;
}


_gostring_ _wrap_ConsumerTable_getKeyValueOpQueueTableName_swsscommon_728e05b169b08794(swss::ConsumerTable *_swig_go_0) {
  swss::ConsumerTable *arg1 = (swss::ConsumerTable *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ConsumerTable **)&_swig_go_0; 
  
  swss::TableName_KeyValueOpQueues *swig_b0 = (swss::TableName_KeyValueOpQueues *)arg1;
  result = ((swss::TableName_KeyValueOpQueues const *)swig_b0)->getKeyValueOpQueueTableName();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


swss::TableName_KeyValueOpQueues *_wrap_ConsumerTable_SwigGetTableName_KeyValueOpQueues_swsscommon_728e05b169b08794(swss::ConsumerTable *_swig_go_0) {
  swss::ConsumerTable *arg1 = (swss::ConsumerTable *) 0 ;
  swss::TableName_KeyValueOpQueues *result = 0 ;
  swss::TableName_KeyValueOpQueues *_swig_go_result;
  
  arg1 = *(swss::ConsumerTable **)&_swig_go_0; 
  
  {
    try {
      result = (swss::TableName_KeyValueOpQueues*)arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::TableName_KeyValueOpQueues **)&_swig_go_result = (swss::TableName_KeyValueOpQueues *)result; 
  return _swig_go_result;
}


swss::ConsumerStateTable *_wrap_new_ConsumerStateTable__SWIG_0_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, intgo _swig_go_3) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  swss::ConsumerStateTable *result = 0 ;
  swss::ConsumerStateTable *_swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (int)_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  
  {
    try {
      result = (swss::ConsumerStateTable *)new swss::ConsumerStateTable(arg1,(std::string const &)*arg2,arg3,arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::ConsumerStateTable **)&_swig_go_result = (swss::ConsumerStateTable *)result; 
  return _swig_go_result;
}


swss::ConsumerStateTable *_wrap_new_ConsumerStateTable__SWIG_1_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  swss::ConsumerStateTable *result = 0 ;
  swss::ConsumerStateTable *_swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (int)_swig_go_2; 
  
  {
    try {
      result = (swss::ConsumerStateTable *)new swss::ConsumerStateTable(arg1,(std::string const &)*arg2,arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::ConsumerStateTable **)&_swig_go_result = (swss::ConsumerStateTable *)result; 
  return _swig_go_result;
}


swss::ConsumerStateTable *_wrap_new_ConsumerStateTable__SWIG_2_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0, _gostring_ _swig_go_1) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  std::string *arg2 = 0 ;
  swss::ConsumerStateTable *result = 0 ;
  swss::ConsumerStateTable *_swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = (swss::ConsumerStateTable *)new swss::ConsumerStateTable(arg1,(std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::ConsumerStateTable **)&_swig_go_result = (swss::ConsumerStateTable *)result; 
  return _swig_go_result;
}


void _wrap_ConsumerStateTable_pops_swsscommon_728e05b169b08794(swss::ConsumerStateTable *_swig_go_0, std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_1) {
  swss::ConsumerStateTable *arg1 = (swss::ConsumerStateTable *) 0 ;
  std::deque< swss::KeyOpFieldsValuesTuple > *arg2 = 0 ;
  
  arg1 = *(swss::ConsumerStateTable **)&_swig_go_0; 
  arg2 = *(std::deque< swss::KeyOpFieldsValuesTuple > **)&_swig_go_1; 
  
  {
    try {
      (arg1)->pops(*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_delete_ConsumerStateTable_swsscommon_728e05b169b08794(swss::ConsumerStateTable *_swig_go_0) {
  swss::ConsumerStateTable *arg1 = (swss::ConsumerStateTable *) 0 ;
  
  arg1 = *(swss::ConsumerStateTable **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


intgo _wrap_GetConsumerStateTable_POP_BATCH_SIZE_swsscommon_728e05b169b08794(swss::ConsumerStateTable *_swig_go_0) {
  swss::ConsumerStateTable *arg1 = (swss::ConsumerStateTable *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(swss::ConsumerStateTable **)&_swig_go_0; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  result = (int)(int) ((swig_b0)->POP_BATCH_SIZE);
  _swig_go_result = result; 
  return _swig_go_result;
}


swss::DBConnector *_wrap_ConsumerStateTable_getDbConnector_swsscommon_728e05b169b08794(swss::ConsumerStateTable *_swig_go_0) {
  swss::ConsumerStateTable *arg1 = (swss::ConsumerStateTable *) 0 ;
  swss::DBConnector *result = 0 ;
  swss::DBConnector *_swig_go_result;
  
  arg1 = *(swss::ConsumerStateTable **)&_swig_go_0; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  result = (swss::DBConnector *)((swss::ConsumerTableBase const *)swig_b0)->getDbConnector();
  *(swss::DBConnector **)&_swig_go_result = (swss::DBConnector *)result; 
  return _swig_go_result;
}


void _wrap_ConsumerStateTable_pop__SWIG_0_swsscommon_728e05b169b08794(swss::ConsumerStateTable *_swig_go_0, std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > *_swig_go_1, _gostring_ _swig_go_2) {
  swss::ConsumerStateTable *arg1 = (swss::ConsumerStateTable *) 0 ;
  swss::KeyOpFieldsValuesTuple *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = *(swss::ConsumerStateTable **)&_swig_go_0; 
  arg2 = *(swss::KeyOpFieldsValuesTuple **)&_swig_go_1; 
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  (swig_b0)->pop(*arg2,(std::string const &)*arg3);
  
}


void _wrap_ConsumerStateTable_pop__SWIG_1_swsscommon_728e05b169b08794(swss::ConsumerStateTable *_swig_go_0, std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > *_swig_go_1) {
  swss::ConsumerStateTable *arg1 = (swss::ConsumerStateTable *) 0 ;
  swss::KeyOpFieldsValuesTuple *arg2 = 0 ;
  
  arg1 = *(swss::ConsumerStateTable **)&_swig_go_0; 
  arg2 = *(swss::KeyOpFieldsValuesTuple **)&_swig_go_1; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  (swig_b0)->pop(*arg2);
  
}


void _wrap_ConsumerStateTable_pop__SWIG_2_swsscommon_728e05b169b08794(swss::ConsumerStateTable *_swig_go_0, std::string *_swig_go_1, std::string *_swig_go_2, std::vector< std::pair< std::string,std::string > > *_swig_go_3, _gostring_ _swig_go_4) {
  swss::ConsumerStateTable *arg1 = (swss::ConsumerStateTable *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::vector< swss::FieldValueTuple > *arg4 = 0 ;
  std::string *arg5 = 0 ;
  
  arg1 = *(swss::ConsumerStateTable **)&_swig_go_0; 
  arg2 = *(std::string **)&_swig_go_1; 
  arg3 = *(std::string **)&_swig_go_2; 
  arg4 = *(std::vector< swss::FieldValueTuple > **)&_swig_go_3; 
  
  std::string arg5_str(_swig_go_4.p, _swig_go_4.n);
  arg5 = &arg5_str;
  
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  (swig_b0)->pop(*arg2,*arg3,*arg4,(std::string const &)*arg5);
  
}


void _wrap_ConsumerStateTable_pop__SWIG_3_swsscommon_728e05b169b08794(swss::ConsumerStateTable *_swig_go_0, std::string *_swig_go_1, std::string *_swig_go_2, std::vector< std::pair< std::string,std::string > > *_swig_go_3) {
  swss::ConsumerStateTable *arg1 = (swss::ConsumerStateTable *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::vector< swss::FieldValueTuple > *arg4 = 0 ;
  
  arg1 = *(swss::ConsumerStateTable **)&_swig_go_0; 
  arg2 = *(std::string **)&_swig_go_1; 
  arg3 = *(std::string **)&_swig_go_2; 
  arg4 = *(std::vector< swss::FieldValueTuple > **)&_swig_go_3; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  (swig_b0)->pop(*arg2,*arg3,*arg4);
  
}


bool _wrap_ConsumerStateTable_empty_swsscommon_728e05b169b08794(swss::ConsumerStateTable *_swig_go_0) {
  swss::ConsumerStateTable *arg1 = (swss::ConsumerStateTable *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::ConsumerStateTable **)&_swig_go_0; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  result = (bool)((swss::ConsumerTableBase const *)swig_b0)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_ConsumerStateTable_getTableSeparator_swsscommon_728e05b169b08794(intgo _swig_go_0) {
  int arg1 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  {
    try {
      result = swss::TableBase::getTableSeparator(arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_ConsumerStateTable_getTableName_swsscommon_728e05b169b08794(swss::ConsumerStateTable *_swig_go_0) {
  swss::ConsumerStateTable *arg1 = (swss::ConsumerStateTable *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ConsumerStateTable **)&_swig_go_0; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::TableConsumable *swig_b1 = (swss::TableConsumable *)swig_b0;
  swss::TableBase *swig_b2 = (swss::TableBase *)swig_b1;
  result = ((swss::TableBase const *)swig_b2)->getTableName();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_ConsumerStateTable_getKeyName_swsscommon_728e05b169b08794(swss::ConsumerStateTable *_swig_go_0, _gostring_ _swig_go_1) {
  swss::ConsumerStateTable *arg1 = (swss::ConsumerStateTable *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ConsumerStateTable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::TableConsumable *swig_b1 = (swss::TableConsumable *)swig_b0;
  swss::TableBase *swig_b2 = (swss::TableBase *)swig_b1;
  result = (swig_b2)->getKeyName((std::string const &)*arg2);
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_ConsumerStateTable_getTableNameSeparator_swsscommon_728e05b169b08794(swss::ConsumerStateTable *_swig_go_0) {
  swss::ConsumerStateTable *arg1 = (swss::ConsumerStateTable *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ConsumerStateTable **)&_swig_go_0; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::TableConsumable *swig_b1 = (swss::TableConsumable *)swig_b0;
  swss::TableBase *swig_b2 = (swss::TableBase *)swig_b1;
  result = ((swss::TableBase const *)swig_b2)->getTableNameSeparator();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_ConsumerStateTable_getChannelName__SWIG_0_swsscommon_728e05b169b08794(swss::ConsumerStateTable *_swig_go_0) {
  swss::ConsumerStateTable *arg1 = (swss::ConsumerStateTable *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ConsumerStateTable **)&_swig_go_0; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::TableConsumable *swig_b1 = (swss::TableConsumable *)swig_b0;
  swss::TableBase *swig_b2 = (swss::TableBase *)swig_b1;
  result = (swig_b2)->getChannelName();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_ConsumerStateTable_getChannelName__SWIG_1_swsscommon_728e05b169b08794(swss::ConsumerStateTable *_swig_go_0, _gostring_ _swig_go_1) {
  swss::ConsumerStateTable *arg1 = (swss::ConsumerStateTable *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ConsumerStateTable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::TableConsumable *swig_b1 = (swss::TableConsumable *)swig_b0;
  swss::TableBase *swig_b2 = (swss::TableBase *)swig_b1;
  result = (swig_b2)->getChannelName((std::string const &)*arg2);
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_ConsumerStateTable_getChannelName__SWIG_2_swsscommon_728e05b169b08794(swss::ConsumerStateTable *_swig_go_0, intgo _swig_go_1) {
  swss::ConsumerStateTable *arg1 = (swss::ConsumerStateTable *) 0 ;
  int arg2 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ConsumerStateTable **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::TableConsumable *swig_b1 = (swss::TableConsumable *)swig_b0;
  swss::TableBase *swig_b2 = (swss::TableBase *)swig_b1;
  result = (swig_b2)->getChannelName(arg2);
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


intgo _wrap_ConsumerStateTable_getFd_swsscommon_728e05b169b08794(swss::ConsumerStateTable *_swig_go_0) {
  swss::ConsumerStateTable *arg1 = (swss::ConsumerStateTable *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(swss::ConsumerStateTable **)&_swig_go_0; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::TableConsumable *swig_b1 = (swss::TableConsumable *)swig_b0;
  swss::RedisSelect *swig_b2 = (swss::RedisSelect *)swig_b1;
  result = (int)(swig_b2)->getFd();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_ConsumerStateTable_readData_swsscommon_728e05b169b08794(swss::ConsumerStateTable *_swig_go_0) {
  swss::ConsumerStateTable *arg1 = (swss::ConsumerStateTable *) 0 ;
  uint64_t result;
  long long _swig_go_result;
  
  arg1 = *(swss::ConsumerStateTable **)&_swig_go_0; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::TableConsumable *swig_b1 = (swss::TableConsumable *)swig_b0;
  swss::RedisSelect *swig_b2 = (swss::RedisSelect *)swig_b1;
  result = (uint64_t)(swig_b2)->readData();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_ConsumerStateTable_hasData_swsscommon_728e05b169b08794(swss::ConsumerStateTable *_swig_go_0) {
  swss::ConsumerStateTable *arg1 = (swss::ConsumerStateTable *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::ConsumerStateTable **)&_swig_go_0; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::TableConsumable *swig_b1 = (swss::TableConsumable *)swig_b0;
  swss::RedisSelect *swig_b2 = (swss::RedisSelect *)swig_b1;
  result = (bool)(swig_b2)->hasData();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_ConsumerStateTable_hasCachedData_swsscommon_728e05b169b08794(swss::ConsumerStateTable *_swig_go_0) {
  swss::ConsumerStateTable *arg1 = (swss::ConsumerStateTable *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::ConsumerStateTable **)&_swig_go_0; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::TableConsumable *swig_b1 = (swss::TableConsumable *)swig_b0;
  swss::RedisSelect *swig_b2 = (swss::RedisSelect *)swig_b1;
  result = (bool)(swig_b2)->hasCachedData();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_ConsumerStateTable_initializedWithData_swsscommon_728e05b169b08794(swss::ConsumerStateTable *_swig_go_0) {
  swss::ConsumerStateTable *arg1 = (swss::ConsumerStateTable *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::ConsumerStateTable **)&_swig_go_0; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::TableConsumable *swig_b1 = (swss::TableConsumable *)swig_b0;
  swss::RedisSelect *swig_b2 = (swss::RedisSelect *)swig_b1;
  result = (bool)(swig_b2)->initializedWithData();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ConsumerStateTable_updateAfterRead_swsscommon_728e05b169b08794(swss::ConsumerStateTable *_swig_go_0) {
  swss::ConsumerStateTable *arg1 = (swss::ConsumerStateTable *) 0 ;
  
  arg1 = *(swss::ConsumerStateTable **)&_swig_go_0; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::TableConsumable *swig_b1 = (swss::TableConsumable *)swig_b0;
  swss::RedisSelect *swig_b2 = (swss::RedisSelect *)swig_b1;
  (swig_b2)->updateAfterRead();
  
}


void _wrap_ConsumerStateTable_subscribe_swsscommon_728e05b169b08794(swss::ConsumerStateTable *_swig_go_0, swss::DBConnector *_swig_go_1, _gostring_ _swig_go_2) {
  swss::ConsumerStateTable *arg1 = (swss::ConsumerStateTable *) 0 ;
  swss::DBConnector *arg2 = (swss::DBConnector *) 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = *(swss::ConsumerStateTable **)&_swig_go_0; 
  arg2 = *(swss::DBConnector **)&_swig_go_1; 
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::TableConsumable *swig_b1 = (swss::TableConsumable *)swig_b0;
  swss::RedisSelect *swig_b2 = (swss::RedisSelect *)swig_b1;
  (swig_b2)->subscribe(arg2,(std::string const &)*arg3);
  
}


void _wrap_ConsumerStateTable_psubscribe_swsscommon_728e05b169b08794(swss::ConsumerStateTable *_swig_go_0, swss::DBConnector *_swig_go_1, _gostring_ _swig_go_2) {
  swss::ConsumerStateTable *arg1 = (swss::ConsumerStateTable *) 0 ;
  swss::DBConnector *arg2 = (swss::DBConnector *) 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = *(swss::ConsumerStateTable **)&_swig_go_0; 
  arg2 = *(swss::DBConnector **)&_swig_go_1; 
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::TableConsumable *swig_b1 = (swss::TableConsumable *)swig_b0;
  swss::RedisSelect *swig_b2 = (swss::RedisSelect *)swig_b1;
  (swig_b2)->psubscribe(arg2,(std::string const &)*arg3);
  
}


void _wrap_ConsumerStateTable_punsubscribe_swsscommon_728e05b169b08794(swss::ConsumerStateTable *_swig_go_0, _gostring_ _swig_go_1) {
  swss::ConsumerStateTable *arg1 = (swss::ConsumerStateTable *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(swss::ConsumerStateTable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::TableConsumable *swig_b1 = (swss::TableConsumable *)swig_b0;
  swss::RedisSelect *swig_b2 = (swss::RedisSelect *)swig_b1;
  (swig_b2)->punsubscribe((std::string const &)*arg2);
  
}


void _wrap_ConsumerStateTable_setQueueLength_swsscommon_728e05b169b08794(swss::ConsumerStateTable *_swig_go_0, long long _swig_go_1) {
  swss::ConsumerStateTable *arg1 = (swss::ConsumerStateTable *) 0 ;
  long long arg2 ;
  
  arg1 = *(swss::ConsumerStateTable **)&_swig_go_0; 
  arg2 = (long long)_swig_go_1; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::TableConsumable *swig_b1 = (swss::TableConsumable *)swig_b0;
  swss::RedisSelect *swig_b2 = (swss::RedisSelect *)swig_b1;
  (swig_b2)->setQueueLength(arg2);
  
}


intgo _wrap_ConsumerStateTable_getPri_swsscommon_728e05b169b08794(swss::ConsumerStateTable *_swig_go_0) {
  swss::ConsumerStateTable *arg1 = (swss::ConsumerStateTable *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(swss::ConsumerStateTable **)&_swig_go_0; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::TableConsumable *swig_b1 = (swss::TableConsumable *)swig_b0;
  swss::RedisSelect *swig_b2 = (swss::RedisSelect *)swig_b1;
  swss::Selectable *swig_b3 = (swss::Selectable *)swig_b2;
  result = (int)((swss::Selectable const *)swig_b3)->getPri();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ConsumerStateTable_multi_swsscommon_728e05b169b08794(swss::ConsumerStateTable *_swig_go_0) {
  swss::ConsumerStateTable *arg1 = (swss::ConsumerStateTable *) 0 ;
  
  arg1 = *(swss::ConsumerStateTable **)&_swig_go_0; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::RedisTransactioner *swig_b1 = (swss::RedisTransactioner *)swig_b0;
  (swig_b1)->multi();
  
}


bool _wrap_ConsumerStateTable_exec_swsscommon_728e05b169b08794(swss::ConsumerStateTable *_swig_go_0) {
  swss::ConsumerStateTable *arg1 = (swss::ConsumerStateTable *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::ConsumerStateTable **)&_swig_go_0; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::RedisTransactioner *swig_b1 = (swss::RedisTransactioner *)swig_b0;
  result = (bool)(swig_b1)->exec();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ConsumerStateTable_enqueue__SWIG_0_swsscommon_728e05b169b08794(swss::ConsumerStateTable *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  swss::ConsumerStateTable *arg1 = (swss::ConsumerStateTable *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  arg1 = *(swss::ConsumerStateTable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (int)_swig_go_2; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::RedisTransactioner *swig_b1 = (swss::RedisTransactioner *)swig_b0;
  (swig_b1)->enqueue((std::string const &)*arg2,arg3);
  
}


void _wrap_ConsumerStateTable_enqueue__SWIG_1_swsscommon_728e05b169b08794(swss::ConsumerStateTable *_swig_go_0, swss::RedisCommand *_swig_go_1, intgo _swig_go_2) {
  swss::ConsumerStateTable *arg1 = (swss::ConsumerStateTable *) 0 ;
  swss::RedisCommand *arg2 = 0 ;
  int arg3 ;
  
  arg1 = *(swss::ConsumerStateTable **)&_swig_go_0; 
  arg2 = *(swss::RedisCommand **)&_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::RedisTransactioner *swig_b1 = (swss::RedisTransactioner *)swig_b0;
  (swig_b1)->enqueue((swss::RedisCommand const &)*arg2,arg3);
  
}


redisReply *_wrap_ConsumerStateTable_dequeueReply_swsscommon_728e05b169b08794(swss::ConsumerStateTable *_swig_go_0) {
  swss::ConsumerStateTable *arg1 = (swss::ConsumerStateTable *) 0 ;
  redisReply *result = 0 ;
  redisReply *_swig_go_result;
  
  arg1 = *(swss::ConsumerStateTable **)&_swig_go_0; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::RedisTransactioner *swig_b1 = (swss::RedisTransactioner *)swig_b0;
  result = (redisReply *)(swig_b1)->dequeueReply();
  *(redisReply **)&_swig_go_result = (redisReply *)result; 
  return _swig_go_result;
}


_gostring_ _wrap_ConsumerStateTable_getKeySetName_swsscommon_728e05b169b08794(swss::ConsumerStateTable *_swig_go_0) {
  swss::ConsumerStateTable *arg1 = (swss::ConsumerStateTable *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ConsumerStateTable **)&_swig_go_0; 
  
  swss::TableName_KeySet *swig_b0 = (swss::TableName_KeySet *)arg1;
  result = ((swss::TableName_KeySet const *)swig_b0)->getKeySetName();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_ConsumerStateTable_getDelKeySetName_swsscommon_728e05b169b08794(swss::ConsumerStateTable *_swig_go_0) {
  swss::ConsumerStateTable *arg1 = (swss::ConsumerStateTable *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ConsumerStateTable **)&_swig_go_0; 
  
  swss::TableName_KeySet *swig_b0 = (swss::TableName_KeySet *)arg1;
  result = ((swss::TableName_KeySet const *)swig_b0)->getDelKeySetName();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_ConsumerStateTable_getStateHashPrefix_swsscommon_728e05b169b08794(swss::ConsumerStateTable *_swig_go_0) {
  swss::ConsumerStateTable *arg1 = (swss::ConsumerStateTable *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::ConsumerStateTable **)&_swig_go_0; 
  
  swss::TableName_KeySet *swig_b0 = (swss::TableName_KeySet *)arg1;
  result = ((swss::TableName_KeySet const *)swig_b0)->getStateHashPrefix();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


swss::TableName_KeySet *_wrap_ConsumerStateTable_SwigGetTableName_KeySet_swsscommon_728e05b169b08794(swss::ConsumerStateTable *_swig_go_0) {
  swss::ConsumerStateTable *arg1 = (swss::ConsumerStateTable *) 0 ;
  swss::TableName_KeySet *result = 0 ;
  swss::TableName_KeySet *_swig_go_result;
  
  arg1 = *(swss::ConsumerStateTable **)&_swig_go_0; 
  
  {
    try {
      result = (swss::TableName_KeySet*)arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::TableName_KeySet **)&_swig_go_result = (swss::TableName_KeySet *)result; 
  return _swig_go_result;
}


swss::SubscriberStateTable *_wrap_new_SubscriberStateTable__SWIG_0_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, intgo _swig_go_3) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  swss::SubscriberStateTable *result = 0 ;
  swss::SubscriberStateTable *_swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (int)_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  
  {
    try {
      result = (swss::SubscriberStateTable *)new swss::SubscriberStateTable(arg1,(std::string const &)*arg2,arg3,arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::SubscriberStateTable **)&_swig_go_result = (swss::SubscriberStateTable *)result; 
  return _swig_go_result;
}


swss::SubscriberStateTable *_wrap_new_SubscriberStateTable__SWIG_1_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  swss::SubscriberStateTable *result = 0 ;
  swss::SubscriberStateTable *_swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (int)_swig_go_2; 
  
  {
    try {
      result = (swss::SubscriberStateTable *)new swss::SubscriberStateTable(arg1,(std::string const &)*arg2,arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::SubscriberStateTable **)&_swig_go_result = (swss::SubscriberStateTable *)result; 
  return _swig_go_result;
}


swss::SubscriberStateTable *_wrap_new_SubscriberStateTable__SWIG_2_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0, _gostring_ _swig_go_1) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  std::string *arg2 = 0 ;
  swss::SubscriberStateTable *result = 0 ;
  swss::SubscriberStateTable *_swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = (swss::SubscriberStateTable *)new swss::SubscriberStateTable(arg1,(std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::SubscriberStateTable **)&_swig_go_result = (swss::SubscriberStateTable *)result; 
  return _swig_go_result;
}


void _wrap_SubscriberStateTable_pops_swsscommon_728e05b169b08794(swss::SubscriberStateTable *_swig_go_0, std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_1) {
  swss::SubscriberStateTable *arg1 = (swss::SubscriberStateTable *) 0 ;
  std::deque< swss::KeyOpFieldsValuesTuple > *arg2 = 0 ;
  
  arg1 = *(swss::SubscriberStateTable **)&_swig_go_0; 
  arg2 = *(std::deque< swss::KeyOpFieldsValuesTuple > **)&_swig_go_1; 
  
  {
    try {
      (arg1)->pops(*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


long long _wrap_SubscriberStateTable_readData_swsscommon_728e05b169b08794(swss::SubscriberStateTable *_swig_go_0) {
  swss::SubscriberStateTable *arg1 = (swss::SubscriberStateTable *) 0 ;
  uint64_t result;
  long long _swig_go_result;
  
  arg1 = *(swss::SubscriberStateTable **)&_swig_go_0; 
  
  {
    try {
      result = (uint64_t)(arg1)->readData();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_SubscriberStateTable_hasData_swsscommon_728e05b169b08794(swss::SubscriberStateTable *_swig_go_0) {
  swss::SubscriberStateTable *arg1 = (swss::SubscriberStateTable *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::SubscriberStateTable **)&_swig_go_0; 
  
  {
    try {
      result = (bool)(arg1)->hasData();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_SubscriberStateTable_hasCachedData_swsscommon_728e05b169b08794(swss::SubscriberStateTable *_swig_go_0) {
  swss::SubscriberStateTable *arg1 = (swss::SubscriberStateTable *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::SubscriberStateTable **)&_swig_go_0; 
  
  {
    try {
      result = (bool)(arg1)->hasCachedData();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_SubscriberStateTable_initializedWithData_swsscommon_728e05b169b08794(swss::SubscriberStateTable *_swig_go_0) {
  swss::SubscriberStateTable *arg1 = (swss::SubscriberStateTable *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::SubscriberStateTable **)&_swig_go_0; 
  
  {
    try {
      result = (bool)(arg1)->initializedWithData();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_SubscriberStateTable_swsscommon_728e05b169b08794(swss::SubscriberStateTable *_swig_go_0) {
  swss::SubscriberStateTable *arg1 = (swss::SubscriberStateTable *) 0 ;
  
  arg1 = *(swss::SubscriberStateTable **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


intgo _wrap_GetSubscriberStateTable_POP_BATCH_SIZE_swsscommon_728e05b169b08794(swss::SubscriberStateTable *_swig_go_0) {
  swss::SubscriberStateTable *arg1 = (swss::SubscriberStateTable *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(swss::SubscriberStateTable **)&_swig_go_0; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  result = (int)(int) ((swig_b0)->POP_BATCH_SIZE);
  _swig_go_result = result; 
  return _swig_go_result;
}


swss::DBConnector *_wrap_SubscriberStateTable_getDbConnector_swsscommon_728e05b169b08794(swss::SubscriberStateTable *_swig_go_0) {
  swss::SubscriberStateTable *arg1 = (swss::SubscriberStateTable *) 0 ;
  swss::DBConnector *result = 0 ;
  swss::DBConnector *_swig_go_result;
  
  arg1 = *(swss::SubscriberStateTable **)&_swig_go_0; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  result = (swss::DBConnector *)((swss::ConsumerTableBase const *)swig_b0)->getDbConnector();
  *(swss::DBConnector **)&_swig_go_result = (swss::DBConnector *)result; 
  return _swig_go_result;
}


void _wrap_SubscriberStateTable_pop__SWIG_0_swsscommon_728e05b169b08794(swss::SubscriberStateTable *_swig_go_0, std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > *_swig_go_1, _gostring_ _swig_go_2) {
  swss::SubscriberStateTable *arg1 = (swss::SubscriberStateTable *) 0 ;
  swss::KeyOpFieldsValuesTuple *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = *(swss::SubscriberStateTable **)&_swig_go_0; 
  arg2 = *(swss::KeyOpFieldsValuesTuple **)&_swig_go_1; 
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  (swig_b0)->pop(*arg2,(std::string const &)*arg3);
  
}


void _wrap_SubscriberStateTable_pop__SWIG_1_swsscommon_728e05b169b08794(swss::SubscriberStateTable *_swig_go_0, std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > *_swig_go_1) {
  swss::SubscriberStateTable *arg1 = (swss::SubscriberStateTable *) 0 ;
  swss::KeyOpFieldsValuesTuple *arg2 = 0 ;
  
  arg1 = *(swss::SubscriberStateTable **)&_swig_go_0; 
  arg2 = *(swss::KeyOpFieldsValuesTuple **)&_swig_go_1; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  (swig_b0)->pop(*arg2);
  
}


void _wrap_SubscriberStateTable_pop__SWIG_2_swsscommon_728e05b169b08794(swss::SubscriberStateTable *_swig_go_0, std::string *_swig_go_1, std::string *_swig_go_2, std::vector< std::pair< std::string,std::string > > *_swig_go_3, _gostring_ _swig_go_4) {
  swss::SubscriberStateTable *arg1 = (swss::SubscriberStateTable *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::vector< swss::FieldValueTuple > *arg4 = 0 ;
  std::string *arg5 = 0 ;
  
  arg1 = *(swss::SubscriberStateTable **)&_swig_go_0; 
  arg2 = *(std::string **)&_swig_go_1; 
  arg3 = *(std::string **)&_swig_go_2; 
  arg4 = *(std::vector< swss::FieldValueTuple > **)&_swig_go_3; 
  
  std::string arg5_str(_swig_go_4.p, _swig_go_4.n);
  arg5 = &arg5_str;
  
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  (swig_b0)->pop(*arg2,*arg3,*arg4,(std::string const &)*arg5);
  
}


void _wrap_SubscriberStateTable_pop__SWIG_3_swsscommon_728e05b169b08794(swss::SubscriberStateTable *_swig_go_0, std::string *_swig_go_1, std::string *_swig_go_2, std::vector< std::pair< std::string,std::string > > *_swig_go_3) {
  swss::SubscriberStateTable *arg1 = (swss::SubscriberStateTable *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::vector< swss::FieldValueTuple > *arg4 = 0 ;
  
  arg1 = *(swss::SubscriberStateTable **)&_swig_go_0; 
  arg2 = *(std::string **)&_swig_go_1; 
  arg3 = *(std::string **)&_swig_go_2; 
  arg4 = *(std::vector< swss::FieldValueTuple > **)&_swig_go_3; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  (swig_b0)->pop(*arg2,*arg3,*arg4);
  
}


bool _wrap_SubscriberStateTable_empty_swsscommon_728e05b169b08794(swss::SubscriberStateTable *_swig_go_0) {
  swss::SubscriberStateTable *arg1 = (swss::SubscriberStateTable *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::SubscriberStateTable **)&_swig_go_0; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  result = (bool)((swss::ConsumerTableBase const *)swig_b0)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_SubscriberStateTable_getTableSeparator_swsscommon_728e05b169b08794(intgo _swig_go_0) {
  int arg1 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  {
    try {
      result = swss::TableBase::getTableSeparator(arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_SubscriberStateTable_getTableName_swsscommon_728e05b169b08794(swss::SubscriberStateTable *_swig_go_0) {
  swss::SubscriberStateTable *arg1 = (swss::SubscriberStateTable *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::SubscriberStateTable **)&_swig_go_0; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::TableConsumable *swig_b1 = (swss::TableConsumable *)swig_b0;
  swss::TableBase *swig_b2 = (swss::TableBase *)swig_b1;
  result = ((swss::TableBase const *)swig_b2)->getTableName();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_SubscriberStateTable_getKeyName_swsscommon_728e05b169b08794(swss::SubscriberStateTable *_swig_go_0, _gostring_ _swig_go_1) {
  swss::SubscriberStateTable *arg1 = (swss::SubscriberStateTable *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::SubscriberStateTable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::TableConsumable *swig_b1 = (swss::TableConsumable *)swig_b0;
  swss::TableBase *swig_b2 = (swss::TableBase *)swig_b1;
  result = (swig_b2)->getKeyName((std::string const &)*arg2);
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_SubscriberStateTable_getTableNameSeparator_swsscommon_728e05b169b08794(swss::SubscriberStateTable *_swig_go_0) {
  swss::SubscriberStateTable *arg1 = (swss::SubscriberStateTable *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::SubscriberStateTable **)&_swig_go_0; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::TableConsumable *swig_b1 = (swss::TableConsumable *)swig_b0;
  swss::TableBase *swig_b2 = (swss::TableBase *)swig_b1;
  result = ((swss::TableBase const *)swig_b2)->getTableNameSeparator();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_SubscriberStateTable_getChannelName__SWIG_0_swsscommon_728e05b169b08794(swss::SubscriberStateTable *_swig_go_0) {
  swss::SubscriberStateTable *arg1 = (swss::SubscriberStateTable *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::SubscriberStateTable **)&_swig_go_0; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::TableConsumable *swig_b1 = (swss::TableConsumable *)swig_b0;
  swss::TableBase *swig_b2 = (swss::TableBase *)swig_b1;
  result = (swig_b2)->getChannelName();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_SubscriberStateTable_getChannelName__SWIG_1_swsscommon_728e05b169b08794(swss::SubscriberStateTable *_swig_go_0, _gostring_ _swig_go_1) {
  swss::SubscriberStateTable *arg1 = (swss::SubscriberStateTable *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::SubscriberStateTable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::TableConsumable *swig_b1 = (swss::TableConsumable *)swig_b0;
  swss::TableBase *swig_b2 = (swss::TableBase *)swig_b1;
  result = (swig_b2)->getChannelName((std::string const &)*arg2);
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_SubscriberStateTable_getChannelName__SWIG_2_swsscommon_728e05b169b08794(swss::SubscriberStateTable *_swig_go_0, intgo _swig_go_1) {
  swss::SubscriberStateTable *arg1 = (swss::SubscriberStateTable *) 0 ;
  int arg2 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::SubscriberStateTable **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::TableConsumable *swig_b1 = (swss::TableConsumable *)swig_b0;
  swss::TableBase *swig_b2 = (swss::TableBase *)swig_b1;
  result = (swig_b2)->getChannelName(arg2);
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


intgo _wrap_SubscriberStateTable_getFd_swsscommon_728e05b169b08794(swss::SubscriberStateTable *_swig_go_0) {
  swss::SubscriberStateTable *arg1 = (swss::SubscriberStateTable *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(swss::SubscriberStateTable **)&_swig_go_0; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::TableConsumable *swig_b1 = (swss::TableConsumable *)swig_b0;
  swss::RedisSelect *swig_b2 = (swss::RedisSelect *)swig_b1;
  result = (int)(swig_b2)->getFd();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SubscriberStateTable_updateAfterRead_swsscommon_728e05b169b08794(swss::SubscriberStateTable *_swig_go_0) {
  swss::SubscriberStateTable *arg1 = (swss::SubscriberStateTable *) 0 ;
  
  arg1 = *(swss::SubscriberStateTable **)&_swig_go_0; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::TableConsumable *swig_b1 = (swss::TableConsumable *)swig_b0;
  swss::RedisSelect *swig_b2 = (swss::RedisSelect *)swig_b1;
  (swig_b2)->updateAfterRead();
  
}


void _wrap_SubscriberStateTable_subscribe_swsscommon_728e05b169b08794(swss::SubscriberStateTable *_swig_go_0, swss::DBConnector *_swig_go_1, _gostring_ _swig_go_2) {
  swss::SubscriberStateTable *arg1 = (swss::SubscriberStateTable *) 0 ;
  swss::DBConnector *arg2 = (swss::DBConnector *) 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = *(swss::SubscriberStateTable **)&_swig_go_0; 
  arg2 = *(swss::DBConnector **)&_swig_go_1; 
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::TableConsumable *swig_b1 = (swss::TableConsumable *)swig_b0;
  swss::RedisSelect *swig_b2 = (swss::RedisSelect *)swig_b1;
  (swig_b2)->subscribe(arg2,(std::string const &)*arg3);
  
}


void _wrap_SubscriberStateTable_psubscribe_swsscommon_728e05b169b08794(swss::SubscriberStateTable *_swig_go_0, swss::DBConnector *_swig_go_1, _gostring_ _swig_go_2) {
  swss::SubscriberStateTable *arg1 = (swss::SubscriberStateTable *) 0 ;
  swss::DBConnector *arg2 = (swss::DBConnector *) 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = *(swss::SubscriberStateTable **)&_swig_go_0; 
  arg2 = *(swss::DBConnector **)&_swig_go_1; 
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::TableConsumable *swig_b1 = (swss::TableConsumable *)swig_b0;
  swss::RedisSelect *swig_b2 = (swss::RedisSelect *)swig_b1;
  (swig_b2)->psubscribe(arg2,(std::string const &)*arg3);
  
}


void _wrap_SubscriberStateTable_punsubscribe_swsscommon_728e05b169b08794(swss::SubscriberStateTable *_swig_go_0, _gostring_ _swig_go_1) {
  swss::SubscriberStateTable *arg1 = (swss::SubscriberStateTable *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(swss::SubscriberStateTable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::TableConsumable *swig_b1 = (swss::TableConsumable *)swig_b0;
  swss::RedisSelect *swig_b2 = (swss::RedisSelect *)swig_b1;
  (swig_b2)->punsubscribe((std::string const &)*arg2);
  
}


void _wrap_SubscriberStateTable_setQueueLength_swsscommon_728e05b169b08794(swss::SubscriberStateTable *_swig_go_0, long long _swig_go_1) {
  swss::SubscriberStateTable *arg1 = (swss::SubscriberStateTable *) 0 ;
  long long arg2 ;
  
  arg1 = *(swss::SubscriberStateTable **)&_swig_go_0; 
  arg2 = (long long)_swig_go_1; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::TableConsumable *swig_b1 = (swss::TableConsumable *)swig_b0;
  swss::RedisSelect *swig_b2 = (swss::RedisSelect *)swig_b1;
  (swig_b2)->setQueueLength(arg2);
  
}


intgo _wrap_SubscriberStateTable_getPri_swsscommon_728e05b169b08794(swss::SubscriberStateTable *_swig_go_0) {
  swss::SubscriberStateTable *arg1 = (swss::SubscriberStateTable *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(swss::SubscriberStateTable **)&_swig_go_0; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::TableConsumable *swig_b1 = (swss::TableConsumable *)swig_b0;
  swss::RedisSelect *swig_b2 = (swss::RedisSelect *)swig_b1;
  swss::Selectable *swig_b3 = (swss::Selectable *)swig_b2;
  result = (int)((swss::Selectable const *)swig_b3)->getPri();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SubscriberStateTable_multi_swsscommon_728e05b169b08794(swss::SubscriberStateTable *_swig_go_0) {
  swss::SubscriberStateTable *arg1 = (swss::SubscriberStateTable *) 0 ;
  
  arg1 = *(swss::SubscriberStateTable **)&_swig_go_0; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::RedisTransactioner *swig_b1 = (swss::RedisTransactioner *)swig_b0;
  (swig_b1)->multi();
  
}


bool _wrap_SubscriberStateTable_exec_swsscommon_728e05b169b08794(swss::SubscriberStateTable *_swig_go_0) {
  swss::SubscriberStateTable *arg1 = (swss::SubscriberStateTable *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::SubscriberStateTable **)&_swig_go_0; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::RedisTransactioner *swig_b1 = (swss::RedisTransactioner *)swig_b0;
  result = (bool)(swig_b1)->exec();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SubscriberStateTable_enqueue__SWIG_0_swsscommon_728e05b169b08794(swss::SubscriberStateTable *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  swss::SubscriberStateTable *arg1 = (swss::SubscriberStateTable *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  arg1 = *(swss::SubscriberStateTable **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (int)_swig_go_2; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::RedisTransactioner *swig_b1 = (swss::RedisTransactioner *)swig_b0;
  (swig_b1)->enqueue((std::string const &)*arg2,arg3);
  
}


void _wrap_SubscriberStateTable_enqueue__SWIG_1_swsscommon_728e05b169b08794(swss::SubscriberStateTable *_swig_go_0, swss::RedisCommand *_swig_go_1, intgo _swig_go_2) {
  swss::SubscriberStateTable *arg1 = (swss::SubscriberStateTable *) 0 ;
  swss::RedisCommand *arg2 = 0 ;
  int arg3 ;
  
  arg1 = *(swss::SubscriberStateTable **)&_swig_go_0; 
  arg2 = *(swss::RedisCommand **)&_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::RedisTransactioner *swig_b1 = (swss::RedisTransactioner *)swig_b0;
  (swig_b1)->enqueue((swss::RedisCommand const &)*arg2,arg3);
  
}


redisReply *_wrap_SubscriberStateTable_dequeueReply_swsscommon_728e05b169b08794(swss::SubscriberStateTable *_swig_go_0) {
  swss::SubscriberStateTable *arg1 = (swss::SubscriberStateTable *) 0 ;
  redisReply *result = 0 ;
  redisReply *_swig_go_result;
  
  arg1 = *(swss::SubscriberStateTable **)&_swig_go_0; 
  
  swss::ConsumerTableBase *swig_b0 = (swss::ConsumerTableBase *)arg1;
  swss::RedisTransactioner *swig_b1 = (swss::RedisTransactioner *)swig_b0;
  result = (redisReply *)(swig_b1)->dequeueReply();
  *(redisReply **)&_swig_go_result = (redisReply *)result; 
  return _swig_go_result;
}


long long _wrap_DEFAULT_NC_POP_BATCH_SIZE_get_swsscommon_728e05b169b08794() {
  size_t result;
  long long _swig_go_result;
  
  
  result = swss::DEFAULT_NC_POP_BATCH_SIZE;
  _swig_go_result = result; 
  return _swig_go_result;
}


swss::NotificationConsumer *_wrap_new_NotificationConsumer__SWIG_0_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, long long _swig_go_3) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  size_t arg4 ;
  swss::NotificationConsumer *result = 0 ;
  swss::NotificationConsumer *_swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (int)_swig_go_2; 
  arg4 = (size_t)_swig_go_3; 
  
  {
    try {
      result = (swss::NotificationConsumer *)new swss::NotificationConsumer(arg1,(std::string const &)*arg2,arg3,arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::NotificationConsumer **)&_swig_go_result = (swss::NotificationConsumer *)result; 
  return _swig_go_result;
}


swss::NotificationConsumer *_wrap_new_NotificationConsumer__SWIG_1_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  swss::NotificationConsumer *result = 0 ;
  swss::NotificationConsumer *_swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (int)_swig_go_2; 
  
  {
    try {
      result = (swss::NotificationConsumer *)new swss::NotificationConsumer(arg1,(std::string const &)*arg2,arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::NotificationConsumer **)&_swig_go_result = (swss::NotificationConsumer *)result; 
  return _swig_go_result;
}


swss::NotificationConsumer *_wrap_new_NotificationConsumer__SWIG_2_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0, _gostring_ _swig_go_1) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  std::string *arg2 = 0 ;
  swss::NotificationConsumer *result = 0 ;
  swss::NotificationConsumer *_swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = (swss::NotificationConsumer *)new swss::NotificationConsumer(arg1,(std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::NotificationConsumer **)&_swig_go_result = (swss::NotificationConsumer *)result; 
  return _swig_go_result;
}


void _wrap_NotificationConsumer_pop_swsscommon_728e05b169b08794(swss::NotificationConsumer *_swig_go_0, std::string *_swig_go_1, std::string *_swig_go_2, std::vector< std::pair< std::string,std::string > > *_swig_go_3) {
  swss::NotificationConsumer *arg1 = (swss::NotificationConsumer *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::vector< swss::FieldValueTuple > *arg4 = 0 ;
  
  arg1 = *(swss::NotificationConsumer **)&_swig_go_0; 
  arg2 = *(std::string **)&_swig_go_1; 
  arg3 = *(std::string **)&_swig_go_2; 
  arg4 = *(std::vector< swss::FieldValueTuple > **)&_swig_go_3; 
  
  {
    try {
      (arg1)->pop(*arg2,*arg3,*arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_NotificationConsumer_pops_swsscommon_728e05b169b08794(swss::NotificationConsumer *_swig_go_0, std::deque< std::tuple< std::string,std::string,std::vector< std::pair< std::string,std::string > > > > *_swig_go_1) {
  swss::NotificationConsumer *arg1 = (swss::NotificationConsumer *) 0 ;
  std::deque< swss::KeyOpFieldsValuesTuple > *arg2 = 0 ;
  
  arg1 = *(swss::NotificationConsumer **)&_swig_go_0; 
  arg2 = *(std::deque< swss::KeyOpFieldsValuesTuple > **)&_swig_go_1; 
  
  {
    try {
      (arg1)->pops(*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


intgo _wrap_NotificationConsumer_peek_swsscommon_728e05b169b08794(swss::NotificationConsumer *_swig_go_0) {
  swss::NotificationConsumer *arg1 = (swss::NotificationConsumer *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(swss::NotificationConsumer **)&_swig_go_0; 
  
  {
    try {
      result = (int)(arg1)->peek();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_NotificationConsumer_swsscommon_728e05b169b08794(swss::NotificationConsumer *_swig_go_0) {
  swss::NotificationConsumer *arg1 = (swss::NotificationConsumer *) 0 ;
  
  arg1 = *(swss::NotificationConsumer **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


intgo _wrap_NotificationConsumer_getFd_swsscommon_728e05b169b08794(swss::NotificationConsumer *_swig_go_0) {
  swss::NotificationConsumer *arg1 = (swss::NotificationConsumer *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(swss::NotificationConsumer **)&_swig_go_0; 
  
  {
    try {
      result = (int)(arg1)->getFd();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_NotificationConsumer_readData_swsscommon_728e05b169b08794(swss::NotificationConsumer *_swig_go_0) {
  swss::NotificationConsumer *arg1 = (swss::NotificationConsumer *) 0 ;
  uint64_t result;
  long long _swig_go_result;
  
  arg1 = *(swss::NotificationConsumer **)&_swig_go_0; 
  
  {
    try {
      result = (uint64_t)(arg1)->readData();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_NotificationConsumer_hasData_swsscommon_728e05b169b08794(swss::NotificationConsumer *_swig_go_0) {
  swss::NotificationConsumer *arg1 = (swss::NotificationConsumer *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::NotificationConsumer **)&_swig_go_0; 
  
  {
    try {
      result = (bool)(arg1)->hasData();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_NotificationConsumer_hasCachedData_swsscommon_728e05b169b08794(swss::NotificationConsumer *_swig_go_0) {
  swss::NotificationConsumer *arg1 = (swss::NotificationConsumer *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::NotificationConsumer **)&_swig_go_0; 
  
  {
    try {
      result = (bool)(arg1)->hasCachedData();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_NotificationConsumer_POP_BATCH_SIZE_get_swsscommon_728e05b169b08794(swss::NotificationConsumer *_swig_go_0) {
  swss::NotificationConsumer *arg1 = (swss::NotificationConsumer *) 0 ;
  size_t result;
  long long _swig_go_result;
  
  arg1 = *(swss::NotificationConsumer **)&_swig_go_0; 
  
  result = (size_t) ((arg1)->POP_BATCH_SIZE);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_NotificationConsumer_initializedWithData_swsscommon_728e05b169b08794(swss::NotificationConsumer *_swig_go_0) {
  swss::NotificationConsumer *arg1 = (swss::NotificationConsumer *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::NotificationConsumer **)&_swig_go_0; 
  
  swss::Selectable *swig_b0 = (swss::Selectable *)arg1;
  result = (bool)(swig_b0)->initializedWithData();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_NotificationConsumer_updateAfterRead_swsscommon_728e05b169b08794(swss::NotificationConsumer *_swig_go_0) {
  swss::NotificationConsumer *arg1 = (swss::NotificationConsumer *) 0 ;
  
  arg1 = *(swss::NotificationConsumer **)&_swig_go_0; 
  
  swss::Selectable *swig_b0 = (swss::Selectable *)arg1;
  (swig_b0)->updateAfterRead();
  
}


intgo _wrap_NotificationConsumer_getPri_swsscommon_728e05b169b08794(swss::NotificationConsumer *_swig_go_0) {
  swss::NotificationConsumer *arg1 = (swss::NotificationConsumer *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(swss::NotificationConsumer **)&_swig_go_0; 
  
  swss::Selectable *swig_b0 = (swss::Selectable *)arg1;
  result = (int)((swss::Selectable const *)swig_b0)->getPri();
  _swig_go_result = result; 
  return _swig_go_result;
}


swss::NotificationProducer *_wrap_new_NotificationProducer__SWIG_0_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0, _gostring_ _swig_go_1) {
  swss::DBConnector *arg1 = (swss::DBConnector *) 0 ;
  std::string *arg2 = 0 ;
  swss::NotificationProducer *result = 0 ;
  swss::NotificationProducer *_swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = (swss::NotificationProducer *)new swss::NotificationProducer(arg1,(std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::NotificationProducer **)&_swig_go_result = (swss::NotificationProducer *)result; 
  return _swig_go_result;
}


swss::NotificationProducer *_wrap_new_NotificationProducer__SWIG_1_swsscommon_728e05b169b08794(swss::RedisPipeline *_swig_go_0, _gostring_ _swig_go_1, bool _swig_go_2) {
  swss::RedisPipeline *arg1 = (swss::RedisPipeline *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  swss::NotificationProducer *result = 0 ;
  swss::NotificationProducer *_swig_go_result;
  
  arg1 = *(swss::RedisPipeline **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (bool)_swig_go_2; 
  
  {
    try {
      result = (swss::NotificationProducer *)new swss::NotificationProducer(arg1,(std::string const &)*arg2,arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::NotificationProducer **)&_swig_go_result = (swss::NotificationProducer *)result; 
  return _swig_go_result;
}


swss::NotificationProducer *_wrap_new_NotificationProducer__SWIG_2_swsscommon_728e05b169b08794(swss::RedisPipeline *_swig_go_0, _gostring_ _swig_go_1) {
  swss::RedisPipeline *arg1 = (swss::RedisPipeline *) 0 ;
  std::string *arg2 = 0 ;
  swss::NotificationProducer *result = 0 ;
  swss::NotificationProducer *_swig_go_result;
  
  arg1 = *(swss::RedisPipeline **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = (swss::NotificationProducer *)new swss::NotificationProducer(arg1,(std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::NotificationProducer **)&_swig_go_result = (swss::NotificationProducer *)result; 
  return _swig_go_result;
}


long long _wrap_NotificationProducer_send_swsscommon_728e05b169b08794(swss::NotificationProducer *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, std::vector< std::pair< std::string,std::string > > *_swig_go_3) {
  swss::NotificationProducer *arg1 = (swss::NotificationProducer *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::vector< swss::FieldValueTuple > *arg4 = 0 ;
  int64_t result;
  long long _swig_go_result;
  
  arg1 = *(swss::NotificationProducer **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  arg4 = *(std::vector< swss::FieldValueTuple > **)&_swig_go_3; 
  
  {
    try {
      result = (int64_t)(arg1)->send((std::string const &)*arg2,(std::string const &)*arg3,*arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_NotificationProducer_swsscommon_728e05b169b08794(swss::NotificationProducer *_swig_go_0) {
  swss::NotificationProducer *arg1 = (swss::NotificationProducer *) 0 ;
  
  arg1 = *(swss::NotificationProducer **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


intgo _wrap_INITIALIZED_WarmStart_swsscommon_728e05b169b08794() {
  swss::WarmStart::WarmStartState result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = swss::WarmStart::INITIALIZED;
      
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_RESTORED_WarmStart_swsscommon_728e05b169b08794() {
  swss::WarmStart::WarmStartState result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = swss::WarmStart::RESTORED;
      
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_REPLAYED_WarmStart_swsscommon_728e05b169b08794() {
  swss::WarmStart::WarmStartState result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = swss::WarmStart::REPLAYED;
      
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_RECONCILED_WarmStart_swsscommon_728e05b169b08794() {
  swss::WarmStart::WarmStartState result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = swss::WarmStart::RECONCILED;
      
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_WSDISABLED_WarmStart_swsscommon_728e05b169b08794() {
  swss::WarmStart::WarmStartState result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = swss::WarmStart::WSDISABLED;
      
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_WSUNKNOWN_WarmStart_swsscommon_728e05b169b08794() {
  swss::WarmStart::WarmStartState result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = swss::WarmStart::WSUNKNOWN;
      
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_CHECK_IGNORED_WarmStart_swsscommon_728e05b169b08794() {
  swss::WarmStart::DataCheckState result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = swss::WarmStart::CHECK_IGNORED;
      
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_CHECK_PASSED_WarmStart_swsscommon_728e05b169b08794() {
  swss::WarmStart::DataCheckState result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = swss::WarmStart::CHECK_PASSED;
      
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_CHECK_FAILED_WarmStart_swsscommon_728e05b169b08794() {
  swss::WarmStart::DataCheckState result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = swss::WarmStart::CHECK_FAILED;
      
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_STAGE_SHUTDOWN_WarmStart_swsscommon_728e05b169b08794() {
  swss::WarmStart::DataCheckStage result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = swss::WarmStart::STAGE_SHUTDOWN;
      
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_STAGE_RESTORE_WarmStart_swsscommon_728e05b169b08794() {
  swss::WarmStart::DataCheckStage result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = swss::WarmStart::STAGE_RESTORE;
      
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


std::map< enum swss::WarmStart::WarmStartState,std::string,std::less< enum swss::WarmStart::WarmStartState > > *_wrap_WarmStart_warmStartStateNameMap_get_swsscommon_728e05b169b08794() {
  swss::WarmStart::WarmStartStateNameMap *result = 0 ;
  std::map< enum swss::WarmStart::WarmStartState,std::string,std::less< enum swss::WarmStart::WarmStartState > > *_swig_go_result;
  
  
  result = (swss::WarmStart::WarmStartStateNameMap *)&swss::WarmStart::warmStartStateNameMap;
  *(swss::WarmStart::WarmStartStateNameMap **)&_swig_go_result = (swss::WarmStart::WarmStartStateNameMap *)result; 
  return _swig_go_result;
}


std::map< enum swss::WarmStart::DataCheckState,std::string,std::less< enum swss::WarmStart::DataCheckState > > *_wrap_WarmStart_dataCheckStateNameMap_get_swsscommon_728e05b169b08794() {
  swss::WarmStart::DataCheckStateNameMap *result = 0 ;
  std::map< enum swss::WarmStart::DataCheckState,std::string,std::less< enum swss::WarmStart::DataCheckState > > *_swig_go_result;
  
  
  result = (swss::WarmStart::DataCheckStateNameMap *)&swss::WarmStart::dataCheckStateNameMap;
  *(swss::WarmStart::DataCheckStateNameMap **)&_swig_go_result = (swss::WarmStart::DataCheckStateNameMap *)result; 
  return _swig_go_result;
}


swss::WarmStart *_wrap_WarmStart_getInstance_swsscommon_728e05b169b08794() {
  swss::WarmStart *result = 0 ;
  swss::WarmStart *_swig_go_result;
  
  
  {
    try {
      result = (swss::WarmStart *) &swss::WarmStart::getInstance();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::WarmStart **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_WarmStart_initialize__SWIG_0_swsscommon_728e05b169b08794(_gostring_ _swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, bool _swig_go_3) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  unsigned int arg3 ;
  bool arg4 ;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (unsigned int)_swig_go_2; 
  arg4 = (bool)_swig_go_3; 
  
  {
    try {
      swss::WarmStart::initialize((std::string const &)*arg1,(std::string const &)*arg2,arg3,arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_WarmStart_initialize__SWIG_1_swsscommon_728e05b169b08794(_gostring_ _swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  unsigned int arg3 ;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (unsigned int)_swig_go_2; 
  
  {
    try {
      swss::WarmStart::initialize((std::string const &)*arg1,(std::string const &)*arg2,arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_WarmStart_initialize__SWIG_2_swsscommon_728e05b169b08794(_gostring_ _swig_go_0, _gostring_ _swig_go_1) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      swss::WarmStart::initialize((std::string const &)*arg1,(std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


bool _wrap_WarmStart_checkWarmStart__SWIG_0_swsscommon_728e05b169b08794(_gostring_ _swig_go_0, _gostring_ _swig_go_1, bool _swig_go_2) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  bool result;
  bool _swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (bool)_swig_go_2; 
  
  {
    try {
      result = (bool)swss::WarmStart::checkWarmStart((std::string const &)*arg1,(std::string const &)*arg2,arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_WarmStart_checkWarmStart__SWIG_1_swsscommon_728e05b169b08794(_gostring_ _swig_go_0, _gostring_ _swig_go_1) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  bool _swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = (bool)swss::WarmStart::checkWarmStart((std::string const &)*arg1,(std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_WarmStart_isWarmStart_swsscommon_728e05b169b08794() {
  bool result;
  bool _swig_go_result;
  
  
  {
    try {
      result = (bool)swss::WarmStart::isWarmStart();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_WarmStart_isSystemWarmRebootEnabled_swsscommon_728e05b169b08794() {
  bool result;
  bool _swig_go_result;
  
  
  {
    try {
      result = (bool)swss::WarmStart::isSystemWarmRebootEnabled();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_WarmStart_getWarmStartState_swsscommon_728e05b169b08794(_gostring_ _swig_go_0, swss::WarmStart::WarmStartState *_swig_go_1) {
  std::string *arg1 = 0 ;
  swss::WarmStart::WarmStartState *arg2 = 0 ;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  arg2 = *(swss::WarmStart::WarmStartState **)&_swig_go_1; 
  
  {
    try {
      swss::WarmStart::getWarmStartState((std::string const &)*arg1,*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_WarmStart_setWarmStartState_swsscommon_728e05b169b08794(_gostring_ _swig_go_0, intgo _swig_go_1) {
  std::string *arg1 = 0 ;
  swss::WarmStart::WarmStartState arg2 ;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  arg2 = (swss::WarmStart::WarmStartState)_swig_go_1; 
  
  {
    try {
      swss::WarmStart::setWarmStartState((std::string const &)*arg1,arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


intgo _wrap_WarmStart_getWarmStartTimer_swsscommon_728e05b169b08794(_gostring_ _swig_go_0, _gostring_ _swig_go_1) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = (uint32_t)swss::WarmStart::getWarmStartTimer((std::string const &)*arg1,(std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_WarmStart_setDataCheckState_swsscommon_728e05b169b08794(_gostring_ _swig_go_0, intgo _swig_go_1, intgo _swig_go_2) {
  std::string *arg1 = 0 ;
  swss::WarmStart::DataCheckStage arg2 ;
  swss::WarmStart::DataCheckState arg3 ;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  arg2 = (swss::WarmStart::DataCheckStage)_swig_go_1; 
  arg3 = (swss::WarmStart::DataCheckState)_swig_go_2; 
  
  {
    try {
      swss::WarmStart::setDataCheckState((std::string const &)*arg1,arg2,arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


intgo _wrap_WarmStart_getDataCheckState_swsscommon_728e05b169b08794(_gostring_ _swig_go_0, intgo _swig_go_1) {
  std::string *arg1 = 0 ;
  swss::WarmStart::DataCheckStage arg2 ;
  swss::WarmStart::DataCheckState result;
  intgo _swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  arg2 = (swss::WarmStart::DataCheckStage)_swig_go_1; 
  
  {
    try {
      result = (swss::WarmStart::DataCheckState)swss::WarmStart::getDataCheckState((std::string const &)*arg1,arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


swss::WarmStart *_wrap_new_WarmStart_swsscommon_728e05b169b08794() {
  swss::WarmStart *result = 0 ;
  swss::WarmStart *_swig_go_result;
  
  
  {
    try {
      result = (swss::WarmStart *)new swss::WarmStart();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::WarmStart **)&_swig_go_result = (swss::WarmStart *)result; 
  return _swig_go_result;
}


void _wrap_delete_WarmStart_swsscommon_728e05b169b08794(swss::WarmStart *_swig_go_0) {
  swss::WarmStart *arg1 = (swss::WarmStart *) 0 ;
  
  arg1 = *(swss::WarmStart **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


swss::UnavailableDataError *_wrap_new_UnavailableDataError_swsscommon_728e05b169b08794(_gostring_ _swig_go_0, _gostring_ _swig_go_1) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  swss::UnavailableDataError *result = 0 ;
  swss::UnavailableDataError *_swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = (swss::UnavailableDataError *)new swss::UnavailableDataError((std::string const &)*arg1,(std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::UnavailableDataError **)&_swig_go_result = (swss::UnavailableDataError *)result; 
  return _swig_go_result;
}


_gostring_ _wrap_UnavailableDataError_getData_swsscommon_728e05b169b08794(swss::UnavailableDataError *_swig_go_0) {
  swss::UnavailableDataError *arg1 = (swss::UnavailableDataError *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::UnavailableDataError **)&_swig_go_0; 
  
  {
    try {
      result = (char *)((swss::UnavailableDataError const *)arg1)->getData();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


void _wrap_delete_UnavailableDataError_swsscommon_728e05b169b08794(swss::UnavailableDataError *_swig_go_0) {
  swss::UnavailableDataError *arg1 = (swss::UnavailableDataError *) 0 ;
  
  arg1 = *(swss::UnavailableDataError **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_DBInterface_connect__SWIG_0_swsscommon_728e05b169b08794(swss::DBInterface *_swig_go_0, intgo _swig_go_1, _gostring_ _swig_go_2, bool _swig_go_3) {
  swss::DBInterface *arg1 = (swss::DBInterface *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  
  arg1 = *(swss::DBInterface **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  arg4 = (bool)_swig_go_3; 
  
  {
    try {
      (arg1)->connect(arg2,(std::string const &)*arg3,arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_DBInterface_connect__SWIG_1_swsscommon_728e05b169b08794(swss::DBInterface *_swig_go_0, intgo _swig_go_1, _gostring_ _swig_go_2) {
  swss::DBInterface *arg1 = (swss::DBInterface *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = *(swss::DBInterface **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      (arg1)->connect(arg2,(std::string const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_DBInterface_close__SWIG_0_swsscommon_728e05b169b08794(swss::DBInterface *_swig_go_0, _gostring_ _swig_go_1) {
  swss::DBInterface *arg1 = (swss::DBInterface *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(swss::DBInterface **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      (arg1)->close((std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_DBInterface_close__SWIG_1_swsscommon_728e05b169b08794(swss::DBInterface *_swig_go_0) {
  swss::DBInterface *arg1 = (swss::DBInterface *) 0 ;
  
  arg1 = *(swss::DBInterface **)&_swig_go_0; 
  
  {
    try {
      (arg1)->close();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


long long _wrap_DBInterface_delete__SWIG_0_swsscommon_728e05b169b08794(swss::DBInterface *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, bool _swig_go_3) {
  swss::DBInterface *arg1 = (swss::DBInterface *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  int64_t result;
  long long _swig_go_result;
  
  arg1 = *(swss::DBInterface **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  arg4 = (bool)_swig_go_3; 
  
  {
    try {
      result = (int64_t)(arg1)->del((std::string const &)*arg2,(std::string const &)*arg3,arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_DBInterface_delete__SWIG_1_swsscommon_728e05b169b08794(swss::DBInterface *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  swss::DBInterface *arg1 = (swss::DBInterface *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int64_t result;
  long long _swig_go_result;
  
  arg1 = *(swss::DBInterface **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      result = (int64_t)(arg1)->del((std::string const &)*arg2,(std::string const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_DBInterface_delete_all_by_pattern_swsscommon_728e05b169b08794(swss::DBInterface *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  swss::DBInterface *arg1 = (swss::DBInterface *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = *(swss::DBInterface **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      (arg1)->delete_all_by_pattern((std::string const &)*arg2,(std::string const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


bool _wrap_DBInterface_exists_swsscommon_728e05b169b08794(swss::DBInterface *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  swss::DBInterface *arg1 = (swss::DBInterface *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::DBInterface **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      result = (bool)(arg1)->exists((std::string const &)*arg2,(std::string const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


std::shared_ptr< std::string > *_wrap_DBInterface_get__SWIG_0_swsscommon_728e05b169b08794(swss::DBInterface *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3, bool _swig_go_4) {
  swss::DBInterface *arg1 = (swss::DBInterface *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool arg5 ;
  SwigValueWrapper< std::shared_ptr< std::string > > result;
  std::shared_ptr< std::string > *_swig_go_result;
  
  arg1 = *(swss::DBInterface **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  arg5 = (bool)_swig_go_4; 
  
  {
    try {
      result = (arg1)->get((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::shared_ptr< std::string > **)&_swig_go_result = new std::shared_ptr< std::string >(result); 
  return _swig_go_result;
}


std::shared_ptr< std::string > *_wrap_DBInterface_get__SWIG_1_swsscommon_728e05b169b08794(swss::DBInterface *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3) {
  swss::DBInterface *arg1 = (swss::DBInterface *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  SwigValueWrapper< std::shared_ptr< std::string > > result;
  std::shared_ptr< std::string > *_swig_go_result;
  
  arg1 = *(swss::DBInterface **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  {
    try {
      result = (arg1)->get((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::shared_ptr< std::string > **)&_swig_go_result = new std::shared_ptr< std::string >(result); 
  return _swig_go_result;
}


bool _wrap_DBInterface_hexists_swsscommon_728e05b169b08794(swss::DBInterface *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3) {
  swss::DBInterface *arg1 = (swss::DBInterface *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::DBInterface **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  {
    try {
      result = (bool)(arg1)->hexists((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


std::map< std::string,std::string,std::less< std::string > > *_wrap_DBInterface_get_all__SWIG_0_swsscommon_728e05b169b08794(swss::DBInterface *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, bool _swig_go_3) {
  swss::DBInterface *arg1 = (swss::DBInterface *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  std::map< std::string,std::string,std::less< std::string > > result;
  std::map< std::string,std::string,std::less< std::string > > *_swig_go_result;
  
  arg1 = *(swss::DBInterface **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  arg4 = (bool)_swig_go_3; 
  
  {
    try {
      result = (arg1)->get_all((std::string const &)*arg2,(std::string const &)*arg3,arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::map< std::string,std::string,std::less< std::string > > **)&_swig_go_result = new std::map< std::string,std::string,std::less< std::string > >(result); 
  return _swig_go_result;
}


std::map< std::string,std::string,std::less< std::string > > *_wrap_DBInterface_get_all__SWIG_1_swsscommon_728e05b169b08794(swss::DBInterface *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  swss::DBInterface *arg1 = (swss::DBInterface *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > result;
  std::map< std::string,std::string,std::less< std::string > > *_swig_go_result;
  
  arg1 = *(swss::DBInterface **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      result = (arg1)->get_all((std::string const &)*arg2,(std::string const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::map< std::string,std::string,std::less< std::string > > **)&_swig_go_result = new std::map< std::string,std::string,std::less< std::string > >(result); 
  return _swig_go_result;
}


std::vector< std::string > *_wrap_DBInterface_keys__SWIG_0_swsscommon_728e05b169b08794(swss::DBInterface *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, bool _swig_go_3) {
  swss::DBInterface *arg1 = (swss::DBInterface *) 0 ;
  std::string *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  std::vector< std::string > result;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = *(swss::DBInterface **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';
  
  arg4 = (bool)_swig_go_3; 
  
  {
    try {
      result = (arg1)->keys((std::string const &)*arg2,(char const *)arg3,arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::vector< std::string > **)&_swig_go_result = new std::vector< std::string >(result); 
  free(arg3); 
  return _swig_go_result;
}


std::vector< std::string > *_wrap_DBInterface_keys__SWIG_1_swsscommon_728e05b169b08794(swss::DBInterface *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  swss::DBInterface *arg1 = (swss::DBInterface *) 0 ;
  std::string *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  std::vector< std::string > result;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = *(swss::DBInterface **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';
  
  
  {
    try {
      result = (arg1)->keys((std::string const &)*arg2,(char const *)arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::vector< std::string > **)&_swig_go_result = new std::vector< std::string >(result); 
  free(arg3); 
  return _swig_go_result;
}


std::vector< std::string > *_wrap_DBInterface_keys__SWIG_2_swsscommon_728e05b169b08794(swss::DBInterface *_swig_go_0, _gostring_ _swig_go_1) {
  swss::DBInterface *arg1 = (swss::DBInterface *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > result;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = *(swss::DBInterface **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = (arg1)->keys((std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::vector< std::string > **)&_swig_go_result = new std::vector< std::string >(result); 
  return _swig_go_result;
}


std::pair< int,std::vector< std::string > > *_wrap_DBInterface_scan_swsscommon_728e05b169b08794(swss::DBInterface *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, _gostring_ _swig_go_3, intgo _swig_go_4) {
  swss::DBInterface *arg1 = (swss::DBInterface *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  uint32_t arg5 ;
  SwigValueWrapper< std::pair< int,std::vector< std::string > > > result;
  std::pair< int,std::vector< std::string > > *_swig_go_result;
  
  arg1 = *(swss::DBInterface **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (int)_swig_go_2; 
  
  arg4 = (char *)malloc(_swig_go_3.n + 1);
  memcpy(arg4, _swig_go_3.p, _swig_go_3.n);
  arg4[_swig_go_3.n] = '\0';
  
  arg5 = (uint32_t)_swig_go_4; 
  
  {
    try {
      result = (arg1)->scan((std::string const &)*arg2,arg3,(char const *)arg4,arg5);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(std::pair< int,std::vector< std::string > > **)&_swig_go_result = new std::pair< int,std::vector< std::string > >(result); 
  free(arg4); 
  return _swig_go_result;
}


long long _wrap_DBInterface_publish_swsscommon_728e05b169b08794(swss::DBInterface *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3) {
  swss::DBInterface *arg1 = (swss::DBInterface *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int64_t result;
  long long _swig_go_result;
  
  arg1 = *(swss::DBInterface **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  {
    try {
      result = (int64_t)(arg1)->publish((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_DBInterface_hmset_swsscommon_728e05b169b08794(swss::DBInterface *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, std::map< std::string,std::string,std::less< std::string > > *_swig_go_3) {
  swss::DBInterface *arg1 = (swss::DBInterface *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg4 = 0 ;
  
  arg1 = *(swss::DBInterface **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  arg4 = *(std::map< std::string,std::string,std::less< std::string > > **)&_swig_go_3; 
  
  {
    try {
      (arg1)->hmset((std::string const &)*arg2,(std::string const &)*arg3,(std::map< std::string,std::string,std::less< std::string > > const &)*arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


long long _wrap_DBInterface_set__SWIG_0_swsscommon_728e05b169b08794(swss::DBInterface *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3, _gostring_ _swig_go_4, bool _swig_go_5) {
  swss::DBInterface *arg1 = (swss::DBInterface *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  bool arg6 ;
  int64_t result;
  long long _swig_go_result;
  
  arg1 = *(swss::DBInterface **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(_swig_go_4.p, _swig_go_4.n);
  arg5 = &arg5_str;
  
  arg6 = (bool)_swig_go_5; 
  
  {
    try {
      result = (int64_t)(arg1)->set((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,arg6);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_DBInterface_set__SWIG_1_swsscommon_728e05b169b08794(swss::DBInterface *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3, _gostring_ _swig_go_4) {
  swss::DBInterface *arg1 = (swss::DBInterface *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  int64_t result;
  long long _swig_go_result;
  
  arg1 = *(swss::DBInterface **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(_swig_go_4.p, _swig_go_4.n);
  arg5 = &arg5_str;
  
  
  {
    try {
      result = (int64_t)(arg1)->set((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


swss::DBConnector *_wrap_DBInterface_get_redis_client_swsscommon_728e05b169b08794(swss::DBInterface *_swig_go_0, _gostring_ _swig_go_1) {
  swss::DBInterface *arg1 = (swss::DBInterface *) 0 ;
  std::string *arg2 = 0 ;
  swss::DBConnector *result = 0 ;
  swss::DBConnector *_swig_go_result;
  
  arg1 = *(swss::DBInterface **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = (swss::DBConnector *) &(arg1)->get_redis_client((std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::DBConnector **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_DBInterface_set_redis_kwargs_swsscommon_728e05b169b08794(swss::DBInterface *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, intgo _swig_go_3) {
  swss::DBInterface *arg1 = (swss::DBInterface *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  int arg4 ;
  
  arg1 = *(swss::DBInterface **)&_swig_go_0; 
  (&arg2)->assign(_swig_go_1.p, _swig_go_1.n); 
  (&arg3)->assign(_swig_go_2.p, _swig_go_2.n); 
  arg4 = (int)_swig_go_3; 
  
  {
    try {
      (arg1)->set_redis_kwargs(arg2,arg3,arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


intgo _wrap_DBInterface_BLOCKING_ATTEMPT_ERROR_THRESHOLD_DBInterface_swsscommon_728e05b169b08794() {
  int result;
  intgo _swig_go_result;
  
  
  result = swss::DBInterface::BLOCKING_ATTEMPT_ERROR_THRESHOLD;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_DBInterface_BLOCKING_ATTEMPT_SUPPRESSION_DBInterface_swsscommon_728e05b169b08794() {
  int result;
  intgo _swig_go_result;
  
  
  result = swss::DBInterface::BLOCKING_ATTEMPT_SUPPRESSION;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_DBInterface_CONNECT_RETRY_WAIT_TIME_DBInterface_swsscommon_728e05b169b08794() {
  int result;
  intgo _swig_go_result;
  
  
  result = swss::DBInterface::CONNECT_RETRY_WAIT_TIME;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_DBInterface_DATA_RETRIEVAL_WAIT_TIME_DBInterface_swsscommon_728e05b169b08794() {
  int result;
  intgo _swig_go_result;
  
  
  result = swss::DBInterface::DATA_RETRIEVAL_WAIT_TIME;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_DBInterface_PUB_SUB_NOTIFICATION_TIMEOUT_DBInterface_swsscommon_728e05b169b08794() {
  int result;
  intgo _swig_go_result;
  
  
  result = swss::DBInterface::PUB_SUB_NOTIFICATION_TIMEOUT;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_DBInterface_PUB_SUB_MAXIMUM_DATA_WAIT_DBInterface_swsscommon_728e05b169b08794() {
  double result;
  double _swig_go_result;
  
  
  result = swss::DBInterface::PUB_SUB_MAXIMUM_DATA_WAIT;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


swss::DBInterface *_wrap_new_DBInterface_swsscommon_728e05b169b08794() {
  swss::DBInterface *result = 0 ;
  swss::DBInterface *_swig_go_result;
  
  
  {
    try {
      result = (swss::DBInterface *)new swss::DBInterface();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::DBInterface **)&_swig_go_result = (swss::DBInterface *)result; 
  return _swig_go_result;
}


void _wrap_delete_DBInterface_swsscommon_728e05b169b08794(swss::DBInterface *_swig_go_0) {
  swss::DBInterface *arg1 = (swss::DBInterface *) 0 ;
  
  arg1 = *(swss::DBInterface **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


_gostring_ _wrap_DAEMON_LOGLEVEL_get_swsscommon_728e05b169b08794() {
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  
  result = (char *)(char *)swss::DAEMON_LOGLEVEL;
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


_gostring_ _wrap_DAEMON_LOGOUTPUT_get_swsscommon_728e05b169b08794() {
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  
  result = (char *)(char *)swss::DAEMON_LOGOUTPUT;
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


void _wrap_err_exit_swsscommon_728e05b169b08794(_gostring_ _swig_go_0, intgo _swig_go_1, intgo _swig_go_2, _gostring_ _swig_go_3) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  void *arg5 = 0 ;
  
  
  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';
  
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  
  arg4 = (char *)malloc(_swig_go_3.n + 1);
  memcpy(arg4, _swig_go_3.p, _swig_go_3.n);
  arg4[_swig_go_3.n] = '\0';
  
  
  {
    try {
      swss::err_exit((char const *)arg1,arg2,arg3,(char const *)arg4,arg5);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
  free(arg1); 
  free(arg4); 
}


intgo _wrap_SWSS_EMERG_Logger_swsscommon_728e05b169b08794() {
  swss::Logger::Priority result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = swss::Logger::SWSS_EMERG;
      
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_SWSS_ALERT_Logger_swsscommon_728e05b169b08794() {
  swss::Logger::Priority result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = swss::Logger::SWSS_ALERT;
      
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_SWSS_CRIT_Logger_swsscommon_728e05b169b08794() {
  swss::Logger::Priority result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = swss::Logger::SWSS_CRIT;
      
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_SWSS_ERROR_Logger_swsscommon_728e05b169b08794() {
  swss::Logger::Priority result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = swss::Logger::SWSS_ERROR;
      
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_SWSS_WARN_Logger_swsscommon_728e05b169b08794() {
  swss::Logger::Priority result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = swss::Logger::SWSS_WARN;
      
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_SWSS_NOTICE_Logger_swsscommon_728e05b169b08794() {
  swss::Logger::Priority result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = swss::Logger::SWSS_NOTICE;
      
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_SWSS_INFO_Logger_swsscommon_728e05b169b08794() {
  swss::Logger::Priority result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = swss::Logger::SWSS_INFO;
      
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_SWSS_DEBUG_Logger_swsscommon_728e05b169b08794() {
  swss::Logger::Priority result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = swss::Logger::SWSS_DEBUG;
      
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


std::map< std::string,enum swss::Logger::Priority,std::less< std::string > > *_wrap_Logger_priorityStringMap_get_swsscommon_728e05b169b08794() {
  swss::Logger::PriorityStringMap *result = 0 ;
  std::map< std::string,enum swss::Logger::Priority,std::less< std::string > > *_swig_go_result;
  
  
  result = (swss::Logger::PriorityStringMap *)&swss::Logger::priorityStringMap;
  *(swss::Logger::PriorityStringMap **)&_swig_go_result = (swss::Logger::PriorityStringMap *)result; 
  return _swig_go_result;
}


intgo _wrap_SWSS_SYSLOG_Logger_swsscommon_728e05b169b08794() {
  swss::Logger::Output result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = swss::Logger::SWSS_SYSLOG;
      
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_SWSS_STDOUT_Logger_swsscommon_728e05b169b08794() {
  swss::Logger::Output result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = swss::Logger::SWSS_STDOUT;
      
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_SWSS_STDERR_Logger_swsscommon_728e05b169b08794() {
  swss::Logger::Output result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = swss::Logger::SWSS_STDERR;
      
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


std::map< std::string,enum swss::Logger::Output,std::less< std::string > > *_wrap_Logger_outputStringMap_get_swsscommon_728e05b169b08794() {
  swss::Logger::OutputStringMap *result = 0 ;
  std::map< std::string,enum swss::Logger::Output,std::less< std::string > > *_swig_go_result;
  
  
  result = (swss::Logger::OutputStringMap *)&swss::Logger::outputStringMap;
  *(swss::Logger::OutputStringMap **)&_swig_go_result = (swss::Logger::OutputStringMap *)result; 
  return _swig_go_result;
}


swss::Logger *_wrap_Logger_getInstance_swsscommon_728e05b169b08794() {
  swss::Logger *result = 0 ;
  swss::Logger *_swig_go_result;
  
  
  {
    try {
      result = (swss::Logger *) &swss::Logger::getInstance();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::Logger **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Logger_setMinPrio_swsscommon_728e05b169b08794(intgo _swig_go_0) {
  swss::Logger::Priority arg1 ;
  
  arg1 = (swss::Logger::Priority)_swig_go_0; 
  
  {
    try {
      swss::Logger::setMinPrio(arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


intgo _wrap_Logger_getMinPrio_swsscommon_728e05b169b08794() {
  swss::Logger::Priority result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = (swss::Logger::Priority)swss::Logger::getMinPrio();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


void _wrap_Logger_linkToDbWithOutput_swsscommon_728e05b169b08794(_gostring_ _swig_go_0, std::function< void (std::string,std::string) > *_swig_go_1, _gostring_ _swig_go_2, std::function< void (std::string,std::string) > *_swig_go_3, _gostring_ _swig_go_4) {
  std::string *arg1 = 0 ;
  swss::Logger::PriorityChangeNotify *arg2 = 0 ;
  std::string *arg3 = 0 ;
  swss::Logger::OutputChangeNotify *arg4 = 0 ;
  std::string *arg5 = 0 ;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  arg2 = *(swss::Logger::PriorityChangeNotify **)&_swig_go_1; 
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  arg4 = *(swss::Logger::OutputChangeNotify **)&_swig_go_3; 
  
  std::string arg5_str(_swig_go_4.p, _swig_go_4.n);
  arg5 = &arg5_str;
  
  
  {
    try {
      swss::Logger::linkToDbWithOutput((std::string const &)*arg1,(std::function< void (std::string,std::string) > const &)*arg2,(std::string const &)*arg3,(std::function< void (std::string,std::string) > const &)*arg4,(std::string const &)*arg5);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_Logger_linkToDb_swsscommon_728e05b169b08794(_gostring_ _swig_go_0, std::function< void (std::string,std::string) > *_swig_go_1, _gostring_ _swig_go_2) {
  std::string *arg1 = 0 ;
  swss::Logger::PriorityChangeNotify *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  arg2 = *(swss::Logger::PriorityChangeNotify **)&_swig_go_1; 
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      swss::Logger::linkToDb((std::string const &)*arg1,(std::function< void (std::string,std::string) > const &)*arg2,(std::string const &)*arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_Logger_linkToDbNative__SWIG_0_swsscommon_728e05b169b08794(_gostring_ _swig_go_0, _gostring_ _swig_go_1) {
  std::string *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  {
    try {
      swss::Logger::linkToDbNative((std::string const &)*arg1,(char const *)arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
  free(arg2); 
}


void _wrap_Logger_linkToDbNative__SWIG_1_swsscommon_728e05b169b08794(_gostring_ _swig_go_0) {
  std::string *arg1 = 0 ;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  {
    try {
      swss::Logger::linkToDbNative((std::string const &)*arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_Logger_restartLogger_swsscommon_728e05b169b08794() {
  {
    try {
      swss::Logger::restartLogger();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_Logger_write_swsscommon_728e05b169b08794(swss::Logger *_swig_go_0, intgo _swig_go_1, _gostring_ _swig_go_2) {
  swss::Logger *arg1 = (swss::Logger *) 0 ;
  swss::Logger::Priority arg2 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = 0 ;
  
  arg1 = *(swss::Logger **)&_swig_go_0; 
  arg2 = (swss::Logger::Priority)_swig_go_1; 
  
  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';
  
  
  {
    try {
      (arg1)->write(arg2,(char const *)arg3,arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
  free(arg3); 
}


void _wrap_Logger_wthrow_swsscommon_728e05b169b08794(swss::Logger *_swig_go_0, intgo _swig_go_1, _gostring_ _swig_go_2) {
  swss::Logger *arg1 = (swss::Logger *) 0 ;
  swss::Logger::Priority arg2 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = 0 ;
  
  arg1 = *(swss::Logger **)&_swig_go_0; 
  arg2 = (swss::Logger::Priority)_swig_go_1; 
  
  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';
  
  
  {
    try {
      (arg1)->wthrow(arg2,(char const *)arg3,arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
  free(arg3); 
}


_gostring_ _wrap_Logger_priorityToString_swsscommon_728e05b169b08794(intgo _swig_go_0) {
  swss::Logger::Priority arg1 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = (swss::Logger::Priority)_swig_go_0; 
  
  {
    try {
      result = swss::Logger::priorityToString(arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_Logger_outputToString_swsscommon_728e05b169b08794(intgo _swig_go_0) {
  swss::Logger::Output arg1 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = (swss::Logger::Output)_swig_go_0; 
  
  {
    try {
      result = swss::Logger::outputToString(arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


void _wrap_Logger_swssOutputNotify_swsscommon_728e05b169b08794(_gostring_ _swig_go_0, _gostring_ _swig_go_1) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      swss::Logger::swssOutputNotify((std::string const &)*arg1,(std::string const &)*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


event_handle_t _wrap_events_init_publisher_swsscommon_728e05b169b08794(_gostring_ _swig_go_0) {
  std::string arg1 ;
  event_handle_t result;
  event_handle_t _swig_go_result;
  
  (&arg1)->assign(_swig_go_0.p, _swig_go_0.n); 
  
  {
    try {
      result = (event_handle_t)events_init_publisher(arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(event_handle_t *)&_swig_go_result = (event_handle_t)result; 
  return _swig_go_result;
}


void _wrap_events_deinit_publisher_swsscommon_728e05b169b08794(event_handle_t _swig_go_0) {
  event_handle_t arg1 = (event_handle_t) 0 ;
  
  arg1 = *(event_handle_t *)&_swig_go_0; 
  
  {
    try {
      events_deinit_publisher(arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


intgo _wrap_event_publish__SWIG_0_swsscommon_728e05b169b08794(event_handle_t _swig_go_0, _gostring_ _swig_go_1, std::map< std::string,std::string,std::less< std::string > > *_swig_go_2) {
  event_handle_t arg1 = (event_handle_t) 0 ;
  std::string arg2 ;
  event_params_t *arg3 = (event_params_t *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(event_handle_t *)&_swig_go_0; 
  (&arg2)->assign(_swig_go_1.p, _swig_go_1.n); 
  arg3 = *(event_params_t **)&_swig_go_2; 
  
  {
    try {
      result = (int)event_publish(arg1,arg2,(std::map< std::string,std::string,std::less< std::string > > const *)arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_event_publish__SWIG_1_swsscommon_728e05b169b08794(event_handle_t _swig_go_0, _gostring_ _swig_go_1) {
  event_handle_t arg1 = (event_handle_t) 0 ;
  std::string arg2 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(event_handle_t *)&_swig_go_0; 
  (&arg2)->assign(_swig_go_1.p, _swig_go_1.n); 
  
  {
    try {
      result = (int)event_publish(arg1,arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


event_handle_t _wrap_events_init_subscriber__SWIG_0_swsscommon_728e05b169b08794(bool _swig_go_0, intgo _swig_go_1, std::vector< std::string > *_swig_go_2) {
  bool arg1 ;
  int arg2 ;
  event_subscribe_sources_t *arg3 = (event_subscribe_sources_t *) 0 ;
  event_handle_t result;
  event_handle_t _swig_go_result;
  
  arg1 = (bool)_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = *(event_subscribe_sources_t **)&_swig_go_2; 
  
  {
    try {
      result = (event_handle_t)events_init_subscriber(arg1,arg2,(std::vector< std::string > const *)arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(event_handle_t *)&_swig_go_result = (event_handle_t)result; 
  return _swig_go_result;
}


event_handle_t _wrap_events_init_subscriber__SWIG_1_swsscommon_728e05b169b08794(bool _swig_go_0, intgo _swig_go_1) {
  bool arg1 ;
  int arg2 ;
  event_handle_t result;
  event_handle_t _swig_go_result;
  
  arg1 = (bool)_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  {
    try {
      result = (event_handle_t)events_init_subscriber(arg1,arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(event_handle_t *)&_swig_go_result = (event_handle_t)result; 
  return _swig_go_result;
}


event_handle_t _wrap_events_init_subscriber__SWIG_2_swsscommon_728e05b169b08794(bool _swig_go_0) {
  bool arg1 ;
  event_handle_t result;
  event_handle_t _swig_go_result;
  
  arg1 = (bool)_swig_go_0; 
  
  {
    try {
      result = (event_handle_t)events_init_subscriber(arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(event_handle_t *)&_swig_go_result = (event_handle_t)result; 
  return _swig_go_result;
}


event_handle_t _wrap_events_init_subscriber__SWIG_3_swsscommon_728e05b169b08794() {
  event_handle_t result;
  event_handle_t _swig_go_result;
  
  
  {
    try {
      result = (event_handle_t)events_init_subscriber();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(event_handle_t *)&_swig_go_result = (event_handle_t)result; 
  return _swig_go_result;
}


void _wrap_events_deinit_subscriber_swsscommon_728e05b169b08794(event_handle_t _swig_go_0) {
  event_handle_t arg1 = (event_handle_t) 0 ;
  
  arg1 = *(event_handle_t *)&_swig_go_0; 
  
  {
    try {
      events_deinit_subscriber(arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


void _wrap_event_receive_op_t_key_set_swsscommon_728e05b169b08794(event_receive_op_t *_swig_go_0, _gostring_ _swig_go_1) {
  event_receive_op_t *arg1 = (event_receive_op_t *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(event_receive_op_t **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->key = *arg2;
  
}


_gostring_ _wrap_event_receive_op_t_key_get_swsscommon_728e05b169b08794(event_receive_op_t *_swig_go_0) {
  event_receive_op_t *arg1 = (event_receive_op_t *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(event_receive_op_t **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->key);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_event_receive_op_t_params_set_swsscommon_728e05b169b08794(event_receive_op_t *_swig_go_0, std::map< std::string,std::string,std::less< std::string > > *_swig_go_1) {
  event_receive_op_t *arg1 = (event_receive_op_t *) 0 ;
  event_params_t *arg2 = (event_params_t *) 0 ;
  
  arg1 = *(event_receive_op_t **)&_swig_go_0; 
  arg2 = *(event_params_t **)&_swig_go_1; 
  
  if (arg1) (arg1)->params = *arg2;
  
}


std::map< std::string,std::string,std::less< std::string > > *_wrap_event_receive_op_t_params_get_swsscommon_728e05b169b08794(event_receive_op_t *_swig_go_0) {
  event_receive_op_t *arg1 = (event_receive_op_t *) 0 ;
  event_params_t *result = 0 ;
  std::map< std::string,std::string,std::less< std::string > > *_swig_go_result;
  
  arg1 = *(event_receive_op_t **)&_swig_go_0; 
  
  result = (event_params_t *)& ((arg1)->params);
  *(event_params_t **)&_swig_go_result = (event_params_t *)result; 
  return _swig_go_result;
}


void _wrap_event_receive_op_t_missed_cnt_set_swsscommon_728e05b169b08794(event_receive_op_t *_swig_go_0, intgo _swig_go_1) {
  event_receive_op_t *arg1 = (event_receive_op_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(event_receive_op_t **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->missed_cnt = arg2;
  
}


intgo _wrap_event_receive_op_t_missed_cnt_get_swsscommon_728e05b169b08794(event_receive_op_t *_swig_go_0) {
  event_receive_op_t *arg1 = (event_receive_op_t *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(event_receive_op_t **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->missed_cnt);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_event_receive_op_t_publish_epoch_ms_set_swsscommon_728e05b169b08794(event_receive_op_t *_swig_go_0, long long _swig_go_1) {
  event_receive_op_t *arg1 = (event_receive_op_t *) 0 ;
  int64_t arg2 ;
  
  arg1 = *(event_receive_op_t **)&_swig_go_0; 
  arg2 = (int64_t)_swig_go_1; 
  
  if (arg1) (arg1)->publish_epoch_ms = arg2;
  
}


long long _wrap_event_receive_op_t_publish_epoch_ms_get_swsscommon_728e05b169b08794(event_receive_op_t *_swig_go_0) {
  event_receive_op_t *arg1 = (event_receive_op_t *) 0 ;
  int64_t result;
  long long _swig_go_result;
  
  arg1 = *(event_receive_op_t **)&_swig_go_0; 
  
  result = (int64_t) ((arg1)->publish_epoch_ms);
  _swig_go_result = result; 
  return _swig_go_result;
}


event_receive_op_t *_wrap_new_event_receive_op_t_swsscommon_728e05b169b08794() {
  event_receive_op_t *result = 0 ;
  event_receive_op_t *_swig_go_result;
  
  
  {
    try {
      result = (event_receive_op_t *)new event_receive_op_t();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(event_receive_op_t **)&_swig_go_result = (event_receive_op_t *)result; 
  return _swig_go_result;
}


void _wrap_delete_event_receive_op_t_swsscommon_728e05b169b08794(event_receive_op_t *_swig_go_0) {
  event_receive_op_t *arg1 = (event_receive_op_t *) 0 ;
  
  arg1 = *(event_receive_op_t **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


intgo _wrap_event_receive_swsscommon_728e05b169b08794(event_handle_t _swig_go_0, event_receive_op_t *_swig_go_1) {
  event_handle_t arg1 = (event_handle_t) 0 ;
  event_receive_op_t *arg2 = 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(event_handle_t *)&_swig_go_0; 
  arg2 = *(event_receive_op_t **)&_swig_go_1; 
  
  {
    try {
      result = (int)event_receive(arg1,*arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_event_receive_json_swsscommon_728e05b169b08794(event_handle_t _swig_go_0, std::string *_swig_go_1, uint32_t *_swig_go_2, int64_t *_swig_go_3) {
  event_handle_t arg1 = (event_handle_t) 0 ;
  std::string *arg2 = 0 ;
  uint32_t *arg3 = 0 ;
  int64_t *arg4 = 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(event_handle_t *)&_swig_go_0; 
  arg2 = *(std::string **)&_swig_go_1; 
  arg3 = *(uint32_t **)&_swig_go_2; 
  arg4 = *(int64_t **)&_swig_go_3; 
  
  {
    try {
      result = (int)event_receive_json(arg1,*arg2,*arg3,*arg4);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_StatusCode_SWSS_RC_SUCCESS_swsscommon_728e05b169b08794() {
  swss::StatusCode result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = swss::StatusCode::SWSS_RC_SUCCESS;
      
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_StatusCode_SWSS_RC_INVALID_PARAM_swsscommon_728e05b169b08794() {
  swss::StatusCode result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = swss::StatusCode::SWSS_RC_INVALID_PARAM;
      
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_StatusCode_SWSS_RC_DEADLINE_EXCEEDED_swsscommon_728e05b169b08794() {
  swss::StatusCode result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = swss::StatusCode::SWSS_RC_DEADLINE_EXCEEDED;
      
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_StatusCode_SWSS_RC_UNAVAIL_swsscommon_728e05b169b08794() {
  swss::StatusCode result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = swss::StatusCode::SWSS_RC_UNAVAIL;
      
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_StatusCode_SWSS_RC_NOT_FOUND_swsscommon_728e05b169b08794() {
  swss::StatusCode result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = swss::StatusCode::SWSS_RC_NOT_FOUND;
      
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_StatusCode_SWSS_RC_NO_MEMORY_swsscommon_728e05b169b08794() {
  swss::StatusCode result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = swss::StatusCode::SWSS_RC_NO_MEMORY;
      
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_StatusCode_SWSS_RC_EXISTS_swsscommon_728e05b169b08794() {
  swss::StatusCode result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = swss::StatusCode::SWSS_RC_EXISTS;
      
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_StatusCode_SWSS_RC_PERMISSION_DENIED_swsscommon_728e05b169b08794() {
  swss::StatusCode result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = swss::StatusCode::SWSS_RC_PERMISSION_DENIED;
      
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_StatusCode_SWSS_RC_FULL_swsscommon_728e05b169b08794() {
  swss::StatusCode result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = swss::StatusCode::SWSS_RC_FULL;
      
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_StatusCode_SWSS_RC_IN_USE_swsscommon_728e05b169b08794() {
  swss::StatusCode result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = swss::StatusCode::SWSS_RC_IN_USE;
      
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_StatusCode_SWSS_RC_INTERNAL_swsscommon_728e05b169b08794() {
  swss::StatusCode result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = swss::StatusCode::SWSS_RC_INTERNAL;
      
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_StatusCode_SWSS_RC_UNIMPLEMENTED_swsscommon_728e05b169b08794() {
  swss::StatusCode result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = swss::StatusCode::SWSS_RC_UNIMPLEMENTED;
      
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_StatusCode_SWSS_RC_NOT_EXECUTED_swsscommon_728e05b169b08794() {
  swss::StatusCode result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = swss::StatusCode::SWSS_RC_NOT_EXECUTED;
      
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_StatusCode_SWSS_RC_FAILED_PRECONDITION_swsscommon_728e05b169b08794() {
  swss::StatusCode result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = swss::StatusCode::SWSS_RC_FAILED_PRECONDITION;
      
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_StatusCode_SWSS_RC_UNKNOWN_swsscommon_728e05b169b08794() {
  swss::StatusCode result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = swss::StatusCode::SWSS_RC_UNKNOWN;
      
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


std::map< enum swss::StatusCode,std::string,std::less< enum swss::StatusCode > > *_wrap_statusCodeMapping_get_swsscommon_728e05b169b08794() {
  std::map< swss::StatusCode,std::string,std::less< swss::StatusCode > > *result = 0 ;
  std::map< enum swss::StatusCode,std::string,std::less< enum swss::StatusCode > > *_swig_go_result;
  
  
  result = (std::map< swss::StatusCode,std::string,std::less< swss::StatusCode > > *)&swss::statusCodeMapping;
  *(std::map< swss::StatusCode,std::string,std::less< swss::StatusCode > > **)&_swig_go_result = (std::map< swss::StatusCode,std::string,std::less< swss::StatusCode > > *)result; 
  return _swig_go_result;
}


std::map< std::string,enum swss::StatusCode,std::less< std::string > > *_wrap_StatusCodeLookup_get_swsscommon_728e05b169b08794() {
  std::map< std::string,swss::StatusCode,std::less< std::string > > *result = 0 ;
  std::map< std::string,enum swss::StatusCode,std::less< std::string > > *_swig_go_result;
  
  
  result = (std::map< std::string,swss::StatusCode,std::less< std::string > > *)&swss::StatusCodeLookup;
  *(std::map< std::string,swss::StatusCode,std::less< std::string > > **)&_swig_go_result = (std::map< std::string,swss::StatusCode,std::less< std::string > > *)result; 
  return _swig_go_result;
}


_gostring_ _wrap_statusCodeToStr_swsscommon_728e05b169b08794(swss::StatusCode *_swig_go_0) {
  swss::StatusCode *arg1 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(swss::StatusCode **)&_swig_go_0; 
  
  {
    try {
      result = swss::statusCodeToStr((enum swss::StatusCode const &)*arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


intgo _wrap_strToStatusCode_swsscommon_728e05b169b08794(_gostring_ _swig_go_0) {
  std::string *arg1 = 0 ;
  swss::StatusCode result;
  intgo _swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  {
    try {
      result = (swss::StatusCode)swss::strToStatusCode((std::string const &)*arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


bool _wrap_RestartWaiter_waitAdvancedBootDone__SWIG_0_swsscommon_728e05b169b08794(intgo _swig_go_0, intgo _swig_go_1, bool _swig_go_2) {
  unsigned int arg1 ;
  unsigned int arg2 ;
  bool arg3 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = (unsigned int)_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  arg3 = (bool)_swig_go_2; 
  
  {
    try {
      result = (bool)swss::RestartWaiter::waitAdvancedBootDone(arg1,arg2,arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_RestartWaiter_waitAdvancedBootDone__SWIG_1_swsscommon_728e05b169b08794(intgo _swig_go_0, intgo _swig_go_1) {
  unsigned int arg1 ;
  unsigned int arg2 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = (unsigned int)_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  {
    try {
      result = (bool)swss::RestartWaiter::waitAdvancedBootDone(arg1,arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_RestartWaiter_waitAdvancedBootDone__SWIG_2_swsscommon_728e05b169b08794(intgo _swig_go_0) {
  unsigned int arg1 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = (unsigned int)_swig_go_0; 
  
  {
    try {
      result = (bool)swss::RestartWaiter::waitAdvancedBootDone(arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_RestartWaiter_waitAdvancedBootDone__SWIG_3_swsscommon_728e05b169b08794() {
  bool result;
  bool _swig_go_result;
  
  
  {
    try {
      result = (bool)swss::RestartWaiter::waitAdvancedBootDone();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_RestartWaiter_waitWarmBootDone__SWIG_0_swsscommon_728e05b169b08794(intgo _swig_go_0, intgo _swig_go_1, bool _swig_go_2) {
  unsigned int arg1 ;
  unsigned int arg2 ;
  bool arg3 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = (unsigned int)_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  arg3 = (bool)_swig_go_2; 
  
  {
    try {
      result = (bool)swss::RestartWaiter::waitWarmBootDone(arg1,arg2,arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_RestartWaiter_waitWarmBootDone__SWIG_1_swsscommon_728e05b169b08794(intgo _swig_go_0, intgo _swig_go_1) {
  unsigned int arg1 ;
  unsigned int arg2 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = (unsigned int)_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  {
    try {
      result = (bool)swss::RestartWaiter::waitWarmBootDone(arg1,arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_RestartWaiter_waitWarmBootDone__SWIG_2_swsscommon_728e05b169b08794(intgo _swig_go_0) {
  unsigned int arg1 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = (unsigned int)_swig_go_0; 
  
  {
    try {
      result = (bool)swss::RestartWaiter::waitWarmBootDone(arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_RestartWaiter_waitWarmBootDone__SWIG_3_swsscommon_728e05b169b08794() {
  bool result;
  bool _swig_go_result;
  
  
  {
    try {
      result = (bool)swss::RestartWaiter::waitWarmBootDone();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_RestartWaiter_waitFastBootDone__SWIG_0_swsscommon_728e05b169b08794(intgo _swig_go_0, intgo _swig_go_1, bool _swig_go_2) {
  unsigned int arg1 ;
  unsigned int arg2 ;
  bool arg3 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = (unsigned int)_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  arg3 = (bool)_swig_go_2; 
  
  {
    try {
      result = (bool)swss::RestartWaiter::waitFastBootDone(arg1,arg2,arg3);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_RestartWaiter_waitFastBootDone__SWIG_1_swsscommon_728e05b169b08794(intgo _swig_go_0, intgo _swig_go_1) {
  unsigned int arg1 ;
  unsigned int arg2 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = (unsigned int)_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  {
    try {
      result = (bool)swss::RestartWaiter::waitFastBootDone(arg1,arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_RestartWaiter_waitFastBootDone__SWIG_2_swsscommon_728e05b169b08794(intgo _swig_go_0) {
  unsigned int arg1 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = (unsigned int)_swig_go_0; 
  
  {
    try {
      result = (bool)swss::RestartWaiter::waitFastBootDone(arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_RestartWaiter_waitFastBootDone__SWIG_3_swsscommon_728e05b169b08794() {
  bool result;
  bool _swig_go_result;
  
  
  {
    try {
      result = (bool)swss::RestartWaiter::waitFastBootDone();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_RestartWaiter_isAdvancedBootInProgressHelper__SWIG_0_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0, bool _swig_go_1) {
  swss::DBConnector *arg1 = 0 ;
  bool arg2 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  {
    try {
      result = (bool)swss::RestartWaiter::isAdvancedBootInProgressHelper(*arg1,arg2);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_RestartWaiter_isAdvancedBootInProgressHelper__SWIG_1_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0) {
  swss::DBConnector *arg1 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  {
    try {
      result = (bool)swss::RestartWaiter::isAdvancedBootInProgressHelper(*arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_RestartWaiter_isAdvancedBootInProgress_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0) {
  swss::DBConnector *arg1 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  {
    try {
      result = (bool)swss::RestartWaiter::isAdvancedBootInProgress(*arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_RestartWaiter_isFastBootInProgress_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0) {
  swss::DBConnector *arg1 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  {
    try {
      result = (bool)swss::RestartWaiter::isFastBootInProgress(*arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_RestartWaiter_isWarmBootInProgress_swsscommon_728e05b169b08794(swss::DBConnector *_swig_go_0) {
  swss::DBConnector *arg1 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(swss::DBConnector **)&_swig_go_0; 
  
  {
    try {
      result = (bool)swss::RestartWaiter::isWarmBootInProgress(*arg1);
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


swss::RestartWaiter *_wrap_new_RestartWaiter_swsscommon_728e05b169b08794() {
  swss::RestartWaiter *result = 0 ;
  swss::RestartWaiter *_swig_go_result;
  
  
  {
    try {
      result = (swss::RestartWaiter *)new swss::RestartWaiter();
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  *(swss::RestartWaiter **)&_swig_go_result = (swss::RestartWaiter *)result; 
  return _swig_go_result;
}


void _wrap_delete_RestartWaiter_swsscommon_728e05b169b08794(swss::RestartWaiter *_swig_go_0) {
  swss::RestartWaiter *arg1 = (swss::RestartWaiter *) 0 ;
  
  arg1 = *(swss::RestartWaiter **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch(const std::system_error& e) {
      if (e.code() == std::make_error_code(std::errc::connection_reset))
      {
        SWIG_exception(SWIG_SystemError, "connection_reset");
      }
      else
      {
        SWIG_exception(SWIG_SystemError, e.what());
      }
    } catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError,e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  
}


#ifdef __cplusplus
}
#endif

